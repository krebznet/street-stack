/*
 * Generic Data Schema
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.dunkware.generic.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.annotation.Generated;

@Generated(value =  "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-25T05:52:21.898704711Z[GMT]")

public class GenAttributeType {
  @SerializedName("identifier")
  private String identifier = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("dataType")
  private GenDataType dataType = null;

  @SerializedName("dataFormat")
  private GenDataFormat dataFormat = null;

  public GenAttributeType identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * Unique string identifier for the attribute.
   * @return identifier
  **/
  @Schema(description = "Unique string identifier for the attribute.")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public GenAttributeType name(String name) {
    this.name = name;
    return this;
  }

   /**
   * User-friendly name for the attribute.
   * @return name
  **/
  @Schema(description = "User-friendly name for the attribute.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public GenAttributeType dataType(GenDataType dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   * Get dataType
   * @return dataType
  **/
  @Schema(description = "")
  public GenDataType getDataType() {
    return dataType;
  }

  public void setDataType(GenDataType dataType) {
    this.dataType = dataType;
  }

  public GenAttributeType dataFormat(GenDataFormat dataFormat) {
    this.dataFormat = dataFormat;
    return this;
  }

   /**
   * Get dataFormat
   * @return dataFormat
  **/
  @Schema(description = "")
  public GenDataFormat getDataFormat() {
    return dataFormat;
  }

  public void setDataFormat(GenDataFormat dataFormat) {
    this.dataFormat = dataFormat;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenAttributeType genAttributeType = (GenAttributeType) o;
    return Objects.equals(this.identifier, genAttributeType.identifier) &&
        Objects.equals(this.name, genAttributeType.name) &&
        Objects.equals(this.dataType, genAttributeType.dataType) &&
        Objects.equals(this.dataFormat, genAttributeType.dataFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identifier, name, dataType, dataFormat);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenAttributeType {\n");
    
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    dataFormat: ").append(toIndentedString(dataFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
