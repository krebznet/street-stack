/*
 * Generic Data Schema
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.dunkware.generic.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * GenAbsoluteTimeRange
 */

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-25T05:52:21.898704711Z[GMT]")

public class GenAbsoluteTimeRange {
  @SerializedName("startTime")
  private GenTime startTime = null;

  @SerializedName("enLocalTime")
  private GenTime enLocalTime = null;

  @SerializedName("hasTimeWindow")
  private Boolean hasTimeWindow = null;

  @SerializedName("timeWindow")
  private GenTimeRange timeWindow = null;

  public GenAbsoluteTimeRange startTime(GenTime startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @Schema(required = true, description = "")
  public GenTime getStartTime() {
    return startTime;
  }

  public void setStartTime(GenTime startTime) {
    this.startTime = startTime;
  }

  public GenAbsoluteTimeRange enLocalTime(GenTime enLocalTime) {
    this.enLocalTime = enLocalTime;
    return this;
  }

   /**
   * Get enLocalTime
   * @return enLocalTime
  **/
  @Schema(required = true, description = "")
  public GenTime getEnLocalTime() {
    return enLocalTime;
  }

  public void setEnLocalTime(GenTime enLocalTime) {
    this.enLocalTime = enLocalTime;
  }

  public GenAbsoluteTimeRange hasTimeWindow(Boolean hasTimeWindow) {
    this.hasTimeWindow = hasTimeWindow;
    return this;
  }

   /**
   * Boolean indicating if a specific time window is included in the range.
   * @return hasTimeWindow
  **/
  @Schema(description = "Boolean indicating if a specific time window is included in the range.")
  public Boolean isHasTimeWindow() {
    return hasTimeWindow;
  }

  public void setHasTimeWindow(Boolean hasTimeWindow) {
    this.hasTimeWindow = hasTimeWindow;
  }

  public GenAbsoluteTimeRange timeWindow(GenTimeRange timeWindow) {
    this.timeWindow = timeWindow;
    return this;
  }

   /**
   * Get timeWindow
   * @return timeWindow
  **/
  @Schema(description = "")
  public GenTimeRange getTimeWindow() {
    return timeWindow;
  }

  public void setTimeWindow(GenTimeRange timeWindow) {
    this.timeWindow = timeWindow;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenAbsoluteTimeRange genAbsoluteTimeRange = (GenAbsoluteTimeRange) o;
    return Objects.equals(this.startTime, genAbsoluteTimeRange.startTime) &&
        Objects.equals(this.enLocalTime, genAbsoluteTimeRange.enLocalTime) &&
        Objects.equals(this.hasTimeWindow, genAbsoluteTimeRange.hasTimeWindow) &&
        Objects.equals(this.timeWindow, genAbsoluteTimeRange.timeWindow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startTime, enLocalTime, hasTimeWindow, timeWindow);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenAbsoluteTimeRange {\n");
    
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    enLocalTime: ").append(toIndentedString(enLocalTime)).append("\n");
    sb.append("    hasTimeWindow: ").append(toIndentedString(hasTimeWindow)).append("\n");
    sb.append("    timeWindow: ").append(toIndentedString(timeWindow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
