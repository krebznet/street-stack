/*
 * Generic Data Schema
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.dunkware.generic.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * GenEntityType
 */

@jakarta.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-25T05:52:21.898704711Z[GMT]")

public class GenEntityType {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("identifier")
  private String identifier = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("attributes")
  private List<GenAttributeType> attributes = null;

  public GenEntityType id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * The numeric ID of the entity type.
   * @return id
  **/
  @Schema(description = "The numeric ID of the entity type.")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }

  public GenEntityType identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * Unique string identifier for the entity type.
   * @return identifier
  **/
  @Schema(description = "Unique string identifier for the entity type.")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public GenEntityType name(String name) {
    this.name = name;
    return this;
  }

   /**
   * User-friendly name for the entity type.
   * @return name
  **/
  @Schema(description = "User-friendly name for the entity type.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public GenEntityType attributes(List<GenAttributeType> attributes) {
    this.attributes = attributes;
    return this;
  }

  public GenEntityType addAttributesItem(GenAttributeType attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<GenAttributeType>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * A list of attributes for the entity type.
   * @return attributes
  **/
  @Schema(description = "A list of attributes for the entity type.")
  public List<GenAttributeType> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<GenAttributeType> attributes) {
    this.attributes = attributes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenEntityType genEntityType = (GenEntityType) o;
    return Objects.equals(this.id, genEntityType.id) &&
        Objects.equals(this.identifier, genEntityType.identifier) &&
        Objects.equals(this.name, genEntityType.name) &&
        Objects.equals(this.attributes, genEntityType.attributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, identifier, name, attributes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenEntityType {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
