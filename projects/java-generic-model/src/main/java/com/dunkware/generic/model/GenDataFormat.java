/*
 * Generic Data Schema
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.dunkware.generic.model;

import java.io.IOException;
/**
 * GenDataFormat
 */
import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.v3.oas.annotations.media.Schema;

@jakarta.annotation.Generated(value =  "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-25T05:52:21.898704711Z[GMT]")

public class GenDataFormat {
  /**
   * The type of data formatting to apply.
   */
  @JsonAdapter(FormatTypeEnum.Adapter.class)
  public enum FormatTypeEnum {
    @SerializedName("roundToDecimalPlaces")
    ROUNDTODECIMALPLACES("roundToDecimalPlaces"),
    @SerializedName("displayAsPercent")
    DISPLAYASPERCENT("displayAsPercent"),
    @SerializedName("addCommas")
    ADDCOMMAS("addCommas"),
    @SerializedName("truncateString")
    TRUNCATESTRING("truncateString"),
    @SerializedName("currency")
    CURRENCY("currency"),
    @SerializedName("abbreviateNumber")
    ABBREVIATENUMBER("abbreviateNumber");

    private String value;

    FormatTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static FormatTypeEnum fromValue(String input) {
      for (FormatTypeEnum b : FormatTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<FormatTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public FormatTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return FormatTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("formatType")
  private FormatTypeEnum formatType = null;

  @SerializedName("precision")
  private Integer precision = null;

  @SerializedName("truncateLength")
  private Integer truncateLength = null;

  @SerializedName("currencySymbol")
  private String currencySymbol = null;

  @SerializedName("abbreviationStyle")
  private String abbreviationStyle = null;

  public GenDataFormat formatType(FormatTypeEnum formatType) {
    this.formatType = formatType;
    return this;
  }

   /**
   * The type of data formatting to apply.
   * @return formatType
  **/
  @Schema(description = "The type of data formatting to apply.")
  public FormatTypeEnum getFormatType() {
    return formatType;
  }

  public void setFormatType(FormatTypeEnum formatType) {
    this.formatType = formatType;
  }

  public GenDataFormat precision(Integer precision) {
    this.precision = precision;
    return this;
  }

   /**
   * Number of decimal places for rounding (used with roundToDecimalPlaces).
   * @return precision
  **/
  @Schema(description = "Number of decimal places for rounding (used with roundToDecimalPlaces).")
  public Integer getPrecision() {
    return precision;
  }

  public void setPrecision(Integer precision) {
    this.precision = precision;
  }

  public GenDataFormat truncateLength(Integer truncateLength) {
    this.truncateLength = truncateLength;
    return this;
  }

   /**
   * Maximum length for truncating strings (used with truncateString).
   * @return truncateLength
  **/
  @Schema(description = "Maximum length for truncating strings (used with truncateString).")
  public Integer getTruncateLength() {
    return truncateLength;
  }

  public void setTruncateLength(Integer truncateLength) {
    this.truncateLength = truncateLength;
  }

  public GenDataFormat currencySymbol(String currencySymbol) {
    this.currencySymbol = currencySymbol;
    return this;
  }

   /**
   * Symbol for currency formatting (used with currency).
   * @return currencySymbol
  **/
  @Schema(description = "Symbol for currency formatting (used with currency).")
  public String getCurrencySymbol() {
    return currencySymbol;
  }

  public void setCurrencySymbol(String currencySymbol) {
    this.currencySymbol = currencySymbol;
  }

  public GenDataFormat abbreviationStyle(String abbreviationStyle) {
    this.abbreviationStyle = abbreviationStyle;
    return this;
  }

   /**
   * Style for abbreviating large numbers (used with abbreviateNumber).
   * @return abbreviationStyle
  **/
  @Schema(description = "Style for abbreviating large numbers (used with abbreviateNumber).")
  public String getAbbreviationStyle() {
    return abbreviationStyle;
  }

  public void setAbbreviationStyle(String abbreviationStyle) {
    this.abbreviationStyle = abbreviationStyle;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenDataFormat genDataFormat = (GenDataFormat) o;
    return Objects.equals(this.formatType, genDataFormat.formatType) &&
        Objects.equals(this.precision, genDataFormat.precision) &&
        Objects.equals(this.truncateLength, genDataFormat.truncateLength) &&
        Objects.equals(this.currencySymbol, genDataFormat.currencySymbol) &&
        Objects.equals(this.abbreviationStyle, genDataFormat.abbreviationStyle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(formatType, precision, truncateLength, currencySymbol, abbreviationStyle);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenDataFormat {\n");
    
    sb.append("    formatType: ").append(toIndentedString(formatType)).append("\n");
    sb.append("    precision: ").append(toIndentedString(precision)).append("\n");
    sb.append("    truncateLength: ").append(toIndentedString(truncateLength)).append("\n");
    sb.append("    currencySymbol: ").append(toIndentedString(currencySymbol)).append("\n");
    sb.append("    abbreviationStyle: ").append(toIndentedString(abbreviationStyle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
