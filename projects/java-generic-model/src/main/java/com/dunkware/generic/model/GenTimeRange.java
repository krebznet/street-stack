/*
 * Generic Data Schema
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.dunkware.generic.model;

import java.util.Objects;

import org.threeten.bp.OffsetDateTime;

import com.google.gson.annotations.SerializedName;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.annotation.Generated;
/**
 * GenTimeRange
 */

@Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-05-25T05:52:21.898704711Z[GMT]")

public class GenTimeRange {
  @SerializedName("type")
  private GenTimeRangeType type = null;

  @SerializedName("startDate")
  private OffsetDateTime startDate = null;

  @SerializedName("endDate")
  private OffsetDateTime endDate = null;

  @SerializedName("relativeValue")
  private Integer relativeValue = null;

  @SerializedName("relativeTimeUnit")
  private GenTimeUnit relativeTimeUnit = null;

  @SerializedName("hasTimeWindow")
  private Boolean hasTimeWindow = null;

  @SerializedName("timeWindow")
  private GenTimeRange timeWindow = null;

  public GenTimeRange type(GenTimeRangeType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(required = true, description = "")
  public GenTimeRangeType getType() {
    return type;
  }

  public void setType(GenTimeRangeType type) {
    this.type = type;
  }

  public GenTimeRange startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * Start date and time of the range.
   * @return startDate
  **/
  @Schema(description = "Start date and time of the range.")
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }

  public GenTimeRange endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

   /**
   * End date and time of the range.
   * @return endDate
  **/
  @Schema(description = "End date and time of the range.")
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }

  public GenTimeRange relativeValue(Integer relativeValue) {
    this.relativeValue = relativeValue;
    return this;
  }

   /**
   * The value for the relative time range.
   * @return relativeValue
  **/
  @Schema(description = "The value for the relative time range.")
  public Integer getRelativeValue() {
    return relativeValue;
  }

  public void setRelativeValue(Integer relativeValue) {
    this.relativeValue = relativeValue;
  }

  public GenTimeRange relativeTimeUnit(GenTimeUnit relativeTimeUnit) {
    this.relativeTimeUnit = relativeTimeUnit;
    return this;
  }

   /**
   * Get relativeTimeUnit
   * @return relativeTimeUnit
  **/
  @Schema(description = "")
  public GenTimeUnit getRelativeTimeUnit() {
    return relativeTimeUnit;
  }

  public void setRelativeTimeUnit(GenTimeUnit relativeTimeUnit) {
    this.relativeTimeUnit = relativeTimeUnit;
  }

  public GenTimeRange hasTimeWindow(Boolean hasTimeWindow) {
    this.hasTimeWindow = hasTimeWindow;
    return this;
  }

   /**
   * Boolean indicating if a specific time window is included in the range.
   * @return hasTimeWindow
  **/
  @Schema(description = "Boolean indicating if a specific time window is included in the range.")
  public Boolean isHasTimeWindow() {
    return hasTimeWindow;
  }

  public void setHasTimeWindow(Boolean hasTimeWindow) {
    this.hasTimeWindow = hasTimeWindow;
  }

  public GenTimeRange timeWindow(GenTimeRange timeWindow) {
    this.timeWindow = timeWindow;
    return this;
  }

   /**
   * Get timeWindow
   * @return timeWindow
  **/
  @Schema(description = "")
  public GenTimeRange getTimeWindow() {
    return timeWindow;
  }

  public void setTimeWindow(GenTimeRange timeWindow) {
    this.timeWindow = timeWindow;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenTimeRange genTimeRange = (GenTimeRange) o;
    return Objects.equals(this.type, genTimeRange.type) &&
        Objects.equals(this.startDate, genTimeRange.startDate) &&
        Objects.equals(this.endDate, genTimeRange.endDate) &&
        Objects.equals(this.relativeValue, genTimeRange.relativeValue) &&
        Objects.equals(this.relativeTimeUnit, genTimeRange.relativeTimeUnit) &&
        Objects.equals(this.hasTimeWindow, genTimeRange.hasTimeWindow) &&
        Objects.equals(this.timeWindow, genTimeRange.timeWindow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, startDate, endDate, relativeValue, relativeTimeUnit, hasTimeWindow, timeWindow);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenTimeRange {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    relativeValue: ").append(toIndentedString(relativeValue)).append("\n");
    sb.append("    relativeTimeUnit: ").append(toIndentedString(relativeTimeUnit)).append("\n");
    sb.append("    hasTimeWindow: ").append(toIndentedString(hasTimeWindow)).append("\n");
    sb.append("    timeWindow: ").append(toIndentedString(timeWindow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
