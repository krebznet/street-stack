/*
 * generated by Xtext 2.21.0
 */
grammar InternalXScript;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.dunkware.xstream.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.dunkware.xstream.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.dunkware.xstream.services.XScriptGrammarAccess;

}

@parser::members {

 	private XScriptGrammarAccess grammarAccess;

    public InternalXScriptParser(TokenStream input, XScriptGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "XScript";
   	}

   	@Override
   	protected XScriptGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleXScript
entryRuleXScript returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXScriptRule()); }
	iv_ruleXScript=ruleXScript
	{ $current=$iv_ruleXScript.current; }
	EOF;

// Rule XScript
ruleXScript returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getXScriptAccess().getElementsScriptElementParserRuleCall_0());
			}
			lv_elements_0_0=ruleScriptElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getXScriptRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"com.dunkware.xstream.XScript.ScriptElement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleScriptElement
entryRuleScriptElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScriptElementRule()); }
	iv_ruleScriptElement=ruleScriptElement
	{ $current=$iv_ruleScriptElement.current; }
	EOF;

// Rule ScriptElement
ruleScriptElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getScriptElementAccess().getCoreAbstractElementParserRuleCall());
	}
	this_CoreAbstractElement_0=ruleCoreAbstractElement
	{
		$current = $this_CoreAbstractElement_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleCoreAbstractElement
entryRuleCoreAbstractElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCoreAbstractElementRule()); }
	iv_ruleCoreAbstractElement=ruleCoreAbstractElement
	{ $current=$iv_ruleCoreAbstractElement.current; }
	EOF;

// Rule CoreAbstractElement
ruleCoreAbstractElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCoreAbstractElementAccess().getVarTypeParserRuleCall_0());
		}
		this_VarType_0=ruleVarType
		{
			$current = $this_VarType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCoreAbstractElementAccess().getXClassTypeParserRuleCall_1());
		}
		this_XClassType_1=ruleXClassType
		{
			$current = $this_XClassType_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCoreAbstractElementAccess().getSignalTypeParserRuleCall_2());
		}
		this_SignalType_2=ruleSignalType
		{
			$current = $this_SignalType_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCoreAbstractElementAccess().getXQueryTypeParserRuleCall_3());
		}
		this_XQueryType_3=ruleXQueryType
		{
			$current = $this_XQueryType_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVarType
entryRuleVarType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarTypeRule()); }
	iv_ruleVarType=ruleVarType
	{ $current=$iv_ruleVarType.current; }
	EOF;

// Rule VarType
ruleVarType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='svar'
		{
			newLeafNode(otherlv_0, grammarAccess.getVarTypeAccess().getSvarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVarTypeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getVarTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_code_3_0=RULE_INT
				{
					newLeafNode(lv_code_3_0, grammarAccess.getVarTypeAccess().getCodeINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarTypeRule());
					}
					setWithLastConsumed(
						$current,
						"code",
						lv_code_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getVarTypeAccess().getCommaKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarTypeAccess().getTypeDataTypeEnumRuleCall_5_0());
				}
				lv_type_5_0=ruleDataType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_5_0,
						"com.dunkware.xstream.XScript.DataType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getVarTypeAccess().getRightParenthesisKeyword_6());
		}
		otherlv_7='='
		{
			newLeafNode(otherlv_7, grammarAccess.getVarTypeAccess().getEqualsSignKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarTypeAccess().getExpressionExpressionTypeParserRuleCall_8_0());
				}
				lv_expression_8_0=ruleExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarTypeRule());
					}
					set(
						$current,
						"expression",
						lv_expression_8_0,
						"com.dunkware.xstream.XScript.ExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9=';'
		{
			newLeafNode(otherlv_9, grammarAccess.getVarTypeAccess().getSemicolonKeyword_9());
		}
	)
;

// Entry rule entryRuleExpressionType
entryRuleExpressionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionTypeRule()); }
	iv_ruleExpressionType=ruleExpressionType
	{ $current=$iv_ruleExpressionType.current; }
	EOF;

// Rule ExpressionType
ruleExpressionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionTypeAccess().getOrTypeParserRuleCall());
	}
	this_OrType_0=ruleOrType
	{
		$current = $this_OrType_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOrType
entryRuleOrType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrTypeRule()); }
	iv_ruleOrType=ruleOrType
	{ $current=$iv_ruleOrType.current; }
	EOF;

// Rule OrType
ruleOrType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrTypeAccess().getAndTypeParserRuleCall_0());
		}
		this_AndType_0=ruleAndType
		{
			$current = $this_AndType_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrTypeAccess().getOrTypeLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='||'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrTypeAccess().getVerticalLineVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrTypeAccess().getRightAndTypeParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAndType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrTypeRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.dunkware.xstream.XScript.AndType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndType
entryRuleAndType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndTypeRule()); }
	iv_ruleAndType=ruleAndType
	{ $current=$iv_ruleAndType.current; }
	EOF;

// Rule AndType
ruleAndType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndTypeAccess().getEqualityTypeParserRuleCall_0());
		}
		this_EqualityType_0=ruleEqualityType
		{
			$current = $this_EqualityType_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndTypeAccess().getAndTypeLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='&&'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndTypeAccess().getAmpersandAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndTypeAccess().getRightEqualityTypeParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleEqualityType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndTypeRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.dunkware.xstream.XScript.EqualityType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEqualityType
entryRuleEqualityType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityTypeRule()); }
	iv_ruleEqualityType=ruleEqualityType
	{ $current=$iv_ruleEqualityType.current; }
	EOF;

// Rule EqualityType
ruleEqualityType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualityTypeAccess().getComparisonTypeParserRuleCall_0());
		}
		this_ComparisonType_0=ruleComparisonType
		{
			$current = $this_ComparisonType_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEqualityTypeAccess().getEqualityTypeLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='=='
						{
							newLeafNode(lv_op_2_1, grammarAccess.getEqualityTypeAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityTypeRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='!='
						{
							newLeafNode(lv_op_2_2, grammarAccess.getEqualityTypeAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getEqualityTypeRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityTypeAccess().getRightComparisonTypeParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleComparisonType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityTypeRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.dunkware.xstream.XScript.ComparisonType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparisonType
entryRuleComparisonType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonTypeRule()); }
	iv_ruleComparisonType=ruleComparisonType
	{ $current=$iv_ruleComparisonType.current; }
	EOF;

// Rule ComparisonType
ruleComparisonType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonTypeAccess().getPlusOrMinusTypeParserRuleCall_0());
		}
		this_PlusOrMinusType_0=rulePlusOrMinusType
		{
			$current = $this_PlusOrMinusType_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getComparisonTypeAccess().getComparisonTypeLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='>='
						{
							newLeafNode(lv_op_2_1, grammarAccess.getComparisonTypeAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonTypeRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='<='
						{
							newLeafNode(lv_op_2_2, grammarAccess.getComparisonTypeAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonTypeRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
						    |
						lv_op_2_3='>'
						{
							newLeafNode(lv_op_2_3, grammarAccess.getComparisonTypeAccess().getOpGreaterThanSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonTypeRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_3, null);
						}
						    |
						lv_op_2_4='<'
						{
							newLeafNode(lv_op_2_4, grammarAccess.getComparisonTypeAccess().getOpLessThanSignKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getComparisonTypeRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_4, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonTypeAccess().getRightPlusOrMinusTypeParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePlusOrMinusType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonTypeRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.dunkware.xstream.XScript.PlusOrMinusType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePlusOrMinusType
entryRulePlusOrMinusType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlusOrMinusTypeRule()); }
	iv_rulePlusOrMinusType=rulePlusOrMinusType
	{ $current=$iv_rulePlusOrMinusType.current; }
	EOF;

// Rule PlusOrMinusType
rulePlusOrMinusType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPlusOrMinusTypeAccess().getMulOrDivTypeParserRuleCall_0());
		}
		this_MulOrDivType_0=ruleMulOrDivType
		{
			$current = $this_MulOrDivType_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getPlusOrMinusTypeAccess().getPlusTypeLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='+'
					{
						newLeafNode(otherlv_2, grammarAccess.getPlusOrMinusTypeAccess().getPlusSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getPlusOrMinusTypeAccess().getMinusTypeLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='-'
					{
						newLeafNode(otherlv_4, grammarAccess.getPlusOrMinusTypeAccess().getHyphenMinusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPlusOrMinusTypeAccess().getRightMulOrDivTypeParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleMulOrDivType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlusOrMinusTypeRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"com.dunkware.xstream.XScript.MulOrDivType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMulOrDivType
entryRuleMulOrDivType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMulOrDivTypeRule()); }
	iv_ruleMulOrDivType=ruleMulOrDivType
	{ $current=$iv_ruleMulOrDivType.current; }
	EOF;

// Rule MulOrDivType
ruleMulOrDivType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMulOrDivTypeAccess().getPrimaryTypeParserRuleCall_0());
		}
		this_PrimaryType_0=rulePrimaryType
		{
			$current = $this_PrimaryType_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMulOrDivTypeAccess().getMulOrDivTypeLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='*'
						{
							newLeafNode(lv_op_2_1, grammarAccess.getMulOrDivTypeAccess().getOpAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMulOrDivTypeRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='/'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getMulOrDivTypeAccess().getOpSolidusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMulOrDivTypeRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMulOrDivTypeAccess().getRightPrimaryTypeParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimaryType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulOrDivTypeRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.dunkware.xstream.XScript.PrimaryType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimaryType
entryRulePrimaryType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryTypeRule()); }
	iv_rulePrimaryType=rulePrimaryType
	{ $current=$iv_rulePrimaryType.current; }
	EOF;

// Rule PrimaryType
rulePrimaryType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getPrimaryTypeAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryTypeAccess().getExpressionTypeParserRuleCall_0_1());
			}
			this_ExpressionType_1=ruleExpressionType
			{
				$current = $this_ExpressionType_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryTypeAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryTypeAccess().getNotTypeAction_1_0(),
						$current);
				}
			)
			otherlv_4='!'
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimaryTypeAccess().getExclamationMarkKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryTypeAccess().getExpressionPrimaryTypeParserRuleCall_1_2_0());
					}
					lv_expression_5_0=rulePrimaryType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryTypeRule());
						}
						set(
							$current,
							"expression",
							lv_expression_5_0,
							"com.dunkware.xstream.XScript.PrimaryType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryTypeAccess().getAtomicTypeParserRuleCall_2());
		}
		this_AtomicType_6=ruleAtomicType
		{
			$current = $this_AtomicType_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAtomicType
entryRuleAtomicType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicTypeRule()); }
	iv_ruleAtomicType=ruleAtomicType
	{ $current=$iv_ruleAtomicType.current; }
	EOF;

// Rule AtomicType
ruleAtomicType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getAtomicTypeAccess().getAtomicBaseTypeParserRuleCall());
	}
	this_AtomicBaseType_0=ruleAtomicBaseType
	{
		$current = $this_AtomicBaseType_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAtomicBaseType
entryRuleAtomicBaseType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicBaseTypeRule()); }
	iv_ruleAtomicBaseType=ruleAtomicBaseType
	{ $current=$iv_ruleAtomicBaseType.current; }
	EOF;

// Rule AtomicBaseType
ruleAtomicBaseType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicBaseTypeAccess().getDoubleConstantTypeAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_value_1_0=RULE_DOUBLE
					{
						newLeafNode(lv_value_1_0, grammarAccess.getAtomicBaseTypeAccess().getValueDOUBLETerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicBaseTypeRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_0,
							"com.dunkware.xstream.XScript.DOUBLE");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicBaseTypeAccess().getIntConstantTypeAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_3_0=RULE_INT
					{
						newLeafNode(lv_value_3_0, grammarAccess.getAtomicBaseTypeAccess().getValueINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicBaseTypeRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicBaseTypeAccess().getStringConstantTypeAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_value_5_0=RULE_STRING
					{
						newLeafNode(lv_value_5_0, grammarAccess.getAtomicBaseTypeAccess().getValueSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicBaseTypeRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_5_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicBaseTypeAccess().getBoolConstantTypeAction_3_0(),
						$current);
				}
			)
			(
				(
					(
						lv_value_7_1='true'
						{
							newLeafNode(lv_value_7_1, grammarAccess.getAtomicBaseTypeAccess().getValueTrueKeyword_3_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAtomicBaseTypeRule());
							}
							setWithLastConsumed($current, "value", lv_value_7_1, null);
						}
						    |
						lv_value_7_2='false'
						{
							newLeafNode(lv_value_7_2, grammarAccess.getAtomicBaseTypeAccess().getValueFalseKeyword_3_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAtomicBaseTypeRule());
							}
							setWithLastConsumed($current, "value", lv_value_7_2, null);
						}
					)
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getAtomicBaseTypeAccess().getTickExpressionTypeParserRuleCall_4());
		}
		this_TickExpressionType_8=ruleTickExpressionType
		{
			$current = $this_TickExpressionType_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicBaseTypeAccess().getSnapshotExpressionTypeParserRuleCall_5());
		}
		this_SnapshotExpressionType_9=ruleSnapshotExpressionType
		{
			$current = $this_SnapshotExpressionType_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicBaseTypeAccess().getSetExpressionTypeParserRuleCall_6());
		}
		this_SetExpressionType_10=ruleSetExpressionType
		{
			$current = $this_SetExpressionType_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicBaseTypeAccess().getRocExpressionTypeParserRuleCall_7());
		}
		this_RocExpressionType_11=ruleRocExpressionType
		{
			$current = $this_RocExpressionType_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicBaseTypeAccess().getAvgExpressionTypeParserRuleCall_8());
		}
		this_AvgExpressionType_12=ruleAvgExpressionType
		{
			$current = $this_AvgExpressionType_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicBaseTypeAccess().getVariableValueExpTypeParserRuleCall_9());
		}
		this_VariableValueExpType_13=ruleVariableValueExpType
		{
			$current = $this_VariableValueExpType_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicBaseTypeAccess().getVariableValueRangeTypeParserRuleCall_10());
		}
		this_VariableValueRangeType_14=ruleVariableValueRangeType
		{
			$current = $this_VariableValueRangeType_14.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicBaseTypeAccess().getVariableValueTypeParserRuleCall_11());
		}
		this_VariableValueType_15=ruleVariableValueType
		{
			$current = $this_VariableValueType_15.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicBaseTypeAccess().getSubExpressionTypeParserRuleCall_12());
		}
		this_SubExpressionType_16=ruleSubExpressionType
		{
			$current = $this_SubExpressionType_16.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAtomicBaseTypeAccess().getSessionSignalExpressionTypeParserRuleCall_13());
		}
		this_SessionSignalExpressionType_17=ruleSessionSignalExpressionType
		{
			$current = $this_SessionSignalExpressionType_17.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTickExpressionType
entryRuleTickExpressionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTickExpressionTypeRule()); }
	iv_ruleTickExpressionType=ruleTickExpressionType
	{ $current=$iv_ruleTickExpressionType.current; }
	EOF;

// Rule TickExpressionType
ruleTickExpressionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTickExpressionTypeAccess().getTickExpressionTypeAction_0(),
					$current);
			}
		)
		otherlv_1='tick'
		{
			newLeafNode(otherlv_1, grammarAccess.getTickExpressionTypeAccess().getTickKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getTickExpressionTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_type_3_0=RULE_INT
				{
					newLeafNode(lv_type_3_0, grammarAccess.getTickExpressionTypeAccess().getTypeINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTickExpressionTypeRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getTickExpressionTypeAccess().getCommaKeyword_4());
		}
		(
			(
				lv_field_5_0=RULE_INT
				{
					newLeafNode(lv_field_5_0, grammarAccess.getTickExpressionTypeAccess().getFieldINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTickExpressionTypeRule());
					}
					setWithLastConsumed(
						$current,
						"field",
						lv_field_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6=','
		{
			newLeafNode(otherlv_6, grammarAccess.getTickExpressionTypeAccess().getCommaKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTickExpressionTypeAccess().getDataTypeDataTypeEnumRuleCall_7_0());
				}
				lv_dataType_7_0=ruleDataType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTickExpressionTypeRule());
					}
					set(
						$current,
						"dataType",
						lv_dataType_7_0,
						"com.dunkware.xstream.XScript.DataType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getTickExpressionTypeAccess().getRightParenthesisKeyword_8());
		}
	)
;

// Entry rule entryRuleVariableValueRangeType
entryRuleVariableValueRangeType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableValueRangeTypeRule()); }
	iv_ruleVariableValueRangeType=ruleVariableValueRangeType
	{ $current=$iv_ruleVariableValueRangeType.current; }
	EOF;

// Rule VariableValueRangeType
ruleVariableValueRangeType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariableValueRangeTypeAccess().getVariableValueRangeTypeAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableValueRangeTypeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getVariableValueRangeTypeAccess().getTargetVarVarTypeCrossReference_1_0());
				}
			)
		)
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableValueRangeTypeAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				lv_startIndex_3_0=RULE_INT
				{
					newLeafNode(lv_startIndex_3_0, grammarAccess.getVariableValueRangeTypeAccess().getStartIndexINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableValueRangeTypeRule());
					}
					setWithLastConsumed(
						$current,
						"startIndex",
						lv_startIndex_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getVariableValueRangeTypeAccess().getCommaKeyword_4());
		}
		(
			(
				lv_endIndex_5_0=RULE_INT
				{
					newLeafNode(lv_endIndex_5_0, grammarAccess.getVariableValueRangeTypeAccess().getEndIndexINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableValueRangeTypeRule());
					}
					setWithLastConsumed(
						$current,
						"endIndex",
						lv_endIndex_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6=']'
		{
			newLeafNode(otherlv_6, grammarAccess.getVariableValueRangeTypeAccess().getRightSquareBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleVariableValueType
entryRuleVariableValueType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableValueTypeRule()); }
	iv_ruleVariableValueType=ruleVariableValueType
	{ $current=$iv_ruleVariableValueType.current; }
	EOF;

// Rule VariableValueType
ruleVariableValueType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariableValueTypeAccess().getVariableValueTypeAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableValueTypeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getVariableValueTypeAccess().getVariableVarTypeCrossReference_1_0());
				}
			)
		)
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getVariableValueTypeAccess().getLeftSquareBracketKeyword_2_0());
			}
			(
				(
					(
						lv_indexInt_3_0=RULE_INT
						{
							newLeafNode(lv_indexInt_3_0, grammarAccess.getVariableValueTypeAccess().getIndexIntINTTerminalRuleCall_2_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVariableValueTypeRule());
							}
							setWithLastConsumed(
								$current,
								"indexInt",
								lv_indexInt_3_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
				    |
				(
					otherlv_4='exp'
					{
						newLeafNode(otherlv_4, grammarAccess.getVariableValueTypeAccess().getExpKeyword_2_1_1_0());
					}
					otherlv_5='('
					{
						newLeafNode(otherlv_5, grammarAccess.getVariableValueTypeAccess().getLeftParenthesisKeyword_2_1_1_1());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getVariableValueTypeAccess().getExpTypeExpressionTypeParserRuleCall_2_1_1_2_0());
							}
							lv_expType_6_0=ruleExpressionType
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getVariableValueTypeRule());
								}
								set(
									$current,
									"expType",
									lv_expType_6_0,
									"com.dunkware.xstream.XScript.ExpressionType");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_7=')'
					{
						newLeafNode(otherlv_7, grammarAccess.getVariableValueTypeAccess().getRightParenthesisKeyword_2_1_1_3());
					}
				)
			)
			otherlv_8=']'
			{
				newLeafNode(otherlv_8, grammarAccess.getVariableValueTypeAccess().getRightSquareBracketKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleVariableValueExpType
entryRuleVariableValueExpType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableValueExpTypeRule()); }
	iv_ruleVariableValueExpType=ruleVariableValueExpType
	{ $current=$iv_ruleVariableValueExpType.current; }
	EOF;

// Rule VariableValueExpType
ruleVariableValueExpType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariableValueExpTypeAccess().getVariableValueExpTypeAction_0(),
					$current);
			}
		)
		otherlv_1='exp'
		{
			newLeafNode(otherlv_1, grammarAccess.getVariableValueExpTypeAccess().getExpKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableValueExpTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableValueExpTypeAccess().getExpTypeExpressionTypeParserRuleCall_3_0());
				}
				lv_expType_3_0=ruleExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableValueExpTypeRule());
					}
					set(
						$current,
						"expType",
						lv_expType_3_0,
						"com.dunkware.xstream.XScript.ExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getVariableValueExpTypeAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleSetExpressionType
entryRuleSetExpressionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetExpressionTypeRule()); }
	iv_ruleSetExpressionType=ruleSetExpressionType
	{ $current=$iv_ruleSetExpressionType.current; }
	EOF;

// Rule SetExpressionType
ruleSetExpressionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSetExpressionTypeAccess().getSetExpressionTypeAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getSetExpressionTypeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSetExpressionTypeAccess().getArgsExpressionTypeParserRuleCall_2_0_0());
					}
					lv_args_2_0=ruleExpressionType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSetExpressionTypeRule());
						}
						add(
							$current,
							"args",
							lv_args_2_0,
							"com.dunkware.xstream.XScript.ExpressionType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getSetExpressionTypeAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSetExpressionTypeAccess().getArgsExpressionTypeParserRuleCall_2_1_1_0());
						}
						lv_args_4_0=ruleExpressionType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSetExpressionTypeRule());
							}
							add(
								$current,
								"args",
								lv_args_4_0,
								"com.dunkware.xstream.XScript.ExpressionType");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getSetExpressionTypeAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleSnapshotExpressionType
entryRuleSnapshotExpressionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSnapshotExpressionTypeRule()); }
	iv_ruleSnapshotExpressionType=ruleSnapshotExpressionType
	{ $current=$iv_ruleSnapshotExpressionType.current; }
	EOF;

// Rule SnapshotExpressionType
ruleSnapshotExpressionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSnapshotExpressionTypeAccess().getSnapshotExpressionTypeAction_0(),
					$current);
			}
		)
		otherlv_1='snapshot'
		{
			newLeafNode(otherlv_1, grammarAccess.getSnapshotExpressionTypeAccess().getSnapshotKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getSnapshotExpressionTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSnapshotExpressionTypeAccess().getTargetExpressionTypeParserRuleCall_3_0());
				}
				lv_target_3_0=ruleExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSnapshotExpressionTypeRule());
					}
					set(
						$current,
						"target",
						lv_target_3_0,
						"com.dunkware.xstream.XScript.ExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getSnapshotExpressionTypeAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				lv_interval_5_0=RULE_INT
				{
					newLeafNode(lv_interval_5_0, grammarAccess.getSnapshotExpressionTypeAccess().getIntervalINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSnapshotExpressionTypeRule());
					}
					setWithLastConsumed(
						$current,
						"interval",
						lv_interval_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSnapshotExpressionTypeAccess().getTimeStreamTimeUnitEnumRuleCall_6_0());
				}
				lv_time_6_0=ruleStreamTimeUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSnapshotExpressionTypeRule());
					}
					set(
						$current,
						"time",
						lv_time_6_0,
						"com.dunkware.xstream.XScript.StreamTimeUnit");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRocExpressionType
entryRuleRocExpressionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRocExpressionTypeRule()); }
	iv_ruleRocExpressionType=ruleRocExpressionType
	{ $current=$iv_ruleRocExpressionType.current; }
	EOF;

// Rule RocExpressionType
ruleRocExpressionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRocExpressionTypeAccess().getRocExpressionTypeAction_0(),
					$current);
			}
		)
		otherlv_1='roc'
		{
			newLeafNode(otherlv_1, grammarAccess.getRocExpressionTypeAccess().getRocKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getRocExpressionTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRocExpressionTypeAccess().getTargetExpressionTypeParserRuleCall_3_0());
				}
				lv_target_3_0=ruleExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRocExpressionTypeRule());
					}
					set(
						$current,
						"target",
						lv_target_3_0,
						"com.dunkware.xstream.XScript.ExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getRocExpressionTypeAccess().getCommaKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRocExpressionTypeAccess().getCompareExpressionTypeParserRuleCall_5_0());
				}
				lv_compare_5_0=ruleExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRocExpressionTypeRule());
					}
					set(
						$current,
						"compare",
						lv_compare_5_0,
						"com.dunkware.xstream.XScript.ExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getRocExpressionTypeAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleAvgExpressionType
entryRuleAvgExpressionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAvgExpressionTypeRule()); }
	iv_ruleAvgExpressionType=ruleAvgExpressionType
	{ $current=$iv_ruleAvgExpressionType.current; }
	EOF;

// Rule AvgExpressionType
ruleAvgExpressionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAvgExpressionTypeAccess().getAvgExpressionTypeAction_0(),
					$current);
			}
		)
		otherlv_1='avg'
		{
			newLeafNode(otherlv_1, grammarAccess.getAvgExpressionTypeAccess().getAvgKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getAvgExpressionTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAvgExpressionTypeAccess().getTargetSetExpressionTypeParserRuleCall_3_0());
				}
				lv_target_3_0=ruleSetExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAvgExpressionTypeRule());
					}
					set(
						$current,
						"target",
						lv_target_3_0,
						"com.dunkware.xstream.XScript.SetExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getAvgExpressionTypeAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleSubExpressionType
entryRuleSubExpressionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubExpressionTypeRule()); }
	iv_ruleSubExpressionType=ruleSubExpressionType
	{ $current=$iv_ruleSubExpressionType.current; }
	EOF;

// Rule SubExpressionType
ruleSubExpressionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSubExpressionTypeAccess().getSubExpressionTypeAction_0(),
					$current);
			}
		)
		otherlv_1='sub'
		{
			newLeafNode(otherlv_1, grammarAccess.getSubExpressionTypeAccess().getSubKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getSubExpressionTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubExpressionTypeAccess().getTargetVariableValueTypeParserRuleCall_3_0());
				}
				lv_target_3_0=ruleVariableValueType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubExpressionTypeRule());
					}
					set(
						$current,
						"target",
						lv_target_3_0,
						"com.dunkware.xstream.XScript.VariableValueType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getSubExpressionTypeAccess().getCommaKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubExpressionTypeAccess().getCompareVariableValueTypeParserRuleCall_5_0());
				}
				lv_compare_5_0=ruleVariableValueType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubExpressionTypeRule());
					}
					set(
						$current,
						"compare",
						lv_compare_5_0,
						"com.dunkware.xstream.XScript.VariableValueType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getSubExpressionTypeAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleSessionSignalExpressionType
entryRuleSessionSignalExpressionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSessionSignalExpressionTypeRule()); }
	iv_ruleSessionSignalExpressionType=ruleSessionSignalExpressionType
	{ $current=$iv_ruleSessionSignalExpressionType.current; }
	EOF;

// Rule SessionSignalExpressionType
ruleSessionSignalExpressionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSessionSignalExpressionTypeAccess().getSessionSignalExpressionTypeAction_0(),
					$current);
			}
		)
		otherlv_1='ssc'
		{
			newLeafNode(otherlv_1, grammarAccess.getSessionSignalExpressionTypeAccess().getSscKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getSessionSignalExpressionTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSessionSignalExpressionTypeRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getSessionSignalExpressionTypeAccess().getSignalSignalTypeCrossReference_3_0());
				}
			)
		)
		(
			(
				(
					lv_op_4_1='>'
					{
						newLeafNode(lv_op_4_1, grammarAccess.getSessionSignalExpressionTypeAccess().getOpGreaterThanSignKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSessionSignalExpressionTypeRule());
						}
						setWithLastConsumed($current, "op", lv_op_4_1, null);
					}
					    |
					lv_op_4_2='<'
					{
						newLeafNode(lv_op_4_2, grammarAccess.getSessionSignalExpressionTypeAccess().getOpLessThanSignKeyword_4_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSessionSignalExpressionTypeRule());
						}
						setWithLastConsumed($current, "op", lv_op_4_2, null);
					}
					    |
					lv_op_4_3='='
					{
						newLeafNode(lv_op_4_3, grammarAccess.getSessionSignalExpressionTypeAccess().getOpEqualsSignKeyword_4_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSessionSignalExpressionTypeRule());
						}
						setWithLastConsumed($current, "op", lv_op_4_3, null);
					}
				)
			)
		)
		(
			(
				lv_count_5_0=RULE_INT
				{
					newLeafNode(lv_count_5_0, grammarAccess.getSessionSignalExpressionTypeAccess().getCountINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSessionSignalExpressionTypeRule());
					}
					setWithLastConsumed(
						$current,
						"count",
						lv_count_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6='in last'
		{
			newLeafNode(otherlv_6, grammarAccess.getSessionSignalExpressionTypeAccess().getInLastKeyword_6());
		}
		(
			(
				lv_time_7_0=RULE_INT
				{
					newLeafNode(lv_time_7_0, grammarAccess.getSessionSignalExpressionTypeAccess().getTimeINTTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSessionSignalExpressionTypeRule());
					}
					setWithLastConsumed(
						$current,
						"time",
						lv_time_7_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSessionSignalExpressionTypeAccess().getUnitStreamTimeUnitEnumRuleCall_8_0());
				}
				lv_unit_8_0=ruleStreamTimeUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSessionSignalExpressionTypeRule());
					}
					set(
						$current,
						"unit",
						lv_unit_8_0,
						"com.dunkware.xstream.XScript.StreamTimeUnit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9=')'
		{
			newLeafNode(otherlv_9, grammarAccess.getSessionSignalExpressionTypeAccess().getRightParenthesisKeyword_9());
		}
	)
;

// Entry rule entryRuleSignalType
entryRuleSignalType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignalTypeRule()); }
	iv_ruleSignalType=ruleSignalType
	{ $current=$iv_ruleSignalType.current; }
	EOF;

// Rule SignalType
ruleSignalType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSignalTypeAccess().getSignalTypeAction_0(),
					$current);
			}
		)
		otherlv_1='signal'
		{
			newLeafNode(otherlv_1, grammarAccess.getSignalTypeAccess().getSignalKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getSignalTypeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSignalTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getSignalTypeAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				lv_id_4_0=RULE_INT
				{
					newLeafNode(lv_id_4_0, grammarAccess.getSignalTypeAccess().getIdINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSignalTypeRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getSignalTypeAccess().getRightParenthesisKeyword_5());
		}
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getSignalTypeAccess().getSemicolonKeyword_6());
		}
	)
;

// Entry rule entryRuleXClassType
entryRuleXClassType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXClassTypeRule()); }
	iv_ruleXClassType=ruleXClassType
	{ $current=$iv_ruleXClassType.current; }
	EOF;

// Rule XClassType
ruleXClassType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXClassTypeAccess().getXClassTypeAction_0(),
					$current);
			}
		)
		otherlv_1='class'
		{
			newLeafNode(otherlv_1, grammarAccess.getXClassTypeAccess().getClassKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getXClassTypeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXClassTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getXClassTypeAccess().getLeftParenthesisKeyword_3_0());
			}
			(
				(
					lv_symbolFilter_4_0=RULE_STRING
					{
						newLeafNode(lv_symbolFilter_4_0, grammarAccess.getXClassTypeAccess().getSymbolFilterSTRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXClassTypeRule());
						}
						setWithLastConsumed(
							$current,
							"symbolFilter",
							lv_symbolFilter_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getXClassTypeAccess().getRightParenthesisKeyword_3_2());
			}
		)?
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getXClassTypeAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXClassTypeAccess().getElementsXClassElementTypeParserRuleCall_5_0());
				}
				lv_elements_7_0=ruleXClassElementType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXClassTypeRule());
					}
					add(
						$current,
						"elements",
						lv_elements_7_0,
						"com.dunkware.xstream.XScript.XClassElementType");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getXClassTypeAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleXClassElementType
entryRuleXClassElementType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXClassElementTypeRule()); }
	iv_ruleXClassElementType=ruleXClassElementType
	{ $current=$iv_ruleXClassElementType.current; }
	EOF;

// Rule XClassElementType
ruleXClassElementType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getXClassElementTypeAccess().getXClassCoreElementTypeParserRuleCall());
	}
	this_XClassCoreElementType_0=ruleXClassCoreElementType
	{
		$current = $this_XClassCoreElementType_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleXClassCoreElementType
entryRuleXClassCoreElementType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXClassCoreElementTypeRule()); }
	iv_ruleXClassCoreElementType=ruleXClassCoreElementType
	{ $current=$iv_ruleXClassCoreElementType.current; }
	EOF;

// Rule XClassCoreElementType
ruleXClassCoreElementType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXClassCoreElementTypeAccess().getXFunctionTypeParserRuleCall_0());
		}
		this_XFunctionType_0=ruleXFunctionType
		{
			$current = $this_XFunctionType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXClassCoreElementTypeAccess().getXVarTypeParserRuleCall_1());
		}
		this_XVarType_1=ruleXVarType
		{
			$current = $this_XVarType_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleXVarType
entryRuleXVarType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXVarTypeRule()); }
	iv_ruleXVarType=ruleXVarType
	{ $current=$iv_ruleXVarType.current; }
	EOF;

// Rule XVarType
ruleXVarType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXVarTypeAccess().getXVarTypeAction_0(),
					$current);
			}
		)
		otherlv_1='var'
		{
			newLeafNode(otherlv_1, grammarAccess.getXVarTypeAccess().getVarKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getXVarTypeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXVarTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getXVarTypeAccess().getEqualsSignKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getXVarTypeAccess().getExpXExpressionTypeParserRuleCall_3_1_0());
					}
					lv_exp_4_0=ruleXExpressionType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXVarTypeRule());
						}
						set(
							$current,
							"exp",
							lv_exp_4_0,
							"com.dunkware.xstream.XScript.XExpressionType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getXVarTypeAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleXFunctionType
entryRuleXFunctionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXFunctionTypeRule()); }
	iv_ruleXFunctionType=ruleXFunctionType
	{ $current=$iv_ruleXFunctionType.current; }
	EOF;

// Rule XFunctionType
ruleXFunctionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXFunctionTypeAccess().getXFunctionTypeAction_0(),
					$current);
			}
		)
		otherlv_1='function'
		{
			newLeafNode(otherlv_1, grammarAccess.getXFunctionTypeAccess().getFunctionKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getXFunctionTypeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXFunctionTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getXFunctionTypeAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXFunctionTypeRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getXFunctionTypeAccess().getParamsXVarTypeCrossReference_4_0());
				}
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getXFunctionTypeAccess().getRightParenthesisKeyword_5());
		}
		otherlv_6='{'
		{
			newLeafNode(otherlv_6, grammarAccess.getXFunctionTypeAccess().getLeftCurlyBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXFunctionTypeAccess().getElementsXClassFunctionElementTypeParserRuleCall_7_0());
				}
				lv_elements_7_0=ruleXClassFunctionElementType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXFunctionTypeRule());
					}
					add(
						$current,
						"elements",
						lv_elements_7_0,
						"com.dunkware.xstream.XScript.XClassFunctionElementType");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getXFunctionTypeAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleXClassFunctionElementType
entryRuleXClassFunctionElementType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXClassFunctionElementTypeRule()); }
	iv_ruleXClassFunctionElementType=ruleXClassFunctionElementType
	{ $current=$iv_ruleXClassFunctionElementType.current; }
	EOF;

// Rule XClassFunctionElementType
ruleXClassFunctionElementType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getXClassFunctionElementTypeAccess().getXFunctionCoreElementTypeParserRuleCall());
	}
	this_XFunctionCoreElementType_0=ruleXFunctionCoreElementType
	{
		$current = $this_XFunctionCoreElementType_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleXFunctionCoreElementType
entryRuleXFunctionCoreElementType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXFunctionCoreElementTypeRule()); }
	iv_ruleXFunctionCoreElementType=ruleXFunctionCoreElementType
	{ $current=$iv_ruleXFunctionCoreElementType.current; }
	EOF;

// Rule XFunctionCoreElementType
ruleXFunctionCoreElementType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXFunctionCoreElementTypeAccess().getXFunctionReturnTypeParserRuleCall_0());
		}
		this_XFunctionReturnType_0=ruleXFunctionReturnType
		{
			$current = $this_XFunctionReturnType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXFunctionCoreElementTypeAccess().getXVarTypeParserRuleCall_1());
		}
		this_XVarType_1=ruleXVarType
		{
			$current = $this_XVarType_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXFunctionCoreElementTypeAccess().getXIfStatementTypeParserRuleCall_2());
		}
		this_XIfStatementType_2=ruleXIfStatementType
		{
			$current = $this_XIfStatementType_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXFunctionCoreElementTypeAccess().getXSignalListenerTypeParserRuleCall_3());
		}
		this_XSignalListenerType_3=ruleXSignalListenerType
		{
			$current = $this_XSignalListenerType_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXFunctionCoreElementTypeAccess().getXStreamVarListenerTypeParserRuleCall_4());
		}
		this_XStreamVarListenerType_4=ruleXStreamVarListenerType
		{
			$current = $this_XStreamVarListenerType_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXFunctionCoreElementTypeAccess().getXFunctionStartTypeParserRuleCall_5());
		}
		this_XFunctionStartType_5=ruleXFunctionStartType
		{
			$current = $this_XFunctionStartType_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXFunctionCoreElementTypeAccess().getXFunctionCallTypeParserRuleCall_6());
		}
		this_XFunctionCallType_6=ruleXFunctionCallType
		{
			$current = $this_XFunctionCallType_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXFunctionCoreElementTypeAccess().getXVarSetterTypeParserRuleCall_7());
		}
		this_XVarSetterType_7=ruleXVarSetterType
		{
			$current = $this_XVarSetterType_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXFunctionCoreElementTypeAccess().getXSignalTriggerTypeParserRuleCall_8());
		}
		this_XSignalTriggerType_8=ruleXSignalTriggerType
		{
			$current = $this_XSignalTriggerType_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXFunctionCoreElementTypeAccess().getXVarDecrementTypeParserRuleCall_9());
		}
		this_XVarDecrementType_9=ruleXVarDecrementType
		{
			$current = $this_XVarDecrementType_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXFunctionCoreElementTypeAccess().getXSetVarTypeParserRuleCall_10());
		}
		this_XSetVarType_10=ruleXSetVarType
		{
			$current = $this_XSetVarType_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXFunctionCoreElementTypeAccess().getXVarIncrementTypeParserRuleCall_11());
		}
		this_XVarIncrementType_11=ruleXVarIncrementType
		{
			$current = $this_XVarIncrementType_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXFunctionCoreElementTypeAccess().getXDebugTypeParserRuleCall_12());
		}
		this_XDebugType_12=ruleXDebugType
		{
			$current = $this_XDebugType_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXFunctionCoreElementTypeAccess().getXSleepTypeParserRuleCall_13());
		}
		this_XSleepType_13=ruleXSleepType
		{
			$current = $this_XSleepType_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXFunctionCoreElementTypeAccess().getXWhileTypeParserRuleCall_14());
		}
		this_XWhileType_14=ruleXWhileType
		{
			$current = $this_XWhileType_14.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleXFunctionReturnType
entryRuleXFunctionReturnType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXFunctionReturnTypeRule()); }
	iv_ruleXFunctionReturnType=ruleXFunctionReturnType
	{ $current=$iv_ruleXFunctionReturnType.current; }
	EOF;

// Rule XFunctionReturnType
ruleXFunctionReturnType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXFunctionReturnTypeAccess().getXFunctionReturnTypeAction_0(),
					$current);
			}
		)
		otherlv_1='return'
		{
			newLeafNode(otherlv_1, grammarAccess.getXFunctionReturnTypeAccess().getReturnKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXFunctionReturnTypeAccess().getReturnValueXExpressionTypeParserRuleCall_2_0());
				}
				lv_returnValue_2_0=ruleXExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXFunctionReturnTypeRule());
					}
					set(
						$current,
						"returnValue",
						lv_returnValue_2_0,
						"com.dunkware.xstream.XScript.XExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getXFunctionReturnTypeAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleXFunctionCallType
entryRuleXFunctionCallType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXFunctionCallTypeRule()); }
	iv_ruleXFunctionCallType=ruleXFunctionCallType
	{ $current=$iv_ruleXFunctionCallType.current; }
	EOF;

// Rule XFunctionCallType
ruleXFunctionCallType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXFunctionCallTypeAccess().getXFunctionCallTypeAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXFunctionCallTypeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getXFunctionCallTypeAccess().getFunctionXFunctionTypeCrossReference_1_0());
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXFunctionCallTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_params_3_0=RULE_STRING
				{
					newLeafNode(lv_params_3_0, grammarAccess.getXFunctionCallTypeAccess().getParamsSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXFunctionCallTypeRule());
					}
					setWithLastConsumed(
						$current,
						"params",
						lv_params_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getXFunctionCallTypeAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getXFunctionCallTypeAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleXSignalListenerType
entryRuleXSignalListenerType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXSignalListenerTypeRule()); }
	iv_ruleXSignalListenerType=ruleXSignalListenerType
	{ $current=$iv_ruleXSignalListenerType.current; }
	EOF;

// Rule XSignalListenerType
ruleXSignalListenerType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXSignalListenerTypeAccess().getXSignalListenerTypeAction_0(),
					$current);
			}
		)
		otherlv_1='signalListener'
		{
			newLeafNode(otherlv_1, grammarAccess.getXSignalListenerTypeAccess().getSignalListenerKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXSignalListenerTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXSignalListenerTypeRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getXSignalListenerTypeAccess().getSignalTypeSignalTypeCrossReference_3_0());
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getXSignalListenerTypeAccess().getCommaKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXSignalListenerTypeRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getXSignalListenerTypeAccess().getFunctionXFunctionTypeCrossReference_5_0());
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getXSignalListenerTypeAccess().getRightParenthesisKeyword_6());
		}
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getXSignalListenerTypeAccess().getSemicolonKeyword_7());
		}
	)
;

// Entry rule entryRuleXStreamVarListenerType
entryRuleXStreamVarListenerType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXStreamVarListenerTypeRule()); }
	iv_ruleXStreamVarListenerType=ruleXStreamVarListenerType
	{ $current=$iv_ruleXStreamVarListenerType.current; }
	EOF;

// Rule XStreamVarListenerType
ruleXStreamVarListenerType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXStreamVarListenerTypeAccess().getXStreamVarListenerTypeAction_0(),
					$current);
			}
		)
		otherlv_1='streamVarListener'
		{
			newLeafNode(otherlv_1, grammarAccess.getXStreamVarListenerTypeAccess().getStreamVarListenerKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXStreamVarListenerTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXStreamVarListenerTypeRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getXStreamVarListenerTypeAccess().getColumnVarTypeCrossReference_3_0());
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getXStreamVarListenerTypeAccess().getCommaKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXStreamVarListenerTypeRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getXStreamVarListenerTypeAccess().getFunctionXFunctionTypeCrossReference_5_0());
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getXStreamVarListenerTypeAccess().getRightParenthesisKeyword_6());
		}
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getXStreamVarListenerTypeAccess().getSemicolonKeyword_7());
		}
	)
;

// Entry rule entryRuleXSignalTriggerType
entryRuleXSignalTriggerType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXSignalTriggerTypeRule()); }
	iv_ruleXSignalTriggerType=ruleXSignalTriggerType
	{ $current=$iv_ruleXSignalTriggerType.current; }
	EOF;

// Rule XSignalTriggerType
ruleXSignalTriggerType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXSignalTriggerTypeAccess().getXSignalTriggerTypeAction_0(),
					$current);
			}
		)
		otherlv_1='signal'
		{
			newLeafNode(otherlv_1, grammarAccess.getXSignalTriggerTypeAccess().getSignalKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXSignalTriggerTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXSignalTriggerTypeRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getXSignalTriggerTypeAccess().getSignalSignalTypeCrossReference_3_0());
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getXSignalTriggerTypeAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getXSignalTriggerTypeAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleXFunctionStartType
entryRuleXFunctionStartType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXFunctionStartTypeRule()); }
	iv_ruleXFunctionStartType=ruleXFunctionStartType
	{ $current=$iv_ruleXFunctionStartType.current; }
	EOF;

// Rule XFunctionStartType
ruleXFunctionStartType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXFunctionStartTypeAccess().getXFunctionStartTypeAction_0(),
					$current);
			}
		)
		otherlv_1='functionRunner'
		{
			newLeafNode(otherlv_1, grammarAccess.getXFunctionStartTypeAccess().getFunctionRunnerKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXFunctionStartTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXFunctionStartTypeRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getXFunctionStartTypeAccess().getFunctionXFunctionTypeCrossReference_3_0());
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getXFunctionStartTypeAccess().getCommaKeyword_4());
		}
		(
			(
				lv_interval_5_0=RULE_INT
				{
					newLeafNode(lv_interval_5_0, grammarAccess.getXFunctionStartTypeAccess().getIntervalINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXFunctionStartTypeRule());
					}
					setWithLastConsumed(
						$current,
						"interval",
						lv_interval_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getXFunctionStartTypeAccess().getTimeStreamTimeUnitEnumRuleCall_6_0());
				}
				lv_time_6_0=ruleStreamTimeUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXFunctionStartTypeRule());
					}
					set(
						$current,
						"time",
						lv_time_6_0,
						"com.dunkware.xstream.XScript.StreamTimeUnit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getXFunctionStartTypeAccess().getRightParenthesisKeyword_7());
		}
		otherlv_8=';'
		{
			newLeafNode(otherlv_8, grammarAccess.getXFunctionStartTypeAccess().getSemicolonKeyword_8());
		}
	)
;

// Entry rule entryRuleXVarSetterType
entryRuleXVarSetterType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXVarSetterTypeRule()); }
	iv_ruleXVarSetterType=ruleXVarSetterType
	{ $current=$iv_ruleXVarSetterType.current; }
	EOF;

// Rule XVarSetterType
ruleXVarSetterType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXVarSetterTypeAccess().getXVarSetterTypeAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXVarSetterTypeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getXVarSetterTypeAccess().getVarXVarTypeCrossReference_1_0());
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getXVarSetterTypeAccess().getEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXVarSetterTypeAccess().getExpXExpressionTypeParserRuleCall_3_0());
				}
				lv_exp_3_0=ruleXExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXVarSetterTypeRule());
					}
					set(
						$current,
						"exp",
						lv_exp_3_0,
						"com.dunkware.xstream.XScript.XExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getXVarSetterTypeAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleXVarIncrementType
entryRuleXVarIncrementType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXVarIncrementTypeRule()); }
	iv_ruleXVarIncrementType=ruleXVarIncrementType
	{ $current=$iv_ruleXVarIncrementType.current; }
	EOF;

// Rule XVarIncrementType
ruleXVarIncrementType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXVarIncrementTypeAccess().getXVarIncrementTypeAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXVarIncrementTypeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getXVarIncrementTypeAccess().getVarXVarTypeCrossReference_1_0());
				}
			)
		)
		otherlv_2='++'
		{
			newLeafNode(otherlv_2, grammarAccess.getXVarIncrementTypeAccess().getPlusSignPlusSignKeyword_2());
		}
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getXVarIncrementTypeAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleXVarDecrementType
entryRuleXVarDecrementType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXVarDecrementTypeRule()); }
	iv_ruleXVarDecrementType=ruleXVarDecrementType
	{ $current=$iv_ruleXVarDecrementType.current; }
	EOF;

// Rule XVarDecrementType
ruleXVarDecrementType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXVarDecrementTypeAccess().getXVarDecrementTypeAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXVarDecrementTypeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getXVarDecrementTypeAccess().getVarXVarTypeCrossReference_1_0());
				}
			)
		)
		otherlv_2='--'
		{
			newLeafNode(otherlv_2, grammarAccess.getXVarDecrementTypeAccess().getHyphenMinusHyphenMinusKeyword_2());
		}
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getXVarDecrementTypeAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleXSetVarType
entryRuleXSetVarType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXSetVarTypeRule()); }
	iv_ruleXSetVarType=ruleXSetVarType
	{ $current=$iv_ruleXSetVarType.current; }
	EOF;

// Rule XSetVarType
ruleXSetVarType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXSetVarTypeAccess().getXSetVarTypeAction_0(),
					$current);
			}
		)
		otherlv_1='setStreamVar'
		{
			newLeafNode(otherlv_1, grammarAccess.getXSetVarTypeAccess().getSetStreamVarKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXSetVarTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXSetVarTypeRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getXSetVarTypeAccess().getVarVarTypeCrossReference_3_0());
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getXSetVarTypeAccess().getCommaKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXSetVarTypeAccess().getValueXExpressionTypeParserRuleCall_5_0());
				}
				lv_value_5_0=ruleXExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXSetVarTypeRule());
					}
					set(
						$current,
						"value",
						lv_value_5_0,
						"com.dunkware.xstream.XScript.XExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getXSetVarTypeAccess().getRightParenthesisKeyword_6());
		}
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getXSetVarTypeAccess().getSemicolonKeyword_7());
		}
	)
;

// Entry rule entryRuleXDebugType
entryRuleXDebugType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXDebugTypeRule()); }
	iv_ruleXDebugType=ruleXDebugType
	{ $current=$iv_ruleXDebugType.current; }
	EOF;

// Rule XDebugType
ruleXDebugType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXDebugTypeAccess().getXDebugTypeAction_0(),
					$current);
			}
		)
		otherlv_1='debug'
		{
			newLeafNode(otherlv_1, grammarAccess.getXDebugTypeAccess().getDebugKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXDebugTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getXDebugTypeAccess().getArgsXExpressionTypeParserRuleCall_3_0_0());
					}
					lv_args_3_0=ruleXExpressionType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXDebugTypeRule());
						}
						add(
							$current,
							"args",
							lv_args_3_0,
							"com.dunkware.xstream.XScript.XExpressionType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getXDebugTypeAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getXDebugTypeAccess().getArgsXExpressionTypeParserRuleCall_3_1_1_0());
						}
						lv_args_5_0=ruleXExpressionType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getXDebugTypeRule());
							}
							add(
								$current,
								"args",
								lv_args_5_0,
								"com.dunkware.xstream.XScript.XExpressionType");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getXDebugTypeAccess().getRightParenthesisKeyword_4());
		}
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getXDebugTypeAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleXIfStatementType
entryRuleXIfStatementType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXIfStatementTypeRule()); }
	iv_ruleXIfStatementType=ruleXIfStatementType
	{ $current=$iv_ruleXIfStatementType.current; }
	EOF;

// Rule XIfStatementType
ruleXIfStatementType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXIfStatementTypeAccess().getXIfStatementTypeAction_0(),
					$current);
			}
		)
		otherlv_1='if'
		{
			newLeafNode(otherlv_1, grammarAccess.getXIfStatementTypeAccess().getIfKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXIfStatementTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXIfStatementTypeAccess().getExpressionXExpressionTypeParserRuleCall_3_0());
				}
				lv_expression_3_0=ruleXExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXIfStatementTypeRule());
					}
					set(
						$current,
						"expression",
						lv_expression_3_0,
						"com.dunkware.xstream.XScript.XExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getXIfStatementTypeAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getXIfStatementTypeAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXIfStatementTypeAccess().getElementsXClassFunctionElementTypeParserRuleCall_6_0());
				}
				lv_elements_6_0=ruleXClassFunctionElementType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXIfStatementTypeRule());
					}
					add(
						$current,
						"elements",
						lv_elements_6_0,
						"com.dunkware.xstream.XScript.XClassFunctionElementType");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getXIfStatementTypeAccess().getRightCurlyBracketKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXIfStatementTypeAccess().getElseIfElementsXElseIfStatementTypeParserRuleCall_8_0());
				}
				lv_elseIfElements_8_0=ruleXElseIfStatementType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXIfStatementTypeRule());
					}
					add(
						$current,
						"elseIfElements",
						lv_elseIfElements_8_0,
						"com.dunkware.xstream.XScript.XElseIfStatementType");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getXIfStatementTypeAccess().getElseElementXElseStatementTypeParserRuleCall_9_0());
				}
				lv_elseElement_9_0=ruleXElseStatementType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXIfStatementTypeRule());
					}
					set(
						$current,
						"elseElement",
						lv_elseElement_9_0,
						"com.dunkware.xstream.XScript.XElseStatementType");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleXElseIfStatementType
entryRuleXElseIfStatementType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXElseIfStatementTypeRule()); }
	iv_ruleXElseIfStatementType=ruleXElseIfStatementType
	{ $current=$iv_ruleXElseIfStatementType.current; }
	EOF;

// Rule XElseIfStatementType
ruleXElseIfStatementType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXElseIfStatementTypeAccess().getXElseIfStatementTypeAction_0(),
					$current);
			}
		)
		(
			otherlv_1='elseif'
			{
				newLeafNode(otherlv_1, grammarAccess.getXElseIfStatementTypeAccess().getElseifKeyword_1_0());
			}
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getXElseIfStatementTypeAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getXElseIfStatementTypeAccess().getExpressionXExpressionTypeParserRuleCall_1_2_0());
					}
					lv_expression_3_0=ruleXExpressionType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXElseIfStatementTypeRule());
						}
						set(
							$current,
							"expression",
							lv_expression_3_0,
							"com.dunkware.xstream.XScript.XExpressionType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getXElseIfStatementTypeAccess().getRightParenthesisKeyword_1_3());
			}
			otherlv_5='{'
			{
				newLeafNode(otherlv_5, grammarAccess.getXElseIfStatementTypeAccess().getLeftCurlyBracketKeyword_1_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getXElseIfStatementTypeAccess().getElementsXClassFunctionElementTypeParserRuleCall_1_5_0());
					}
					lv_elements_6_0=ruleXClassFunctionElementType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXElseIfStatementTypeRule());
						}
						add(
							$current,
							"elements",
							lv_elements_6_0,
							"com.dunkware.xstream.XScript.XClassFunctionElementType");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_7='}'
			{
				newLeafNode(otherlv_7, grammarAccess.getXElseIfStatementTypeAccess().getRightCurlyBracketKeyword_1_6());
			}
		)
	)
;

// Entry rule entryRuleXElseStatementType
entryRuleXElseStatementType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXElseStatementTypeRule()); }
	iv_ruleXElseStatementType=ruleXElseStatementType
	{ $current=$iv_ruleXElseStatementType.current; }
	EOF;

// Rule XElseStatementType
ruleXElseStatementType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXElseStatementTypeAccess().getXElseStatementTypeAction_0(),
					$current);
			}
		)
		otherlv_1='else'
		{
			newLeafNode(otherlv_1, grammarAccess.getXElseStatementTypeAccess().getElseKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getXElseStatementTypeAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXElseStatementTypeAccess().getElementsXClassFunctionElementTypeParserRuleCall_3_0());
				}
				lv_elements_3_0=ruleXClassFunctionElementType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXElseStatementTypeRule());
					}
					add(
						$current,
						"elements",
						lv_elements_3_0,
						"com.dunkware.xstream.XScript.XClassFunctionElementType");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getXElseStatementTypeAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleXWhileType
entryRuleXWhileType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXWhileTypeRule()); }
	iv_ruleXWhileType=ruleXWhileType
	{ $current=$iv_ruleXWhileType.current; }
	EOF;

// Rule XWhileType
ruleXWhileType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXWhileTypeAccess().getXWhileTypeAction_0(),
					$current);
			}
		)
		otherlv_1='whilst'
		{
			newLeafNode(otherlv_1, grammarAccess.getXWhileTypeAccess().getWhilstKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXWhileTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXWhileTypeAccess().getExpressionXExpressionTypeParserRuleCall_3_0());
				}
				lv_expression_3_0=ruleXExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXWhileTypeRule());
					}
					set(
						$current,
						"expression",
						lv_expression_3_0,
						"com.dunkware.xstream.XScript.XExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getXWhileTypeAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getXWhileTypeAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXWhileTypeAccess().getElementsXWhileElementTypeParserRuleCall_6_0());
				}
				lv_elements_6_0=ruleXWhileElementType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXWhileTypeRule());
					}
					add(
						$current,
						"elements",
						lv_elements_6_0,
						"com.dunkware.xstream.XScript.XWhileElementType");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getXWhileTypeAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleXWhileElementType
entryRuleXWhileElementType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXWhileElementTypeRule()); }
	iv_ruleXWhileElementType=ruleXWhileElementType
	{ $current=$iv_ruleXWhileElementType.current; }
	EOF;

// Rule XWhileElementType
ruleXWhileElementType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXWhileElementTypeAccess().getXWhileBreakTypeParserRuleCall_0());
		}
		this_XWhileBreakType_0=ruleXWhileBreakType
		{
			$current = $this_XWhileBreakType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXWhileElementTypeAccess().getXClassFunctionElementTypeParserRuleCall_1());
		}
		this_XClassFunctionElementType_1=ruleXClassFunctionElementType
		{
			$current = $this_XClassFunctionElementType_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleXWhileBreakType
entryRuleXWhileBreakType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXWhileBreakTypeRule()); }
	iv_ruleXWhileBreakType=ruleXWhileBreakType
	{ $current=$iv_ruleXWhileBreakType.current; }
	EOF;

// Rule XWhileBreakType
ruleXWhileBreakType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXWhileBreakTypeAccess().getXWhileBreakTypeAction_0(),
					$current);
			}
		)
		otherlv_1='break'
		{
			newLeafNode(otherlv_1, grammarAccess.getXWhileBreakTypeAccess().getBreakKeyword_1());
		}
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getXWhileBreakTypeAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleXSleepType
entryRuleXSleepType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXSleepTypeRule()); }
	iv_ruleXSleepType=ruleXSleepType
	{ $current=$iv_ruleXSleepType.current; }
	EOF;

// Rule XSleepType
ruleXSleepType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXSleepTypeAccess().getXSleepTypeAction_0(),
					$current);
			}
		)
		otherlv_1='sleep'
		{
			newLeafNode(otherlv_1, grammarAccess.getXSleepTypeAccess().getSleepKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXSleepTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_interval_3_0=RULE_INT
				{
					newLeafNode(lv_interval_3_0, grammarAccess.getXSleepTypeAccess().getIntervalINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXSleepTypeRule());
					}
					setWithLastConsumed(
						$current,
						"interval",
						lv_interval_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getXSleepTypeAccess().getUnitStreamTimeUnitEnumRuleCall_4_0());
				}
				lv_unit_4_0=ruleStreamTimeUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXSleepTypeRule());
					}
					set(
						$current,
						"unit",
						lv_unit_4_0,
						"com.dunkware.xstream.XScript.StreamTimeUnit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getXSleepTypeAccess().getRightParenthesisKeyword_5());
		}
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getXSleepTypeAccess().getSemicolonKeyword_6());
		}
	)
;

// Entry rule entryRuleXExpressionType
entryRuleXExpressionType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXExpressionTypeRule()); }
	iv_ruleXExpressionType=ruleXExpressionType
	{ $current=$iv_ruleXExpressionType.current; }
	EOF;

// Rule XExpressionType
ruleXExpressionType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getXExpressionTypeAccess().getXOrTypeParserRuleCall());
	}
	this_XOrType_0=ruleXOrType
	{
		$current = $this_XOrType_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleXOrType
entryRuleXOrType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXOrTypeRule()); }
	iv_ruleXOrType=ruleXOrType
	{ $current=$iv_ruleXOrType.current; }
	EOF;

// Rule XOrType
ruleXOrType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXOrTypeAccess().getXAndTypeParserRuleCall_0());
		}
		this_XAndType_0=ruleXAndType
		{
			$current = $this_XAndType_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXOrTypeAccess().getXOrTypeLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='||'
			{
				newLeafNode(otherlv_2, grammarAccess.getXOrTypeAccess().getVerticalLineVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getXOrTypeAccess().getRightXAndTypeParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleXAndType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXOrTypeRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.dunkware.xstream.XScript.XAndType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXAndType
entryRuleXAndType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXAndTypeRule()); }
	iv_ruleXAndType=ruleXAndType
	{ $current=$iv_ruleXAndType.current; }
	EOF;

// Rule XAndType
ruleXAndType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXAndTypeAccess().getXEqualityTypeParserRuleCall_0());
		}
		this_XEqualityType_0=ruleXEqualityType
		{
			$current = $this_XEqualityType_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXAndTypeAccess().getXAndTypeLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='&&'
			{
				newLeafNode(otherlv_2, grammarAccess.getXAndTypeAccess().getAmpersandAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getXAndTypeAccess().getRightXEqualityTypeParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleXEqualityType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXAndTypeRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.dunkware.xstream.XScript.XEqualityType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXEqualityType
entryRuleXEqualityType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXEqualityTypeRule()); }
	iv_ruleXEqualityType=ruleXEqualityType
	{ $current=$iv_ruleXEqualityType.current; }
	EOF;

// Rule XEqualityType
ruleXEqualityType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXEqualityTypeAccess().getXComparisonTypeParserRuleCall_0());
		}
		this_XComparisonType_0=ruleXComparisonType
		{
			$current = $this_XComparisonType_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXEqualityTypeAccess().getXEqualityTypeLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='=='
						{
							newLeafNode(lv_op_2_1, grammarAccess.getXEqualityTypeAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXEqualityTypeRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='!='
						{
							newLeafNode(lv_op_2_2, grammarAccess.getXEqualityTypeAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXEqualityTypeRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXEqualityTypeAccess().getRightXComparisonTypeParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleXComparisonType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXEqualityTypeRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.dunkware.xstream.XScript.XComparisonType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXComparisonType
entryRuleXComparisonType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXComparisonTypeRule()); }
	iv_ruleXComparisonType=ruleXComparisonType
	{ $current=$iv_ruleXComparisonType.current; }
	EOF;

// Rule XComparisonType
ruleXComparisonType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXComparisonTypeAccess().getXPlusOrMinusTypeParserRuleCall_0());
		}
		this_XPlusOrMinusType_0=ruleXPlusOrMinusType
		{
			$current = $this_XPlusOrMinusType_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXComparisonTypeAccess().getXComparisonTypeLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='>='
						{
							newLeafNode(lv_op_2_1, grammarAccess.getXComparisonTypeAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXComparisonTypeRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='<='
						{
							newLeafNode(lv_op_2_2, grammarAccess.getXComparisonTypeAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXComparisonTypeRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
						    |
						lv_op_2_3='>'
						{
							newLeafNode(lv_op_2_3, grammarAccess.getXComparisonTypeAccess().getOpGreaterThanSignKeyword_1_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXComparisonTypeRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_3, null);
						}
						    |
						lv_op_2_4='<'
						{
							newLeafNode(lv_op_2_4, grammarAccess.getXComparisonTypeAccess().getOpLessThanSignKeyword_1_1_0_3());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXComparisonTypeRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_4, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXComparisonTypeAccess().getRightXPlusOrMinusTypeParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleXPlusOrMinusType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXComparisonTypeRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.dunkware.xstream.XScript.XPlusOrMinusType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXPlusOrMinusType
entryRuleXPlusOrMinusType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXPlusOrMinusTypeRule()); }
	iv_ruleXPlusOrMinusType=ruleXPlusOrMinusType
	{ $current=$iv_ruleXPlusOrMinusType.current; }
	EOF;

// Rule XPlusOrMinusType
ruleXPlusOrMinusType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXPlusOrMinusTypeAccess().getXMulOrDivTypeParserRuleCall_0());
		}
		this_XMulOrDivType_0=ruleXMulOrDivType
		{
			$current = $this_XMulOrDivType_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getXPlusOrMinusTypeAccess().getXPlusTypeLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='+'
					{
						newLeafNode(otherlv_2, grammarAccess.getXPlusOrMinusTypeAccess().getPlusSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getXPlusOrMinusTypeAccess().getXMinusTypeLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='-'
					{
						newLeafNode(otherlv_4, grammarAccess.getXPlusOrMinusTypeAccess().getHyphenMinusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXPlusOrMinusTypeAccess().getRightXMulOrDivTypeParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleXMulOrDivType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXPlusOrMinusTypeRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"com.dunkware.xstream.XScript.XMulOrDivType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXMulOrDivType
entryRuleXMulOrDivType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXMulOrDivTypeRule()); }
	iv_ruleXMulOrDivType=ruleXMulOrDivType
	{ $current=$iv_ruleXMulOrDivType.current; }
	EOF;

// Rule XMulOrDivType
ruleXMulOrDivType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXMulOrDivTypeAccess().getXPrimaryTypeParserRuleCall_0());
		}
		this_XPrimaryType_0=ruleXPrimaryType
		{
			$current = $this_XPrimaryType_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXMulOrDivTypeAccess().getXMulOrDivTypeLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_op_2_1='*'
						{
							newLeafNode(lv_op_2_1, grammarAccess.getXMulOrDivTypeAccess().getOpAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXMulOrDivTypeRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_1, null);
						}
						    |
						lv_op_2_2='/'
						{
							newLeafNode(lv_op_2_2, grammarAccess.getXMulOrDivTypeAccess().getOpSolidusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXMulOrDivTypeRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXMulOrDivTypeAccess().getRightXPrimaryTypeParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleXPrimaryType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXMulOrDivTypeRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.dunkware.xstream.XScript.XPrimaryType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXPrimaryType
entryRuleXPrimaryType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXPrimaryTypeRule()); }
	iv_ruleXPrimaryType=ruleXPrimaryType
	{ $current=$iv_ruleXPrimaryType.current; }
	EOF;

// Rule XPrimaryType
ruleXPrimaryType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getXPrimaryTypeAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getXPrimaryTypeAccess().getXExpressionTypeParserRuleCall_0_1());
			}
			this_XExpressionType_1=ruleXExpressionType
			{
				$current = $this_XExpressionType_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getXPrimaryTypeAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getXPrimaryTypeAccess().getXNotTypeAction_1_0(),
						$current);
				}
			)
			otherlv_4='!'
			{
				newLeafNode(otherlv_4, grammarAccess.getXPrimaryTypeAccess().getExclamationMarkKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getXPrimaryTypeAccess().getExpressionXPrimaryTypeParserRuleCall_1_2_0());
					}
					lv_expression_5_0=ruleXPrimaryType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXPrimaryTypeRule());
						}
						set(
							$current,
							"expression",
							lv_expression_5_0,
							"com.dunkware.xstream.XScript.XPrimaryType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getXPrimaryTypeAccess().getXAtomicTypeParserRuleCall_2());
		}
		this_XAtomicType_6=ruleXAtomicType
		{
			$current = $this_XAtomicType_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleXAtomicType
entryRuleXAtomicType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXAtomicTypeRule()); }
	iv_ruleXAtomicType=ruleXAtomicType
	{ $current=$iv_ruleXAtomicType.current; }
	EOF;

// Rule XAtomicType
ruleXAtomicType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getXAtomicTypeAccess().getXAtomicBaseTypeParserRuleCall());
	}
	this_XAtomicBaseType_0=ruleXAtomicBaseType
	{
		$current = $this_XAtomicBaseType_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleXAtomicBaseType
entryRuleXAtomicBaseType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXAtomicBaseTypeRule()); }
	iv_ruleXAtomicBaseType=ruleXAtomicBaseType
	{ $current=$iv_ruleXAtomicBaseType.current; }
	EOF;

// Rule XAtomicBaseType
ruleXAtomicBaseType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getXAtomicBaseTypeAccess().getXDoubleConstantTypeAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_value_1_0=RULE_DOUBLE
					{
						newLeafNode(lv_value_1_0, grammarAccess.getXAtomicBaseTypeAccess().getValueDOUBLETerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXAtomicBaseTypeRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_0,
							"com.dunkware.xstream.XScript.DOUBLE");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getXAtomicBaseTypeAccess().getXIntConstantTypeAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_3_0=RULE_INT
					{
						newLeafNode(lv_value_3_0, grammarAccess.getXAtomicBaseTypeAccess().getValueINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXAtomicBaseTypeRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getXAtomicBaseTypeAccess().getXStringConstantTypeAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_value_5_0=RULE_STRING
					{
						newLeafNode(lv_value_5_0, grammarAccess.getXAtomicBaseTypeAccess().getValueSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXAtomicBaseTypeRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_5_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getXAtomicBaseTypeAccess().getXBoolConstantTypeAction_3_0(),
						$current);
				}
			)
			(
				(
					(
						lv_value_7_1='true'
						{
							newLeafNode(lv_value_7_1, grammarAccess.getXAtomicBaseTypeAccess().getValueTrueKeyword_3_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXAtomicBaseTypeRule());
							}
							setWithLastConsumed($current, "value", lv_value_7_1, null);
						}
						    |
						lv_value_7_2='false'
						{
							newLeafNode(lv_value_7_2, grammarAccess.getXAtomicBaseTypeAccess().getValueFalseKeyword_3_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXAtomicBaseTypeRule());
							}
							setWithLastConsumed($current, "value", lv_value_7_2, null);
						}
					)
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getXAtomicBaseTypeAccess().getXPercentChangeExpTypeParserRuleCall_4());
		}
		this_XPercentChangeExpType_8=ruleXPercentChangeExpType
		{
			$current = $this_XPercentChangeExpType_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXAtomicBaseTypeAccess().getXSubExpTypeParserRuleCall_5());
		}
		this_XSubExpType_9=ruleXSubExpType
		{
			$current = $this_XSubExpType_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXAtomicBaseTypeAccess().getXVarExpTypeParserRuleCall_6());
		}
		this_XVarExpType_10=ruleXVarExpType
		{
			$current = $this_XVarExpType_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXAtomicBaseTypeAccess().getXStreamWrapperExpTypeParserRuleCall_7());
		}
		this_XStreamWrapperExpType_11=ruleXStreamWrapperExpType
		{
			$current = $this_XStreamWrapperExpType_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXAtomicBaseTypeAccess().getXStreamVarValueExpTypeParserRuleCall_8());
		}
		this_XStreamVarValueExpType_12=ruleXStreamVarValueExpType
		{
			$current = $this_XStreamVarValueExpType_12.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXAtomicBaseTypeAccess().getXFunctionCallExpTypeParserRuleCall_9());
		}
		this_XFunctionCallExpType_13=ruleXFunctionCallExpType
		{
			$current = $this_XFunctionCallExpType_13.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXAtomicBaseTypeAccess().getXVarStreakTypeParserRuleCall_10());
		}
		this_XVarStreakType_14=ruleXVarStreakType
		{
			$current = $this_XVarStreakType_14.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXAtomicBaseTypeAccess().getXVarCompareStreakTypeParserRuleCall_11());
		}
		this_XVarCompareStreakType_15=ruleXVarCompareStreakType
		{
			$current = $this_XVarCompareStreakType_15.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXAtomicBaseTypeAccess().getXSlrAvgExpTypeParserRuleCall_12());
		}
		this_XSlrAvgExpType_16=ruleXSlrAvgExpType
		{
			$current = $this_XSlrAvgExpType_16.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXAtomicBaseTypeAccess().getXLastSignalTriggerTypeParserRuleCall_13());
		}
		this_XLastSignalTriggerType_17=ruleXLastSignalTriggerType
		{
			$current = $this_XLastSignalTriggerType_17.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXAtomicBaseTypeAccess().getXSignalTriggerCountTypeParserRuleCall_14());
		}
		this_XSignalTriggerCountType_18=ruleXSignalTriggerCountType
		{
			$current = $this_XSignalTriggerCountType_18.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXAtomicBaseTypeAccess().getXVarianceAverageTypeParserRuleCall_15());
		}
		this_XVarianceAverageType_19=ruleXVarianceAverageType
		{
			$current = $this_XVarianceAverageType_19.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXAtomicBaseTypeAccess().getXRocExpTypeParserRuleCall_16());
		}
		this_XRocExpType_20=ruleXRocExpType
		{
			$current = $this_XRocExpType_20.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXAtomicBaseTypeAccess().getXVarianceMaxTypeParserRuleCall_17());
		}
		this_XVarianceMaxType_21=ruleXVarianceMaxType
		{
			$current = $this_XVarianceMaxType_21.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleXPercentChangeExpType
entryRuleXPercentChangeExpType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXPercentChangeExpTypeRule()); }
	iv_ruleXPercentChangeExpType=ruleXPercentChangeExpType
	{ $current=$iv_ruleXPercentChangeExpType.current; }
	EOF;

// Rule XPercentChangeExpType
ruleXPercentChangeExpType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXPercentChangeExpTypeAccess().getXPercentChangeExpTypeAction_0(),
					$current);
			}
		)
		otherlv_1='percentChange'
		{
			newLeafNode(otherlv_1, grammarAccess.getXPercentChangeExpTypeAccess().getPercentChangeKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXPercentChangeExpTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXPercentChangeExpTypeAccess().getValue1XExpressionTypeParserRuleCall_3_0());
				}
				lv_value1_3_0=ruleXExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXPercentChangeExpTypeRule());
					}
					set(
						$current,
						"value1",
						lv_value1_3_0,
						"com.dunkware.xstream.XScript.XExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getXPercentChangeExpTypeAccess().getCommaKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXPercentChangeExpTypeAccess().getValue2XExpressionTypeParserRuleCall_5_0());
				}
				lv_value2_5_0=ruleXExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXPercentChangeExpTypeRule());
					}
					set(
						$current,
						"value2",
						lv_value2_5_0,
						"com.dunkware.xstream.XScript.XExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getXPercentChangeExpTypeAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleXSubExpType
entryRuleXSubExpType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXSubExpTypeRule()); }
	iv_ruleXSubExpType=ruleXSubExpType
	{ $current=$iv_ruleXSubExpType.current; }
	EOF;

// Rule XSubExpType
ruleXSubExpType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXSubExpTypeAccess().getXSubExpTypeAction_0(),
					$current);
			}
		)
		otherlv_1='sub'
		{
			newLeafNode(otherlv_1, grammarAccess.getXSubExpTypeAccess().getSubKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXSubExpTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXSubExpTypeAccess().getValue1XExpressionTypeParserRuleCall_3_0());
				}
				lv_value1_3_0=ruleXExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXSubExpTypeRule());
					}
					set(
						$current,
						"value1",
						lv_value1_3_0,
						"com.dunkware.xstream.XScript.XExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getXSubExpTypeAccess().getCommaKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXSubExpTypeAccess().getValue2XExpressionTypeParserRuleCall_5_0());
				}
				lv_value2_5_0=ruleXExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXSubExpTypeRule());
					}
					set(
						$current,
						"value2",
						lv_value2_5_0,
						"com.dunkware.xstream.XScript.XExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getXSubExpTypeAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleXVarExpType
entryRuleXVarExpType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXVarExpTypeRule()); }
	iv_ruleXVarExpType=ruleXVarExpType
	{ $current=$iv_ruleXVarExpType.current; }
	EOF;

// Rule XVarExpType
ruleXVarExpType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXVarExpTypeAccess().getXVarExpTypeAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXVarExpTypeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getXVarExpTypeAccess().getExpVarXVarTypeCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleXStreamWrapperExpType
entryRuleXStreamWrapperExpType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXStreamWrapperExpTypeRule()); }
	iv_ruleXStreamWrapperExpType=ruleXStreamWrapperExpType
	{ $current=$iv_ruleXStreamWrapperExpType.current; }
	EOF;

// Rule XStreamWrapperExpType
ruleXStreamWrapperExpType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXStreamWrapperExpTypeAccess().getXStreamWrapperExpTypeAction_0(),
					$current);
			}
		)
		otherlv_1='exp'
		{
			newLeafNode(otherlv_1, grammarAccess.getXStreamWrapperExpTypeAccess().getExpKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXStreamWrapperExpTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXStreamWrapperExpTypeAccess().getWrapperExpExpressionTypeParserRuleCall_3_0());
				}
				lv_wrapperExp_3_0=ruleExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXStreamWrapperExpTypeRule());
					}
					set(
						$current,
						"wrapperExp",
						lv_wrapperExp_3_0,
						"com.dunkware.xstream.XScript.ExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getXStreamWrapperExpTypeAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleXStreamVarValueExpType
entryRuleXStreamVarValueExpType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXStreamVarValueExpTypeRule()); }
	iv_ruleXStreamVarValueExpType=ruleXStreamVarValueExpType
	{ $current=$iv_ruleXStreamVarValueExpType.current; }
	EOF;

// Rule XStreamVarValueExpType
ruleXStreamVarValueExpType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXStreamVarValueExpTypeAccess().getXStreamVarValueExpTypeAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXStreamVarValueExpTypeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getXStreamVarValueExpTypeAccess().getVarVarTypeCrossReference_1_0());
				}
			)
		)
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getXStreamVarValueExpTypeAccess().getLeftSquareBracketKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getXStreamVarValueExpTypeAccess().getExpressionValueXExpressionTypeParserRuleCall_2_1_0());
					}
					lv_expressionValue_3_0=ruleXExpressionType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXStreamVarValueExpTypeRule());
						}
						set(
							$current,
							"expressionValue",
							lv_expressionValue_3_0,
							"com.dunkware.xstream.XScript.XExpressionType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getXStreamVarValueExpTypeAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleXFunctionCallExpType
entryRuleXFunctionCallExpType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXFunctionCallExpTypeRule()); }
	iv_ruleXFunctionCallExpType=ruleXFunctionCallExpType
	{ $current=$iv_ruleXFunctionCallExpType.current; }
	EOF;

// Rule XFunctionCallExpType
ruleXFunctionCallExpType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXFunctionCallExpTypeAccess().getXFunctionCallExpTypeAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXFunctionCallExpTypeRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getXFunctionCallExpTypeAccess().getFunctionXFunctionTypeCrossReference_1_0());
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXFunctionCallExpTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_parms_3_0=RULE_STRING
				{
					newLeafNode(lv_parms_3_0, grammarAccess.getXFunctionCallExpTypeAccess().getParmsSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXFunctionCallExpTypeRule());
					}
					setWithLastConsumed(
						$current,
						"parms",
						lv_parms_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getXFunctionCallExpTypeAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleXVarStreakType
entryRuleXVarStreakType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXVarStreakTypeRule()); }
	iv_ruleXVarStreakType=ruleXVarStreakType
	{ $current=$iv_ruleXVarStreakType.current; }
	EOF;

// Rule XVarStreakType
ruleXVarStreakType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXVarStreakTypeAccess().getXVarStreakTypeAction_0(),
					$current);
			}
		)
		otherlv_1='columnStrk'
		{
			newLeafNode(otherlv_1, grammarAccess.getXVarStreakTypeAccess().getColumnStrkKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXVarStreakTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXVarStreakTypeRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getXVarStreakTypeAccess().getVarVarTypeCrossReference_3_0());
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getXVarStreakTypeAccess().getCommaKeyword_4());
		}
		(
			(
				(
					lv_direction_5_1='bwd'
					{
						newLeafNode(lv_direction_5_1, grammarAccess.getXVarStreakTypeAccess().getDirectionBwdKeyword_5_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXVarStreakTypeRule());
						}
						setWithLastConsumed($current, "direction", lv_direction_5_1, null);
					}
					    |
					lv_direction_5_2='fwd'
					{
						newLeafNode(lv_direction_5_2, grammarAccess.getXVarStreakTypeAccess().getDirectionFwdKeyword_5_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXVarStreakTypeRule());
						}
						setWithLastConsumed($current, "direction", lv_direction_5_2, null);
					}
				)
			)
		)
		otherlv_6=','
		{
			newLeafNode(otherlv_6, grammarAccess.getXVarStreakTypeAccess().getCommaKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXVarStreakTypeAccess().getStartIndexExpXExpressionTypeParserRuleCall_7_0());
				}
				lv_startIndexExp_7_0=ruleXExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXVarStreakTypeRule());
					}
					set(
						$current,
						"startIndexExp",
						lv_startIndexExp_7_0,
						"com.dunkware.xstream.XScript.XExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8=','
		{
			newLeafNode(otherlv_8, grammarAccess.getXVarStreakTypeAccess().getCommaKeyword_8());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getXVarStreakTypeAccess().getCompareXVarStreakCompareTypeParserRuleCall_9_0_0());
					}
					lv_compare_9_0=ruleXVarStreakCompareType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXVarStreakTypeRule());
						}
						set(
							$current,
							"compare",
							lv_compare_9_0,
							"com.dunkware.xstream.XScript.XVarStreakCompareType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getXVarStreakTypeAccess().getValueXVarStreakValueTypeParserRuleCall_9_1_0());
					}
					lv_value_10_0=ruleXVarStreakValueType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXVarStreakTypeRule());
						}
						set(
							$current,
							"value",
							lv_value_10_0,
							"com.dunkware.xstream.XScript.XVarStreakValueType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_11=')'
		{
			newLeafNode(otherlv_11, grammarAccess.getXVarStreakTypeAccess().getRightParenthesisKeyword_10());
		}
	)
;

// Entry rule entryRuleXVarStreakCompareType
entryRuleXVarStreakCompareType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXVarStreakCompareTypeRule()); }
	iv_ruleXVarStreakCompareType=ruleXVarStreakCompareType
	{ $current=$iv_ruleXVarStreakCompareType.current; }
	EOF;

// Rule XVarStreakCompareType
ruleXVarStreakCompareType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXVarStreakCompareTypeAccess().getXVarStreakCompareTypeAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_function_1_1='sum'
					{
						newLeafNode(lv_function_1_1, grammarAccess.getXVarStreakCompareTypeAccess().getFunctionSumKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXVarStreakCompareTypeRule());
						}
						setWithLastConsumed($current, "function", lv_function_1_1, null);
					}
					    |
					lv_function_1_2='diff'
					{
						newLeafNode(lv_function_1_2, grammarAccess.getXVarStreakCompareTypeAccess().getFunctionDiffKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXVarStreakCompareTypeRule());
						}
						setWithLastConsumed($current, "function", lv_function_1_2, null);
					}
				)
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXVarStreakCompareTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				lv_offset_3_0=RULE_INT
				{
					newLeafNode(lv_offset_3_0, grammarAccess.getXVarStreakCompareTypeAccess().getOffsetINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXVarStreakCompareTypeRule());
					}
					setWithLastConsumed(
						$current,
						"offset",
						lv_offset_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getXVarStreakCompareTypeAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				(
					lv_op_5_1='<'
					{
						newLeafNode(lv_op_5_1, grammarAccess.getXVarStreakCompareTypeAccess().getOpLessThanSignKeyword_5_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXVarStreakCompareTypeRule());
						}
						setWithLastConsumed($current, "op", lv_op_5_1, null);
					}
					    |
					lv_op_5_2='>'
					{
						newLeafNode(lv_op_5_2, grammarAccess.getXVarStreakCompareTypeAccess().getOpGreaterThanSignKeyword_5_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXVarStreakCompareTypeRule());
						}
						setWithLastConsumed($current, "op", lv_op_5_2, null);
					}
					    |
					lv_op_5_3='='
					{
						newLeafNode(lv_op_5_3, grammarAccess.getXVarStreakCompareTypeAccess().getOpEqualsSignKeyword_5_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXVarStreakCompareTypeRule());
						}
						setWithLastConsumed($current, "op", lv_op_5_3, null);
					}
				)
			)
		)
		(
			(
				lv_test_6_0=RULE_DOUBLE
				{
					newLeafNode(lv_test_6_0, grammarAccess.getXVarStreakCompareTypeAccess().getTestDOUBLETerminalRuleCall_6_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXVarStreakCompareTypeRule());
					}
					setWithLastConsumed(
						$current,
						"test",
						lv_test_6_0,
						"com.dunkware.xstream.XScript.DOUBLE");
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getXVarStreakCompareTypeAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Entry rule entryRuleXVarStreakValueType
entryRuleXVarStreakValueType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXVarStreakValueTypeRule()); }
	iv_ruleXVarStreakValueType=ruleXVarStreakValueType
	{ $current=$iv_ruleXVarStreakValueType.current; }
	EOF;

// Rule XVarStreakValueType
ruleXVarStreakValueType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXVarStreakValueTypeAccess().getXVarStreakValueTypeAction_0(),
					$current);
			}
		)
		otherlv_1='value'
		{
			newLeafNode(otherlv_1, grammarAccess.getXVarStreakValueTypeAccess().getValueKeyword_1());
		}
		(
			(
				(
					lv_op_2_1='<'
					{
						newLeafNode(lv_op_2_1, grammarAccess.getXVarStreakValueTypeAccess().getOpLessThanSignKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXVarStreakValueTypeRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_1, null);
					}
					    |
					lv_op_2_2='>'
					{
						newLeafNode(lv_op_2_2, grammarAccess.getXVarStreakValueTypeAccess().getOpGreaterThanSignKeyword_2_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXVarStreakValueTypeRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_2, null);
					}
					    |
					lv_op_2_3='='
					{
						newLeafNode(lv_op_2_3, grammarAccess.getXVarStreakValueTypeAccess().getOpEqualsSignKeyword_2_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXVarStreakValueTypeRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_3, null);
					}
				)
			)
		)
		(
			(
				lv_test_3_0=RULE_DOUBLE
				{
					newLeafNode(lv_test_3_0, grammarAccess.getXVarStreakValueTypeAccess().getTestDOUBLETerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXVarStreakValueTypeRule());
					}
					setWithLastConsumed(
						$current,
						"test",
						lv_test_3_0,
						"com.dunkware.xstream.XScript.DOUBLE");
				}
			)
		)
	)
;

// Entry rule entryRuleXVarCompareStreakType
entryRuleXVarCompareStreakType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXVarCompareStreakTypeRule()); }
	iv_ruleXVarCompareStreakType=ruleXVarCompareStreakType
	{ $current=$iv_ruleXVarCompareStreakType.current; }
	EOF;

// Rule XVarCompareStreakType
ruleXVarCompareStreakType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXVarCompareStreakTypeAccess().getXVarCompareStreakTypeAction_0(),
					$current);
			}
		)
		otherlv_1='columnPairStrk'
		{
			newLeafNode(otherlv_1, grammarAccess.getXVarCompareStreakTypeAccess().getColumnPairStrkKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXVarCompareStreakTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXVarCompareStreakTypeRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getXVarCompareStreakTypeAccess().getTargetVarVarTypeCrossReference_3_0());
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getXVarCompareStreakTypeAccess().getCommaKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXVarCompareStreakTypeRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getXVarCompareStreakTypeAccess().getCompareVarVarTypeCrossReference_5_0());
				}
			)
		)
		otherlv_6=','
		{
			newLeafNode(otherlv_6, grammarAccess.getXVarCompareStreakTypeAccess().getCommaKeyword_6());
		}
		(
			(
				(
					lv_direction_7_1='bwd'
					{
						newLeafNode(lv_direction_7_1, grammarAccess.getXVarCompareStreakTypeAccess().getDirectionBwdKeyword_7_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXVarCompareStreakTypeRule());
						}
						setWithLastConsumed($current, "direction", lv_direction_7_1, null);
					}
					    |
					lv_direction_7_2='fwd'
					{
						newLeafNode(lv_direction_7_2, grammarAccess.getXVarCompareStreakTypeAccess().getDirectionFwdKeyword_7_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXVarCompareStreakTypeRule());
						}
						setWithLastConsumed($current, "direction", lv_direction_7_2, null);
					}
				)
			)
		)
		otherlv_8=','
		{
			newLeafNode(otherlv_8, grammarAccess.getXVarCompareStreakTypeAccess().getCommaKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXVarCompareStreakTypeAccess().getStartIndexExpXExpressionTypeParserRuleCall_9_0());
				}
				lv_startIndexExp_9_0=ruleXExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXVarCompareStreakTypeRule());
					}
					set(
						$current,
						"startIndexExp",
						lv_startIndexExp_9_0,
						"com.dunkware.xstream.XScript.XExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10=','
		{
			newLeafNode(otherlv_10, grammarAccess.getXVarCompareStreakTypeAccess().getCommaKeyword_10());
		}
		(
			(
				(
					lv_function_11_1='sum'
					{
						newLeafNode(lv_function_11_1, grammarAccess.getXVarCompareStreakTypeAccess().getFunctionSumKeyword_11_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXVarCompareStreakTypeRule());
						}
						setWithLastConsumed($current, "function", lv_function_11_1, null);
					}
					    |
					lv_function_11_2='diff'
					{
						newLeafNode(lv_function_11_2, grammarAccess.getXVarCompareStreakTypeAccess().getFunctionDiffKeyword_11_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXVarCompareStreakTypeRule());
						}
						setWithLastConsumed($current, "function", lv_function_11_2, null);
					}
					    |
					lv_function_11_3='value'
					{
						newLeafNode(lv_function_11_3, grammarAccess.getXVarCompareStreakTypeAccess().getFunctionValueKeyword_11_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXVarCompareStreakTypeRule());
						}
						setWithLastConsumed($current, "function", lv_function_11_3, null);
					}
					    |
					lv_function_11_4='variance'
					{
						newLeafNode(lv_function_11_4, grammarAccess.getXVarCompareStreakTypeAccess().getFunctionVarianceKeyword_11_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXVarCompareStreakTypeRule());
						}
						setWithLastConsumed($current, "function", lv_function_11_4, null);
					}
				)
			)
		)
		(
			(
				(
					lv_op_12_1='<'
					{
						newLeafNode(lv_op_12_1, grammarAccess.getXVarCompareStreakTypeAccess().getOpLessThanSignKeyword_12_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXVarCompareStreakTypeRule());
						}
						setWithLastConsumed($current, "op", lv_op_12_1, null);
					}
					    |
					lv_op_12_2='>'
					{
						newLeafNode(lv_op_12_2, grammarAccess.getXVarCompareStreakTypeAccess().getOpGreaterThanSignKeyword_12_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXVarCompareStreakTypeRule());
						}
						setWithLastConsumed($current, "op", lv_op_12_2, null);
					}
					    |
					lv_op_12_3='='
					{
						newLeafNode(lv_op_12_3, grammarAccess.getXVarCompareStreakTypeAccess().getOpEqualsSignKeyword_12_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXVarCompareStreakTypeRule());
						}
						setWithLastConsumed($current, "op", lv_op_12_3, null);
					}
				)
			)
		)
		(
			(
				lv_test_13_0=RULE_DOUBLE
				{
					newLeafNode(lv_test_13_0, grammarAccess.getXVarCompareStreakTypeAccess().getTestDOUBLETerminalRuleCall_13_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXVarCompareStreakTypeRule());
					}
					setWithLastConsumed(
						$current,
						"test",
						lv_test_13_0,
						"com.dunkware.xstream.XScript.DOUBLE");
				}
			)
		)
		otherlv_14=')'
		{
			newLeafNode(otherlv_14, grammarAccess.getXVarCompareStreakTypeAccess().getRightParenthesisKeyword_14());
		}
	)
;

// Entry rule entryRuleXSlrAvgExpType
entryRuleXSlrAvgExpType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXSlrAvgExpTypeRule()); }
	iv_ruleXSlrAvgExpType=ruleXSlrAvgExpType
	{ $current=$iv_ruleXSlrAvgExpType.current; }
	EOF;

// Rule XSlrAvgExpType
ruleXSlrAvgExpType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXSlrAvgExpTypeAccess().getXSlrAvgExpTypeAction_0(),
					$current);
			}
		)
		otherlv_1='slrAvg'
		{
			newLeafNode(otherlv_1, grammarAccess.getXSlrAvgExpTypeAccess().getSlrAvgKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXSlrAvgExpTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXSlrAvgExpTypeRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getXSlrAvgExpTypeAccess().getVarVarTypeCrossReference_3_0());
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getXSlrAvgExpTypeAccess().getCommaKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXSlrAvgExpTypeAccess().getStartValueXExpressionTypeParserRuleCall_5_0());
				}
				lv_startValue_5_0=ruleXExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXSlrAvgExpTypeRule());
					}
					set(
						$current,
						"startValue",
						lv_startValue_5_0,
						"com.dunkware.xstream.XScript.XExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=','
		{
			newLeafNode(otherlv_6, grammarAccess.getXSlrAvgExpTypeAccess().getCommaKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXSlrAvgExpTypeAccess().getEndValueXExpressionTypeParserRuleCall_7_0());
				}
				lv_endValue_7_0=ruleXExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXSlrAvgExpTypeRule());
					}
					set(
						$current,
						"endValue",
						lv_endValue_7_0,
						"com.dunkware.xstream.XScript.XExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getXSlrAvgExpTypeAccess().getRightParenthesisKeyword_8());
		}
	)
;

// Entry rule entryRuleXLastSignalTriggerType
entryRuleXLastSignalTriggerType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXLastSignalTriggerTypeRule()); }
	iv_ruleXLastSignalTriggerType=ruleXLastSignalTriggerType
	{ $current=$iv_ruleXLastSignalTriggerType.current; }
	EOF;

// Rule XLastSignalTriggerType
ruleXLastSignalTriggerType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXLastSignalTriggerTypeAccess().getXLastSignalTriggerTypeAction_0(),
					$current);
			}
		)
		otherlv_1='lst'
		{
			newLeafNode(otherlv_1, grammarAccess.getXLastSignalTriggerTypeAccess().getLstKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXLastSignalTriggerTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXLastSignalTriggerTypeRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getXLastSignalTriggerTypeAccess().getSignalSignalTypeCrossReference_3_0());
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getXLastSignalTriggerTypeAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleXSignalTriggerCountType
entryRuleXSignalTriggerCountType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXSignalTriggerCountTypeRule()); }
	iv_ruleXSignalTriggerCountType=ruleXSignalTriggerCountType
	{ $current=$iv_ruleXSignalTriggerCountType.current; }
	EOF;

// Rule XSignalTriggerCountType
ruleXSignalTriggerCountType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXSignalTriggerCountTypeAccess().getXSignalTriggerCountTypeAction_0(),
					$current);
			}
		)
		otherlv_1='stc'
		{
			newLeafNode(otherlv_1, grammarAccess.getXSignalTriggerCountTypeAccess().getStcKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXSignalTriggerCountTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXSignalTriggerCountTypeRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getXSignalTriggerCountTypeAccess().getSignalSignalTypeCrossReference_3_0());
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getXSignalTriggerCountTypeAccess().getCommaKeyword_4());
		}
		(
			(
				lv_lookback_5_0=RULE_INT
				{
					newLeafNode(lv_lookback_5_0, grammarAccess.getXSignalTriggerCountTypeAccess().getLookbackINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXSignalTriggerCountTypeRule());
					}
					setWithLastConsumed(
						$current,
						"lookback",
						lv_lookback_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getXSignalTriggerCountTypeAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleXVarianceAverageType
entryRuleXVarianceAverageType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXVarianceAverageTypeRule()); }
	iv_ruleXVarianceAverageType=ruleXVarianceAverageType
	{ $current=$iv_ruleXVarianceAverageType.current; }
	EOF;

// Rule XVarianceAverageType
ruleXVarianceAverageType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXVarianceAverageTypeAccess().getXVarianceAverageTypeAction_0(),
					$current);
			}
		)
		otherlv_1='varAvg'
		{
			newLeafNode(otherlv_1, grammarAccess.getXVarianceAverageTypeAccess().getVarAvgKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXVarianceAverageTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXVarianceAverageTypeRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getXVarianceAverageTypeAccess().getTargetVarTypeCrossReference_3_0());
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getXVarianceAverageTypeAccess().getCommaKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXVarianceAverageTypeRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getXVarianceAverageTypeAccess().getCompareVarTypeCrossReference_5_0());
				}
			)
		)
		otherlv_6=','
		{
			newLeafNode(otherlv_6, grammarAccess.getXVarianceAverageTypeAccess().getCommaKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXVarianceAverageTypeAccess().getStartXExpressionTypeParserRuleCall_7_0());
				}
				lv_start_7_0=ruleXExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXVarianceAverageTypeRule());
					}
					set(
						$current,
						"start",
						lv_start_7_0,
						"com.dunkware.xstream.XScript.XExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8=','
		{
			newLeafNode(otherlv_8, grammarAccess.getXVarianceAverageTypeAccess().getCommaKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXVarianceAverageTypeAccess().getEndXExpressionTypeParserRuleCall_9_0());
				}
				lv_end_9_0=ruleXExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXVarianceAverageTypeRule());
					}
					set(
						$current,
						"end",
						lv_end_9_0,
						"com.dunkware.xstream.XScript.XExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10=')'
		{
			newLeafNode(otherlv_10, grammarAccess.getXVarianceAverageTypeAccess().getRightParenthesisKeyword_10());
		}
	)
;

// Entry rule entryRuleXVarianceMaxType
entryRuleXVarianceMaxType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXVarianceMaxTypeRule()); }
	iv_ruleXVarianceMaxType=ruleXVarianceMaxType
	{ $current=$iv_ruleXVarianceMaxType.current; }
	EOF;

// Rule XVarianceMaxType
ruleXVarianceMaxType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXVarianceMaxTypeAccess().getXVarianceMaxTypeAction_0(),
					$current);
			}
		)
		otherlv_1='varMax'
		{
			newLeafNode(otherlv_1, grammarAccess.getXVarianceMaxTypeAccess().getVarMaxKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXVarianceMaxTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXVarianceMaxTypeRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getXVarianceMaxTypeAccess().getTargetVarTypeCrossReference_3_0());
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getXVarianceMaxTypeAccess().getCommaKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXVarianceMaxTypeRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getXVarianceMaxTypeAccess().getCompareVarTypeCrossReference_5_0());
				}
			)
		)
		otherlv_6=','
		{
			newLeafNode(otherlv_6, grammarAccess.getXVarianceMaxTypeAccess().getCommaKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXVarianceMaxTypeAccess().getStartXExpressionTypeParserRuleCall_7_0());
				}
				lv_start_7_0=ruleXExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXVarianceMaxTypeRule());
					}
					set(
						$current,
						"start",
						lv_start_7_0,
						"com.dunkware.xstream.XScript.XExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8=','
		{
			newLeafNode(otherlv_8, grammarAccess.getXVarianceMaxTypeAccess().getCommaKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXVarianceMaxTypeAccess().getEndXExpressionTypeParserRuleCall_9_0());
				}
				lv_end_9_0=ruleXExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXVarianceMaxTypeRule());
					}
					set(
						$current,
						"end",
						lv_end_9_0,
						"com.dunkware.xstream.XScript.XExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10=')'
		{
			newLeafNode(otherlv_10, grammarAccess.getXVarianceMaxTypeAccess().getRightParenthesisKeyword_10());
		}
	)
;

// Entry rule entryRuleXRocExpType
entryRuleXRocExpType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXRocExpTypeRule()); }
	iv_ruleXRocExpType=ruleXRocExpType
	{ $current=$iv_ruleXRocExpType.current; }
	EOF;

// Rule XRocExpType
ruleXRocExpType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXRocExpTypeAccess().getXRocExpTypeAction_0(),
					$current);
			}
		)
		otherlv_1='rox'
		{
			newLeafNode(otherlv_1, grammarAccess.getXRocExpTypeAccess().getRoxKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXRocExpTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXRocExpTypeAccess().getValue1XExpressionTypeParserRuleCall_3_0());
				}
				lv_value1_3_0=ruleXExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXRocExpTypeRule());
					}
					set(
						$current,
						"value1",
						lv_value1_3_0,
						"com.dunkware.xstream.XScript.XExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getXRocExpTypeAccess().getCommaKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXRocExpTypeAccess().getValue2XExpressionTypeParserRuleCall_5_0());
				}
				lv_value2_5_0=ruleXExpressionType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXRocExpTypeRule());
					}
					set(
						$current,
						"value2",
						lv_value2_5_0,
						"com.dunkware.xstream.XScript.XExpressionType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getXRocExpTypeAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleXTimeRange
entryRuleXTimeRange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXTimeRangeRule()); }
	iv_ruleXTimeRange=ruleXTimeRange
	{ $current=$iv_ruleXTimeRange.current; }
	EOF;

// Rule XTimeRange
ruleXTimeRange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getXTimeRangeAccess().getXTimeRangeRelativeParserRuleCall());
	}
	this_XTimeRangeRelative_0=ruleXTimeRangeRelative
	{
		$current = $this_XTimeRangeRelative_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleXTimeRangeRelative
entryRuleXTimeRangeRelative returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXTimeRangeRelativeRule()); }
	iv_ruleXTimeRangeRelative=ruleXTimeRangeRelative
	{ $current=$iv_ruleXTimeRangeRelative.current; }
	EOF;

// Rule XTimeRangeRelative
ruleXTimeRangeRelative returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXTimeRangeRelativeAccess().getXTimeRangeRelativeAction_0(),
					$current);
			}
		)
		otherlv_1='relative'
		{
			newLeafNode(otherlv_1, grammarAccess.getXTimeRangeRelativeAccess().getRelativeKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXTimeRangeRelativeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXTimeRangeRelativeAccess().getUnitStreamTimeUnitEnumRuleCall_3_0());
				}
				lv_unit_3_0=ruleStreamTimeUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXTimeRangeRelativeRule());
					}
					set(
						$current,
						"unit",
						lv_unit_3_0,
						"com.dunkware.xstream.XScript.StreamTimeUnit");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getXTimeRangeRelativeAccess().getCommaKeyword_4());
		}
		(
			(
				lv_value_5_0=RULE_INT
				{
					newLeafNode(lv_value_5_0, grammarAccess.getXTimeRangeRelativeAccess().getValueINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXTimeRangeRelativeRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getXTimeRangeRelativeAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleXValueType
entryRuleXValueType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXValueTypeRule()); }
	iv_ruleXValueType=ruleXValueType
	{ $current=$iv_ruleXValueType.current; }
	EOF;

// Rule XValueType
ruleXValueType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXValueTypeAccess().getXValueVarCurrentTypeParserRuleCall_0());
		}
		this_XValueVarCurrentType_0=ruleXValueVarCurrentType
		{
			$current = $this_XValueVarCurrentType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXValueTypeAccess().getXValueVarSessionAggTypeParserRuleCall_1());
		}
		this_XValueVarSessionAggType_1=ruleXValueVarSessionAggType
		{
			$current = $this_XValueVarSessionAggType_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXValueTypeAccess().getXValueSignalSessionCountTypeParserRuleCall_2());
		}
		this_XValueSignalSessionCountType_2=ruleXValueSignalSessionCountType
		{
			$current = $this_XValueSignalSessionCountType_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXValueTypeAccess().getXValueSignalHistoricalCountTypeParserRuleCall_3());
		}
		this_XValueSignalHistoricalCountType_3=ruleXValueSignalHistoricalCountType
		{
			$current = $this_XValueSignalHistoricalCountType_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleXValueVarCurrentType
entryRuleXValueVarCurrentType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXValueVarCurrentTypeRule()); }
	iv_ruleXValueVarCurrentType=ruleXValueVarCurrentType
	{ $current=$iv_ruleXValueVarCurrentType.current; }
	EOF;

// Rule XValueVarCurrentType
ruleXValueVarCurrentType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXValueVarCurrentTypeAccess().getXValueVarCurrentTypeAction_0(),
					$current);
			}
		)
		otherlv_1='sessionVarValue'
		{
			newLeafNode(otherlv_1, grammarAccess.getXValueVarCurrentTypeAccess().getSessionVarValueKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXValueVarCurrentTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXValueVarCurrentTypeRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getXValueVarCurrentTypeAccess().getVarVarTypeCrossReference_3_0());
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getXValueVarCurrentTypeAccess().getCommaKeyword_4());
		}
		(
			(
				lv_index_5_0=RULE_INT
				{
					newLeafNode(lv_index_5_0, grammarAccess.getXValueVarCurrentTypeAccess().getIndexINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXValueVarCurrentTypeRule());
					}
					setWithLastConsumed(
						$current,
						"index",
						lv_index_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getXValueVarCurrentTypeAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleXValueVarSessionAggType
entryRuleXValueVarSessionAggType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXValueVarSessionAggTypeRule()); }
	iv_ruleXValueVarSessionAggType=ruleXValueVarSessionAggType
	{ $current=$iv_ruleXValueVarSessionAggType.current; }
	EOF;

// Rule XValueVarSessionAggType
ruleXValueVarSessionAggType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXValueVarSessionAggTypeAccess().getXValueVarSessionAggTypeAction_0(),
					$current);
			}
		)
		otherlv_1='sessionVarAgg'
		{
			newLeafNode(otherlv_1, grammarAccess.getXValueVarSessionAggTypeAccess().getSessionVarAggKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXValueVarSessionAggTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXValueVarSessionAggTypeRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getXValueVarSessionAggTypeAccess().getVarVarTypeCrossReference_3_0());
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getXValueVarSessionAggTypeAccess().getCommaKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXValueVarSessionAggTypeAccess().getFunctionXValueVarSessionAggFunctionEnumRuleCall_5_0());
				}
				lv_function_5_0=ruleXValueVarSessionAggFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXValueVarSessionAggTypeRule());
					}
					set(
						$current,
						"function",
						lv_function_5_0,
						"com.dunkware.xstream.XScript.XValueVarSessionAggFunction");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=','
		{
			newLeafNode(otherlv_6, grammarAccess.getXValueVarSessionAggTypeAccess().getCommaKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXValueVarSessionAggTypeAccess().getRangeXTimeRangeParserRuleCall_7_0());
				}
				lv_range_7_0=ruleXTimeRange
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXValueVarSessionAggTypeRule());
					}
					set(
						$current,
						"range",
						lv_range_7_0,
						"com.dunkware.xstream.XScript.XTimeRange");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getXValueVarSessionAggTypeAccess().getRightParenthesisKeyword_8());
		}
	)
;

// Entry rule entryRuleXValueSignalSessionCountType
entryRuleXValueSignalSessionCountType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXValueSignalSessionCountTypeRule()); }
	iv_ruleXValueSignalSessionCountType=ruleXValueSignalSessionCountType
	{ $current=$iv_ruleXValueSignalSessionCountType.current; }
	EOF;

// Rule XValueSignalSessionCountType
ruleXValueSignalSessionCountType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXValueSignalSessionCountTypeAccess().getXValueSignalSessionCountTypeAction_0(),
					$current);
			}
		)
		otherlv_1='sessionSignalCount'
		{
			newLeafNode(otherlv_1, grammarAccess.getXValueSignalSessionCountTypeAccess().getSessionSignalCountKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXValueSignalSessionCountTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXValueSignalSessionCountTypeRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getXValueSignalSessionCountTypeAccess().getSignalSignalTypeCrossReference_3_0());
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getXValueSignalSessionCountTypeAccess().getCommaKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXValueSignalSessionCountTypeAccess().getTimeRangeXTimeRangeParserRuleCall_5_0());
				}
				lv_timeRange_5_0=ruleXTimeRange
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXValueSignalSessionCountTypeRule());
					}
					set(
						$current,
						"timeRange",
						lv_timeRange_5_0,
						"com.dunkware.xstream.XScript.XTimeRange");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=','
		{
			newLeafNode(otherlv_6, grammarAccess.getXValueSignalSessionCountTypeAccess().getCommaKeyword_6());
		}
		(
			(
				lv_value_7_0=RULE_INT
				{
					newLeafNode(lv_value_7_0, grammarAccess.getXValueSignalSessionCountTypeAccess().getValueINTTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXValueSignalSessionCountTypeRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_7_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getXValueSignalSessionCountTypeAccess().getRightParenthesisKeyword_8());
		}
	)
;

// Entry rule entryRuleXValueSignalHistoricalCountType
entryRuleXValueSignalHistoricalCountType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXValueSignalHistoricalCountTypeRule()); }
	iv_ruleXValueSignalHistoricalCountType=ruleXValueSignalHistoricalCountType
	{ $current=$iv_ruleXValueSignalHistoricalCountType.current; }
	EOF;

// Rule XValueSignalHistoricalCountType
ruleXValueSignalHistoricalCountType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXValueSignalHistoricalCountTypeAccess().getXValueSignalHistoricalCountTypeAction_0(),
					$current);
			}
		)
		otherlv_1='historicalSignalCount'
		{
			newLeafNode(otherlv_1, grammarAccess.getXValueSignalHistoricalCountTypeAccess().getHistoricalSignalCountKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXValueSignalHistoricalCountTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXValueSignalHistoricalCountTypeRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getXValueSignalHistoricalCountTypeAccess().getSignalSignalTypeCrossReference_3_0());
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getXValueSignalHistoricalCountTypeAccess().getCommaKeyword_4());
		}
		(
			(
				lv_days_5_0=RULE_INT
				{
					newLeafNode(lv_days_5_0, grammarAccess.getXValueSignalHistoricalCountTypeAccess().getDaysINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXValueSignalHistoricalCountTypeRule());
					}
					setWithLastConsumed(
						$current,
						"days",
						lv_days_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6=','
		{
			newLeafNode(otherlv_6, grammarAccess.getXValueSignalHistoricalCountTypeAccess().getCommaKeyword_6());
		}
		(
			(
				lv_count_7_0=RULE_INT
				{
					newLeafNode(lv_count_7_0, grammarAccess.getXValueSignalHistoricalCountTypeAccess().getCountINTTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXValueSignalHistoricalCountTypeRule());
					}
					setWithLastConsumed(
						$current,
						"count",
						lv_count_7_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getXValueSignalHistoricalCountTypeAccess().getRightParenthesisKeyword_8());
		}
	)
;

// Entry rule entryRuleXQueryType
entryRuleXQueryType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXQueryTypeRule()); }
	iv_ruleXQueryType=ruleXQueryType
	{ $current=$iv_ruleXQueryType.current; }
	EOF;

// Rule XQueryType
ruleXQueryType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='query'
		{
			newLeafNode(otherlv_0, grammarAccess.getXQueryTypeAccess().getQueryKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getXQueryTypeAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getXQueryTypeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXQueryTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getXQueryTypeAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getXQueryTypeAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXQueryTypeAccess().getFiltersXQueryFilterTypeParserRuleCall_5_0());
				}
				lv_filters_5_0=ruleXQueryFilterType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXQueryTypeRule());
					}
					add(
						$current,
						"filters",
						lv_filters_5_0,
						"com.dunkware.xstream.XScript.XQueryFilterType");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getXQueryTypeAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleXQueryFilterType
entryRuleXQueryFilterType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXQueryFilterTypeRule()); }
	iv_ruleXQueryFilterType=ruleXQueryFilterType
	{ $current=$iv_ruleXQueryFilterType.current; }
	EOF;

// Rule XQueryFilterType
ruleXQueryFilterType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXQueryFilterTypeAccess().getXQueryFilterValueCompareTypeParserRuleCall_0());
		}
		this_XQueryFilterValueCompareType_0=ruleXQueryFilterValueCompareType
		{
			$current = $this_XQueryFilterValueCompareType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getXQueryFilterTypeAccess().getXQueryFilterValueTypeParserRuleCall_1());
		}
		this_XQueryFilterValueType_1=ruleXQueryFilterValueType
		{
			$current = $this_XQueryFilterValueType_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleXQueryFilterValueType
entryRuleXQueryFilterValueType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXQueryFilterValueTypeRule()); }
	iv_ruleXQueryFilterValueType=ruleXQueryFilterValueType
	{ $current=$iv_ruleXQueryFilterValueType.current; }
	EOF;

// Rule XQueryFilterValueType
ruleXQueryFilterValueType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getXQueryFilterValueTypeAccess().getXQueryFilterValueTypeAction_0(),
					$current);
			}
		)
		otherlv_1='valueFilter'
		{
			newLeafNode(otherlv_1, grammarAccess.getXQueryFilterValueTypeAccess().getValueFilterKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getXQueryFilterValueTypeAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXQueryFilterValueTypeAccess().getValueXValueTypeParserRuleCall_3_0());
				}
				lv_value_3_0=ruleXValueType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXQueryFilterValueTypeRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"com.dunkware.xstream.XScript.XValueType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getXQueryFilterValueTypeAccess().getCommaKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXQueryFilterValueTypeAccess().getOperatorXStreamOperatorEnumRuleCall_5_0());
				}
				lv_operator_5_0=ruleXStreamOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXQueryFilterValueTypeRule());
					}
					set(
						$current,
						"operator",
						lv_operator_5_0,
						"com.dunkware.xstream.XScript.XStreamOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=','
		{
			newLeafNode(otherlv_6, grammarAccess.getXQueryFilterValueTypeAccess().getCommaKeyword_6());
		}
		(
			(
				lv_criteria_7_0=RULE_STRING
				{
					newLeafNode(lv_criteria_7_0, grammarAccess.getXQueryFilterValueTypeAccess().getCriteriaSTRINGTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXQueryFilterValueTypeRule());
					}
					setWithLastConsumed(
						$current,
						"criteria",
						lv_criteria_7_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getXQueryFilterValueTypeAccess().getRightParenthesisKeyword_8());
		}
	)
;

// Entry rule entryRuleXQueryFilterValueCompareType
entryRuleXQueryFilterValueCompareType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXQueryFilterValueCompareTypeRule()); }
	iv_ruleXQueryFilterValueCompareType=ruleXQueryFilterValueCompareType
	{ $current=$iv_ruleXQueryFilterValueCompareType.current; }
	EOF;

// Rule XQueryFilterValueCompareType
ruleXQueryFilterValueCompareType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='valueCompareFilter'
		{
			newLeafNode(otherlv_0, grammarAccess.getXQueryFilterValueCompareTypeAccess().getValueCompareFilterKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getXQueryFilterValueCompareTypeAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXQueryFilterValueCompareTypeAccess().getValue1XValueTypeParserRuleCall_2_0());
				}
				lv_value1_2_0=ruleXValueType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXQueryFilterValueCompareTypeRule());
					}
					set(
						$current,
						"value1",
						lv_value1_2_0,
						"com.dunkware.xstream.XScript.XValueType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=','
		{
			newLeafNode(otherlv_3, grammarAccess.getXQueryFilterValueCompareTypeAccess().getCommaKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXQueryFilterValueCompareTypeAccess().getValue2XValueTypeParserRuleCall_4_0());
				}
				lv_value2_4_0=ruleXValueType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXQueryFilterValueCompareTypeRule());
					}
					set(
						$current,
						"value2",
						lv_value2_4_0,
						"com.dunkware.xstream.XScript.XValueType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=','
		{
			newLeafNode(otherlv_5, grammarAccess.getXQueryFilterValueCompareTypeAccess().getCommaKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXQueryFilterValueCompareTypeAccess().getFunctionXQueryValueCompareFunctionEnumRuleCall_6_0());
				}
				lv_function_6_0=ruleXQueryValueCompareFunction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXQueryFilterValueCompareTypeRule());
					}
					set(
						$current,
						"function",
						lv_function_6_0,
						"com.dunkware.xstream.XScript.XQueryValueCompareFunction");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=','
		{
			newLeafNode(otherlv_7, grammarAccess.getXQueryFilterValueCompareTypeAccess().getCommaKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXQueryFilterValueCompareTypeAccess().getOperatorXStreamOperatorEnumRuleCall_8_0());
				}
				lv_operator_8_0=ruleXStreamOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXQueryFilterValueCompareTypeRule());
					}
					set(
						$current,
						"operator",
						lv_operator_8_0,
						"com.dunkware.xstream.XScript.XStreamOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9=','
		{
			newLeafNode(otherlv_9, grammarAccess.getXQueryFilterValueCompareTypeAccess().getCommaKeyword_9());
		}
		(
			(
				lv_criteria_10_0=RULE_STRING
				{
					newLeafNode(lv_criteria_10_0, grammarAccess.getXQueryFilterValueCompareTypeAccess().getCriteriaSTRINGTerminalRuleCall_10_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getXQueryFilterValueCompareTypeRule());
					}
					setWithLastConsumed(
						$current,
						"criteria",
						lv_criteria_10_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_11=')'
		{
			newLeafNode(otherlv_11, grammarAccess.getXQueryFilterValueCompareTypeAccess().getRightParenthesisKeyword_11());
		}
	)
;

// Rule StreamTimeUnit
ruleStreamTimeUnit returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='SEC'
			{
				$current = grammarAccess.getStreamTimeUnitAccess().getSecondEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getStreamTimeUnitAccess().getSecondEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='MIN'
			{
				$current = grammarAccess.getStreamTimeUnitAccess().getMinuteEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getStreamTimeUnitAccess().getMinuteEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='HOUR'
			{
				$current = grammarAccess.getStreamTimeUnitAccess().getHourEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getStreamTimeUnitAccess().getHourEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule DataType
ruleDataType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='STR'
			{
				$current = grammarAccess.getDataTypeAccess().getSTREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDataTypeAccess().getSTREnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='INT'
			{
				$current = grammarAccess.getDataTypeAccess().getINTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDataTypeAccess().getINTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='BOOl'
			{
				$current = grammarAccess.getDataTypeAccess().getBOOlEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDataTypeAccess().getBOOlEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='T'
			{
				$current = grammarAccess.getDataTypeAccess().getTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getDataTypeAccess().getTEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='DT'
			{
				$current = grammarAccess.getDataTypeAccess().getDTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getDataTypeAccess().getDTEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='DATE'
			{
				$current = grammarAccess.getDataTypeAccess().getDATEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getDataTypeAccess().getDATEEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='DUB'
			{
				$current = grammarAccess.getDataTypeAccess().getDUBEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getDataTypeAccess().getDUBEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='LONG'
			{
				$current = grammarAccess.getDataTypeAccess().getLONGEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getDataTypeAccess().getLONGEnumLiteralDeclaration_7());
			}
		)
	)
;

// Rule XValueVarSessionAggFunction
ruleXValueVarSessionAggFunction returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='HIGH'
			{
				$current = grammarAccess.getXValueVarSessionAggFunctionAccess().getHighEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getXValueVarSessionAggFunctionAccess().getHighEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='LOW'
			{
				$current = grammarAccess.getXValueVarSessionAggFunctionAccess().getLowEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getXValueVarSessionAggFunctionAccess().getLowEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule XStreamOperator
ruleXStreamOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='GT'
			{
				$current = grammarAccess.getXStreamOperatorAccess().getGtEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getXStreamOperatorAccess().getGtEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='LT'
			{
				$current = grammarAccess.getXStreamOperatorAccess().getLtEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getXStreamOperatorAccess().getLtEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='EQ'
			{
				$current = grammarAccess.getXStreamOperatorAccess().getEqEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getXStreamOperatorAccess().getEqEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='NE'
			{
				$current = grammarAccess.getXStreamOperatorAccess().getNqEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getXStreamOperatorAccess().getNqEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule XQueryValueCompareFunction
ruleXQueryValueCompareFunction returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='ROC'
			{
				$current = grammarAccess.getXQueryValueCompareFunctionAccess().getRocEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getXQueryValueCompareFunctionAccess().getRocEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='DIFF'
			{
				$current = grammarAccess.getXQueryValueCompareFunctionAccess().getDiffEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getXQueryValueCompareFunctionAccess().getDiffEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_DOUBLE : '-'? ('0'..'9')+ '.' ('0'..'9')+ (('e'|'E') '-'? ('0'..'9')+)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
