/**
 * generated by Xtext 2.21.0
 */
package com.dunkware.xstream.xScript.impl;

import com.dunkware.xstream.xScript.ExpressionType;
import com.dunkware.xstream.xScript.VarType;
import com.dunkware.xstream.xScript.VariableValueType;
import com.dunkware.xstream.xScript.XScriptPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Variable Value Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.dunkware.xstream.xScript.impl.VariableValueTypeImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.VariableValueTypeImpl#getIndexInt <em>Index Int</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.VariableValueTypeImpl#getExpType <em>Exp Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VariableValueTypeImpl extends ExpressionTypeImpl implements VariableValueType
{
  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected VarType variable;

  /**
   * The default value of the '{@link #getIndexInt() <em>Index Int</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndexInt()
   * @generated
   * @ordered
   */
  protected static final int INDEX_INT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getIndexInt() <em>Index Int</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndexInt()
   * @generated
   * @ordered
   */
  protected int indexInt = INDEX_INT_EDEFAULT;

  /**
   * The cached value of the '{@link #getExpType() <em>Exp Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpType()
   * @generated
   * @ordered
   */
  protected ExpressionType expType;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VariableValueTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XScriptPackage.Literals.VARIABLE_VALUE_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarType getVariable()
  {
    if (variable != null && variable.eIsProxy())
    {
      InternalEObject oldVariable = (InternalEObject)variable;
      variable = (VarType)eResolveProxy(oldVariable);
      if (variable != oldVariable)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XScriptPackage.VARIABLE_VALUE_TYPE__VARIABLE, oldVariable, variable));
      }
    }
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarType basicGetVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVariable(VarType newVariable)
  {
    VarType oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.VARIABLE_VALUE_TYPE__VARIABLE, oldVariable, variable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getIndexInt()
  {
    return indexInt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIndexInt(int newIndexInt)
  {
    int oldIndexInt = indexInt;
    indexInt = newIndexInt;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.VARIABLE_VALUE_TYPE__INDEX_INT, oldIndexInt, indexInt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionType getExpType()
  {
    return expType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpType(ExpressionType newExpType, NotificationChain msgs)
  {
    ExpressionType oldExpType = expType;
    expType = newExpType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XScriptPackage.VARIABLE_VALUE_TYPE__EXP_TYPE, oldExpType, newExpType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpType(ExpressionType newExpType)
  {
    if (newExpType != expType)
    {
      NotificationChain msgs = null;
      if (expType != null)
        msgs = ((InternalEObject)expType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.VARIABLE_VALUE_TYPE__EXP_TYPE, null, msgs);
      if (newExpType != null)
        msgs = ((InternalEObject)newExpType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.VARIABLE_VALUE_TYPE__EXP_TYPE, null, msgs);
      msgs = basicSetExpType(newExpType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.VARIABLE_VALUE_TYPE__EXP_TYPE, newExpType, newExpType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XScriptPackage.VARIABLE_VALUE_TYPE__EXP_TYPE:
        return basicSetExpType(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XScriptPackage.VARIABLE_VALUE_TYPE__VARIABLE:
        if (resolve) return getVariable();
        return basicGetVariable();
      case XScriptPackage.VARIABLE_VALUE_TYPE__INDEX_INT:
        return getIndexInt();
      case XScriptPackage.VARIABLE_VALUE_TYPE__EXP_TYPE:
        return getExpType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XScriptPackage.VARIABLE_VALUE_TYPE__VARIABLE:
        setVariable((VarType)newValue);
        return;
      case XScriptPackage.VARIABLE_VALUE_TYPE__INDEX_INT:
        setIndexInt((Integer)newValue);
        return;
      case XScriptPackage.VARIABLE_VALUE_TYPE__EXP_TYPE:
        setExpType((ExpressionType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.VARIABLE_VALUE_TYPE__VARIABLE:
        setVariable((VarType)null);
        return;
      case XScriptPackage.VARIABLE_VALUE_TYPE__INDEX_INT:
        setIndexInt(INDEX_INT_EDEFAULT);
        return;
      case XScriptPackage.VARIABLE_VALUE_TYPE__EXP_TYPE:
        setExpType((ExpressionType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.VARIABLE_VALUE_TYPE__VARIABLE:
        return variable != null;
      case XScriptPackage.VARIABLE_VALUE_TYPE__INDEX_INT:
        return indexInt != INDEX_INT_EDEFAULT;
      case XScriptPackage.VARIABLE_VALUE_TYPE__EXP_TYPE:
        return expType != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (indexInt: ");
    result.append(indexInt);
    result.append(')');
    return result.toString();
  }

} //VariableValueTypeImpl
