/**
 * generated by Xtext 2.28.0
 */
package com.dunkware.xstream.xScript.impl;

import com.dunkware.xstream.xScript.XClassElementType;
import com.dunkware.xstream.xScript.XElseIfStatementType;
import com.dunkware.xstream.xScript.XElseStatementType;
import com.dunkware.xstream.xScript.XExpressionType;
import com.dunkware.xstream.xScript.XIfStatementType;
import com.dunkware.xstream.xScript.XScriptPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>XIf Statement Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XIfStatementTypeImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XIfStatementTypeImpl#getElements <em>Elements</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XIfStatementTypeImpl#getElseIfElements <em>Else If Elements</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XIfStatementTypeImpl#getElseElement <em>Else Element</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XIfStatementTypeImpl extends XFunctionCoreElementTypeImpl implements XIfStatementType
{
  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected XExpressionType expression;

  /**
   * The cached value of the '{@link #getElements() <em>Elements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElements()
   * @generated
   * @ordered
   */
  protected EList<XClassElementType> elements;

  /**
   * The cached value of the '{@link #getElseIfElements() <em>Else If Elements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElseIfElements()
   * @generated
   * @ordered
   */
  protected EList<XElseIfStatementType> elseIfElements;

  /**
   * The cached value of the '{@link #getElseElement() <em>Else Element</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElseElement()
   * @generated
   * @ordered
   */
  protected XElseStatementType elseElement;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XIfStatementTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XScriptPackage.Literals.XIF_STATEMENT_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XExpressionType getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression(XExpressionType newExpression, NotificationChain msgs)
  {
    XExpressionType oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XScriptPackage.XIF_STATEMENT_TYPE__EXPRESSION, oldExpression, newExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpression(XExpressionType newExpression)
  {
    if (newExpression != expression)
    {
      NotificationChain msgs = null;
      if (expression != null)
        msgs = ((InternalEObject)expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XIF_STATEMENT_TYPE__EXPRESSION, null, msgs);
      if (newExpression != null)
        msgs = ((InternalEObject)newExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XIF_STATEMENT_TYPE__EXPRESSION, null, msgs);
      msgs = basicSetExpression(newExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XIF_STATEMENT_TYPE__EXPRESSION, newExpression, newExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<XClassElementType> getElements()
  {
    if (elements == null)
    {
      elements = new EObjectContainmentEList<XClassElementType>(XClassElementType.class, this, XScriptPackage.XIF_STATEMENT_TYPE__ELEMENTS);
    }
    return elements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<XElseIfStatementType> getElseIfElements()
  {
    if (elseIfElements == null)
    {
      elseIfElements = new EObjectContainmentEList<XElseIfStatementType>(XElseIfStatementType.class, this, XScriptPackage.XIF_STATEMENT_TYPE__ELSE_IF_ELEMENTS);
    }
    return elseIfElements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XElseStatementType getElseElement()
  {
    return elseElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElseElement(XElseStatementType newElseElement, NotificationChain msgs)
  {
    XElseStatementType oldElseElement = elseElement;
    elseElement = newElseElement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XScriptPackage.XIF_STATEMENT_TYPE__ELSE_ELEMENT, oldElseElement, newElseElement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setElseElement(XElseStatementType newElseElement)
  {
    if (newElseElement != elseElement)
    {
      NotificationChain msgs = null;
      if (elseElement != null)
        msgs = ((InternalEObject)elseElement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XIF_STATEMENT_TYPE__ELSE_ELEMENT, null, msgs);
      if (newElseElement != null)
        msgs = ((InternalEObject)newElseElement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XIF_STATEMENT_TYPE__ELSE_ELEMENT, null, msgs);
      msgs = basicSetElseElement(newElseElement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XIF_STATEMENT_TYPE__ELSE_ELEMENT, newElseElement, newElseElement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XScriptPackage.XIF_STATEMENT_TYPE__EXPRESSION:
        return basicSetExpression(null, msgs);
      case XScriptPackage.XIF_STATEMENT_TYPE__ELEMENTS:
        return ((InternalEList<?>)getElements()).basicRemove(otherEnd, msgs);
      case XScriptPackage.XIF_STATEMENT_TYPE__ELSE_IF_ELEMENTS:
        return ((InternalEList<?>)getElseIfElements()).basicRemove(otherEnd, msgs);
      case XScriptPackage.XIF_STATEMENT_TYPE__ELSE_ELEMENT:
        return basicSetElseElement(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XScriptPackage.XIF_STATEMENT_TYPE__EXPRESSION:
        return getExpression();
      case XScriptPackage.XIF_STATEMENT_TYPE__ELEMENTS:
        return getElements();
      case XScriptPackage.XIF_STATEMENT_TYPE__ELSE_IF_ELEMENTS:
        return getElseIfElements();
      case XScriptPackage.XIF_STATEMENT_TYPE__ELSE_ELEMENT:
        return getElseElement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XScriptPackage.XIF_STATEMENT_TYPE__EXPRESSION:
        setExpression((XExpressionType)newValue);
        return;
      case XScriptPackage.XIF_STATEMENT_TYPE__ELEMENTS:
        getElements().clear();
        getElements().addAll((Collection<? extends XClassElementType>)newValue);
        return;
      case XScriptPackage.XIF_STATEMENT_TYPE__ELSE_IF_ELEMENTS:
        getElseIfElements().clear();
        getElseIfElements().addAll((Collection<? extends XElseIfStatementType>)newValue);
        return;
      case XScriptPackage.XIF_STATEMENT_TYPE__ELSE_ELEMENT:
        setElseElement((XElseStatementType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XIF_STATEMENT_TYPE__EXPRESSION:
        setExpression((XExpressionType)null);
        return;
      case XScriptPackage.XIF_STATEMENT_TYPE__ELEMENTS:
        getElements().clear();
        return;
      case XScriptPackage.XIF_STATEMENT_TYPE__ELSE_IF_ELEMENTS:
        getElseIfElements().clear();
        return;
      case XScriptPackage.XIF_STATEMENT_TYPE__ELSE_ELEMENT:
        setElseElement((XElseStatementType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XIF_STATEMENT_TYPE__EXPRESSION:
        return expression != null;
      case XScriptPackage.XIF_STATEMENT_TYPE__ELEMENTS:
        return elements != null && !elements.isEmpty();
      case XScriptPackage.XIF_STATEMENT_TYPE__ELSE_IF_ELEMENTS:
        return elseIfElements != null && !elseIfElements.isEmpty();
      case XScriptPackage.XIF_STATEMENT_TYPE__ELSE_ELEMENT:
        return elseElement != null;
    }
    return super.eIsSet(featureID);
  }

} //XIfStatementTypeImpl
