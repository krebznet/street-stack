/**
 * generated by Xtext 2.21.0
 */
package com.dunkware.xstream.xScript.impl;

import com.dunkware.xstream.xScript.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class XScriptFactoryImpl extends EFactoryImpl implements XScriptFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static XScriptFactory init()
  {
    try
    {
      XScriptFactory theXScriptFactory = (XScriptFactory)EPackage.Registry.INSTANCE.getEFactory(XScriptPackage.eNS_URI);
      if (theXScriptFactory != null)
      {
        return theXScriptFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new XScriptFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XScriptFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case XScriptPackage.XSCRIPT: return createXScript();
      case XScriptPackage.SCRIPT_ELEMENT: return createScriptElement();
      case XScriptPackage.CORE_ABSTRACT_ELEMENT: return createCoreAbstractElement();
      case XScriptPackage.VAR_TYPE: return createVarType();
      case XScriptPackage.EXPRESSION_TYPE: return createExpressionType();
      case XScriptPackage.VARIABLE_VALUE_RANGE_TYPE: return createVariableValueRangeType();
      case XScriptPackage.VARIABLE_VALUE_TYPE: return createVariableValueType();
      case XScriptPackage.VARIABLE_VALUE_EXP_TYPE: return createVariableValueExpType();
      case XScriptPackage.SET_EXPRESSION_TYPE: return createSetExpressionType();
      case XScriptPackage.SNAPSHOT_EXPRESSION_TYPE: return createSnapshotExpressionType();
      case XScriptPackage.ROC_EXPRESSION_TYPE: return createRocExpressionType();
      case XScriptPackage.AVG_EXPRESSION_TYPE: return createAvgExpressionType();
      case XScriptPackage.SUB_EXPRESSION_TYPE: return createSubExpressionType();
      case XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE: return createSessionSignalExpressionType();
      case XScriptPackage.SIGNAL_TYPE: return createSignalType();
      case XScriptPackage.ABSTRACT_ELEMENT: return createAbstractElement();
      case XScriptPackage.XCLASS_ELEMENT_TYPE: return createXClassElementType();
      case XScriptPackage.XCLASS_CORE_ELEMENT_TYPE: return createXClassCoreElementType();
      case XScriptPackage.XVAR_TYPE: return createXVarType();
      case XScriptPackage.XFUNCTION_TYPE: return createXFunctionType();
      case XScriptPackage.XFUNCTION_CORE_ELEMENT_TYPE: return createXFunctionCoreElementType();
      case XScriptPackage.XFUNCTION_RETURN_TYPE: return createXFunctionReturnType();
      case XScriptPackage.XFUNCTION_CALL_TYPE: return createXFunctionCallType();
      case XScriptPackage.XSIGNAL_LISTENER_TYPE: return createXSignalListenerType();
      case XScriptPackage.XSTREAM_VAR_LISTENER_TYPE: return createXStreamVarListenerType();
      case XScriptPackage.XSIGNAL_TRIGGER_TYPE: return createXSignalTriggerType();
      case XScriptPackage.XFUNCTION_START_TYPE: return createXFunctionStartType();
      case XScriptPackage.XVAR_SETTER_TYPE: return createXVarSetterType();
      case XScriptPackage.XVAR_INCREMENT_TYPE: return createXVarIncrementType();
      case XScriptPackage.XVAR_DECREMENT_TYPE: return createXVarDecrementType();
      case XScriptPackage.XSET_VAR_TYPE: return createXSetVarType();
      case XScriptPackage.XDEBUG_TYPE: return createXDebugType();
      case XScriptPackage.XIF_STATEMENT_TYPE: return createXIfStatementType();
      case XScriptPackage.XELSE_IF_STATEMENT_TYPE: return createXElseIfStatementType();
      case XScriptPackage.XELSE_STATEMENT_TYPE: return createXElseStatementType();
      case XScriptPackage.XWHILE_TYPE: return createXWhileType();
      case XScriptPackage.XWHILE_BREAK_TYPE: return createXWhileBreakType();
      case XScriptPackage.XSLEEP_TYPE: return createXSleepType();
      case XScriptPackage.XEXPRESSION_TYPE: return createXExpressionType();
      case XScriptPackage.XPERCENT_CHANGE_EXP_TYPE: return createXPercentChangeExpType();
      case XScriptPackage.XSUB_EXP_TYPE: return createXSubExpType();
      case XScriptPackage.XVAR_EXP_TYPE: return createXVarExpType();
      case XScriptPackage.XSTREAM_WRAPPER_EXP_TYPE: return createXStreamWrapperExpType();
      case XScriptPackage.XSTREAM_VAR_VALUE_EXP_TYPE: return createXStreamVarValueExpType();
      case XScriptPackage.XFUNCTION_CALL_EXP_TYPE: return createXFunctionCallExpType();
      case XScriptPackage.XVAR_STREAK_TYPE: return createXVarStreakType();
      case XScriptPackage.XVAR_STREAK_COMPARE_TYPE: return createXVarStreakCompareType();
      case XScriptPackage.XVAR_STREAK_VALUE_TYPE: return createXVarStreakValueType();
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE: return createXVarCompareStreakType();
      case XScriptPackage.XSLR_AVG_EXP_TYPE: return createXSlrAvgExpType();
      case XScriptPackage.XLAST_SIGNAL_TRIGGER_TYPE: return createXLastSignalTriggerType();
      case XScriptPackage.XSIGNAL_TRIGGER_COUNT_TYPE: return createXSignalTriggerCountType();
      case XScriptPackage.XVARIANCE_AVERAGE_TYPE: return createXVarianceAverageType();
      case XScriptPackage.XVARIANCE_MAX_TYPE: return createXVarianceMaxType();
      case XScriptPackage.XROC_EXP_TYPE: return createXRocExpType();
      case XScriptPackage.XTIME_RANGE: return createXTimeRange();
      case XScriptPackage.XTIME_RANGE_RELATIVE: return createXTimeRangeRelative();
      case XScriptPackage.XVALUE_TYPE: return createXValueType();
      case XScriptPackage.XVALUE_SESSION_VAR_VALUE_TYPE: return createXValueSessionVarValueType();
      case XScriptPackage.XVALUE_SESSION_VAR_AGG_TYPE: return createXValueSessionVarAggType();
      case XScriptPackage.XVALUE_SESSION_SIGNAL_COUNT_TYPE: return createXValueSessionSignalCountType();
      case XScriptPackage.XVALUE_HISTORICAL_VAR_AGG_TYPE: return createXValueHistoricalVarAggType();
      case XScriptPackage.XVALUE_HISTORICAL_SIGNAL_COUNT_TYPE: return createXValueHistoricalSignalCountType();
      case XScriptPackage.XQUERY_TYPE: return createXQueryType();
      case XScriptPackage.XQUERY_FILTER_TYPE: return createXQueryFilterType();
      case XScriptPackage.XQUERY_FILTER_VALUE_TYPE: return createXQueryFilterValueType();
      case XScriptPackage.XQUERY_FILTER_VALUE_COMPARE_TYPE: return createXQueryFilterValueCompareType();
      case XScriptPackage.OR_TYPE: return createOrType();
      case XScriptPackage.AND_TYPE: return createAndType();
      case XScriptPackage.EQUALITY_TYPE: return createEqualityType();
      case XScriptPackage.COMPARISON_TYPE: return createComparisonType();
      case XScriptPackage.PLUS_TYPE: return createPlusType();
      case XScriptPackage.MINUS_TYPE: return createMinusType();
      case XScriptPackage.MUL_OR_DIV_TYPE: return createMulOrDivType();
      case XScriptPackage.NOT_TYPE: return createNotType();
      case XScriptPackage.DOUBLE_CONSTANT_TYPE: return createDoubleConstantType();
      case XScriptPackage.INT_CONSTANT_TYPE: return createIntConstantType();
      case XScriptPackage.STRING_CONSTANT_TYPE: return createStringConstantType();
      case XScriptPackage.BOOL_CONSTANT_TYPE: return createBoolConstantType();
      case XScriptPackage.TICK_EXPRESSION_TYPE: return createTickExpressionType();
      case XScriptPackage.XCLASS_TYPE: return createXClassType();
      case XScriptPackage.XOR_TYPE: return createXOrType();
      case XScriptPackage.XAND_TYPE: return createXAndType();
      case XScriptPackage.XEQUALITY_TYPE: return createXEqualityType();
      case XScriptPackage.XCOMPARISON_TYPE: return createXComparisonType();
      case XScriptPackage.XPLUS_TYPE: return createXPlusType();
      case XScriptPackage.XMINUS_TYPE: return createXMinusType();
      case XScriptPackage.XMUL_OR_DIV_TYPE: return createXMulOrDivType();
      case XScriptPackage.XNOT_TYPE: return createXNotType();
      case XScriptPackage.XDOUBLE_CONSTANT_TYPE: return createXDoubleConstantType();
      case XScriptPackage.XINT_CONSTANT_TYPE: return createXIntConstantType();
      case XScriptPackage.XSTRING_CONSTANT_TYPE: return createXStringConstantType();
      case XScriptPackage.XBOOL_CONSTANT_TYPE: return createXBoolConstantType();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case XScriptPackage.STREAM_TIME_UNIT:
        return createStreamTimeUnitFromString(eDataType, initialValue);
      case XScriptPackage.DATA_TYPE:
        return createDataTypeFromString(eDataType, initialValue);
      case XScriptPackage.XVALUE_VAR_HISTORICAL_AGG_FUNCTION:
        return createXValueVarHistoricalAggFunctionFromString(eDataType, initialValue);
      case XScriptPackage.XVALUE_VAR_SESSION_AGG_FUNCTION:
        return createXValueVarSessionAggFunctionFromString(eDataType, initialValue);
      case XScriptPackage.XSTREAM_OPERATOR:
        return createXStreamOperatorFromString(eDataType, initialValue);
      case XScriptPackage.XQUERY_VALUE_COMPARE_FUNCTION:
        return createXQueryValueCompareFunctionFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case XScriptPackage.STREAM_TIME_UNIT:
        return convertStreamTimeUnitToString(eDataType, instanceValue);
      case XScriptPackage.DATA_TYPE:
        return convertDataTypeToString(eDataType, instanceValue);
      case XScriptPackage.XVALUE_VAR_HISTORICAL_AGG_FUNCTION:
        return convertXValueVarHistoricalAggFunctionToString(eDataType, instanceValue);
      case XScriptPackage.XVALUE_VAR_SESSION_AGG_FUNCTION:
        return convertXValueVarSessionAggFunctionToString(eDataType, instanceValue);
      case XScriptPackage.XSTREAM_OPERATOR:
        return convertXStreamOperatorToString(eDataType, instanceValue);
      case XScriptPackage.XQUERY_VALUE_COMPARE_FUNCTION:
        return convertXQueryValueCompareFunctionToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XScript createXScript()
  {
    XScriptImpl xScript = new XScriptImpl();
    return xScript;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ScriptElement createScriptElement()
  {
    ScriptElementImpl scriptElement = new ScriptElementImpl();
    return scriptElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CoreAbstractElement createCoreAbstractElement()
  {
    CoreAbstractElementImpl coreAbstractElement = new CoreAbstractElementImpl();
    return coreAbstractElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarType createVarType()
  {
    VarTypeImpl varType = new VarTypeImpl();
    return varType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionType createExpressionType()
  {
    ExpressionTypeImpl expressionType = new ExpressionTypeImpl();
    return expressionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableValueRangeType createVariableValueRangeType()
  {
    VariableValueRangeTypeImpl variableValueRangeType = new VariableValueRangeTypeImpl();
    return variableValueRangeType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableValueType createVariableValueType()
  {
    VariableValueTypeImpl variableValueType = new VariableValueTypeImpl();
    return variableValueType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableValueExpType createVariableValueExpType()
  {
    VariableValueExpTypeImpl variableValueExpType = new VariableValueExpTypeImpl();
    return variableValueExpType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetExpressionType createSetExpressionType()
  {
    SetExpressionTypeImpl setExpressionType = new SetExpressionTypeImpl();
    return setExpressionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SnapshotExpressionType createSnapshotExpressionType()
  {
    SnapshotExpressionTypeImpl snapshotExpressionType = new SnapshotExpressionTypeImpl();
    return snapshotExpressionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RocExpressionType createRocExpressionType()
  {
    RocExpressionTypeImpl rocExpressionType = new RocExpressionTypeImpl();
    return rocExpressionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AvgExpressionType createAvgExpressionType()
  {
    AvgExpressionTypeImpl avgExpressionType = new AvgExpressionTypeImpl();
    return avgExpressionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubExpressionType createSubExpressionType()
  {
    SubExpressionTypeImpl subExpressionType = new SubExpressionTypeImpl();
    return subExpressionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SessionSignalExpressionType createSessionSignalExpressionType()
  {
    SessionSignalExpressionTypeImpl sessionSignalExpressionType = new SessionSignalExpressionTypeImpl();
    return sessionSignalExpressionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SignalType createSignalType()
  {
    SignalTypeImpl signalType = new SignalTypeImpl();
    return signalType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractElement createAbstractElement()
  {
    AbstractElementImpl abstractElement = new AbstractElementImpl();
    return abstractElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XClassElementType createXClassElementType()
  {
    XClassElementTypeImpl xClassElementType = new XClassElementTypeImpl();
    return xClassElementType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XClassCoreElementType createXClassCoreElementType()
  {
    XClassCoreElementTypeImpl xClassCoreElementType = new XClassCoreElementTypeImpl();
    return xClassCoreElementType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XVarType createXVarType()
  {
    XVarTypeImpl xVarType = new XVarTypeImpl();
    return xVarType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XFunctionType createXFunctionType()
  {
    XFunctionTypeImpl xFunctionType = new XFunctionTypeImpl();
    return xFunctionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XFunctionCoreElementType createXFunctionCoreElementType()
  {
    XFunctionCoreElementTypeImpl xFunctionCoreElementType = new XFunctionCoreElementTypeImpl();
    return xFunctionCoreElementType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XFunctionReturnType createXFunctionReturnType()
  {
    XFunctionReturnTypeImpl xFunctionReturnType = new XFunctionReturnTypeImpl();
    return xFunctionReturnType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XFunctionCallType createXFunctionCallType()
  {
    XFunctionCallTypeImpl xFunctionCallType = new XFunctionCallTypeImpl();
    return xFunctionCallType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XSignalListenerType createXSignalListenerType()
  {
    XSignalListenerTypeImpl xSignalListenerType = new XSignalListenerTypeImpl();
    return xSignalListenerType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XStreamVarListenerType createXStreamVarListenerType()
  {
    XStreamVarListenerTypeImpl xStreamVarListenerType = new XStreamVarListenerTypeImpl();
    return xStreamVarListenerType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XSignalTriggerType createXSignalTriggerType()
  {
    XSignalTriggerTypeImpl xSignalTriggerType = new XSignalTriggerTypeImpl();
    return xSignalTriggerType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XFunctionStartType createXFunctionStartType()
  {
    XFunctionStartTypeImpl xFunctionStartType = new XFunctionStartTypeImpl();
    return xFunctionStartType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XVarSetterType createXVarSetterType()
  {
    XVarSetterTypeImpl xVarSetterType = new XVarSetterTypeImpl();
    return xVarSetterType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XVarIncrementType createXVarIncrementType()
  {
    XVarIncrementTypeImpl xVarIncrementType = new XVarIncrementTypeImpl();
    return xVarIncrementType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XVarDecrementType createXVarDecrementType()
  {
    XVarDecrementTypeImpl xVarDecrementType = new XVarDecrementTypeImpl();
    return xVarDecrementType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XSetVarType createXSetVarType()
  {
    XSetVarTypeImpl xSetVarType = new XSetVarTypeImpl();
    return xSetVarType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XDebugType createXDebugType()
  {
    XDebugTypeImpl xDebugType = new XDebugTypeImpl();
    return xDebugType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XIfStatementType createXIfStatementType()
  {
    XIfStatementTypeImpl xIfStatementType = new XIfStatementTypeImpl();
    return xIfStatementType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XElseIfStatementType createXElseIfStatementType()
  {
    XElseIfStatementTypeImpl xElseIfStatementType = new XElseIfStatementTypeImpl();
    return xElseIfStatementType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XElseStatementType createXElseStatementType()
  {
    XElseStatementTypeImpl xElseStatementType = new XElseStatementTypeImpl();
    return xElseStatementType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XWhileType createXWhileType()
  {
    XWhileTypeImpl xWhileType = new XWhileTypeImpl();
    return xWhileType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XWhileBreakType createXWhileBreakType()
  {
    XWhileBreakTypeImpl xWhileBreakType = new XWhileBreakTypeImpl();
    return xWhileBreakType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XSleepType createXSleepType()
  {
    XSleepTypeImpl xSleepType = new XSleepTypeImpl();
    return xSleepType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XExpressionType createXExpressionType()
  {
    XExpressionTypeImpl xExpressionType = new XExpressionTypeImpl();
    return xExpressionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XPercentChangeExpType createXPercentChangeExpType()
  {
    XPercentChangeExpTypeImpl xPercentChangeExpType = new XPercentChangeExpTypeImpl();
    return xPercentChangeExpType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XSubExpType createXSubExpType()
  {
    XSubExpTypeImpl xSubExpType = new XSubExpTypeImpl();
    return xSubExpType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XVarExpType createXVarExpType()
  {
    XVarExpTypeImpl xVarExpType = new XVarExpTypeImpl();
    return xVarExpType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XStreamWrapperExpType createXStreamWrapperExpType()
  {
    XStreamWrapperExpTypeImpl xStreamWrapperExpType = new XStreamWrapperExpTypeImpl();
    return xStreamWrapperExpType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XStreamVarValueExpType createXStreamVarValueExpType()
  {
    XStreamVarValueExpTypeImpl xStreamVarValueExpType = new XStreamVarValueExpTypeImpl();
    return xStreamVarValueExpType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XFunctionCallExpType createXFunctionCallExpType()
  {
    XFunctionCallExpTypeImpl xFunctionCallExpType = new XFunctionCallExpTypeImpl();
    return xFunctionCallExpType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XVarStreakType createXVarStreakType()
  {
    XVarStreakTypeImpl xVarStreakType = new XVarStreakTypeImpl();
    return xVarStreakType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XVarStreakCompareType createXVarStreakCompareType()
  {
    XVarStreakCompareTypeImpl xVarStreakCompareType = new XVarStreakCompareTypeImpl();
    return xVarStreakCompareType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XVarStreakValueType createXVarStreakValueType()
  {
    XVarStreakValueTypeImpl xVarStreakValueType = new XVarStreakValueTypeImpl();
    return xVarStreakValueType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XVarCompareStreakType createXVarCompareStreakType()
  {
    XVarCompareStreakTypeImpl xVarCompareStreakType = new XVarCompareStreakTypeImpl();
    return xVarCompareStreakType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XSlrAvgExpType createXSlrAvgExpType()
  {
    XSlrAvgExpTypeImpl xSlrAvgExpType = new XSlrAvgExpTypeImpl();
    return xSlrAvgExpType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XLastSignalTriggerType createXLastSignalTriggerType()
  {
    XLastSignalTriggerTypeImpl xLastSignalTriggerType = new XLastSignalTriggerTypeImpl();
    return xLastSignalTriggerType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XSignalTriggerCountType createXSignalTriggerCountType()
  {
    XSignalTriggerCountTypeImpl xSignalTriggerCountType = new XSignalTriggerCountTypeImpl();
    return xSignalTriggerCountType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XVarianceAverageType createXVarianceAverageType()
  {
    XVarianceAverageTypeImpl xVarianceAverageType = new XVarianceAverageTypeImpl();
    return xVarianceAverageType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XVarianceMaxType createXVarianceMaxType()
  {
    XVarianceMaxTypeImpl xVarianceMaxType = new XVarianceMaxTypeImpl();
    return xVarianceMaxType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XRocExpType createXRocExpType()
  {
    XRocExpTypeImpl xRocExpType = new XRocExpTypeImpl();
    return xRocExpType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XTimeRange createXTimeRange()
  {
    XTimeRangeImpl xTimeRange = new XTimeRangeImpl();
    return xTimeRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XTimeRangeRelative createXTimeRangeRelative()
  {
    XTimeRangeRelativeImpl xTimeRangeRelative = new XTimeRangeRelativeImpl();
    return xTimeRangeRelative;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XValueType createXValueType()
  {
    XValueTypeImpl xValueType = new XValueTypeImpl();
    return xValueType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XValueSessionVarValueType createXValueSessionVarValueType()
  {
    XValueSessionVarValueTypeImpl xValueSessionVarValueType = new XValueSessionVarValueTypeImpl();
    return xValueSessionVarValueType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XValueSessionVarAggType createXValueSessionVarAggType()
  {
    XValueSessionVarAggTypeImpl xValueSessionVarAggType = new XValueSessionVarAggTypeImpl();
    return xValueSessionVarAggType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XValueSessionSignalCountType createXValueSessionSignalCountType()
  {
    XValueSessionSignalCountTypeImpl xValueSessionSignalCountType = new XValueSessionSignalCountTypeImpl();
    return xValueSessionSignalCountType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XValueHistoricalVarAggType createXValueHistoricalVarAggType()
  {
    XValueHistoricalVarAggTypeImpl xValueHistoricalVarAggType = new XValueHistoricalVarAggTypeImpl();
    return xValueHistoricalVarAggType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XValueHistoricalSignalCountType createXValueHistoricalSignalCountType()
  {
    XValueHistoricalSignalCountTypeImpl xValueHistoricalSignalCountType = new XValueHistoricalSignalCountTypeImpl();
    return xValueHistoricalSignalCountType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XQueryType createXQueryType()
  {
    XQueryTypeImpl xQueryType = new XQueryTypeImpl();
    return xQueryType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XQueryFilterType createXQueryFilterType()
  {
    XQueryFilterTypeImpl xQueryFilterType = new XQueryFilterTypeImpl();
    return xQueryFilterType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XQueryFilterValueType createXQueryFilterValueType()
  {
    XQueryFilterValueTypeImpl xQueryFilterValueType = new XQueryFilterValueTypeImpl();
    return xQueryFilterValueType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XQueryFilterValueCompareType createXQueryFilterValueCompareType()
  {
    XQueryFilterValueCompareTypeImpl xQueryFilterValueCompareType = new XQueryFilterValueCompareTypeImpl();
    return xQueryFilterValueCompareType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrType createOrType()
  {
    OrTypeImpl orType = new OrTypeImpl();
    return orType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AndType createAndType()
  {
    AndTypeImpl andType = new AndTypeImpl();
    return andType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EqualityType createEqualityType()
  {
    EqualityTypeImpl equalityType = new EqualityTypeImpl();
    return equalityType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComparisonType createComparisonType()
  {
    ComparisonTypeImpl comparisonType = new ComparisonTypeImpl();
    return comparisonType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PlusType createPlusType()
  {
    PlusTypeImpl plusType = new PlusTypeImpl();
    return plusType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MinusType createMinusType()
  {
    MinusTypeImpl minusType = new MinusTypeImpl();
    return minusType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MulOrDivType createMulOrDivType()
  {
    MulOrDivTypeImpl mulOrDivType = new MulOrDivTypeImpl();
    return mulOrDivType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotType createNotType()
  {
    NotTypeImpl notType = new NotTypeImpl();
    return notType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DoubleConstantType createDoubleConstantType()
  {
    DoubleConstantTypeImpl doubleConstantType = new DoubleConstantTypeImpl();
    return doubleConstantType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntConstantType createIntConstantType()
  {
    IntConstantTypeImpl intConstantType = new IntConstantTypeImpl();
    return intConstantType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringConstantType createStringConstantType()
  {
    StringConstantTypeImpl stringConstantType = new StringConstantTypeImpl();
    return stringConstantType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoolConstantType createBoolConstantType()
  {
    BoolConstantTypeImpl boolConstantType = new BoolConstantTypeImpl();
    return boolConstantType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TickExpressionType createTickExpressionType()
  {
    TickExpressionTypeImpl tickExpressionType = new TickExpressionTypeImpl();
    return tickExpressionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XClassType createXClassType()
  {
    XClassTypeImpl xClassType = new XClassTypeImpl();
    return xClassType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XOrType createXOrType()
  {
    XOrTypeImpl xOrType = new XOrTypeImpl();
    return xOrType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XAndType createXAndType()
  {
    XAndTypeImpl xAndType = new XAndTypeImpl();
    return xAndType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XEqualityType createXEqualityType()
  {
    XEqualityTypeImpl xEqualityType = new XEqualityTypeImpl();
    return xEqualityType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XComparisonType createXComparisonType()
  {
    XComparisonTypeImpl xComparisonType = new XComparisonTypeImpl();
    return xComparisonType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XPlusType createXPlusType()
  {
    XPlusTypeImpl xPlusType = new XPlusTypeImpl();
    return xPlusType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XMinusType createXMinusType()
  {
    XMinusTypeImpl xMinusType = new XMinusTypeImpl();
    return xMinusType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XMulOrDivType createXMulOrDivType()
  {
    XMulOrDivTypeImpl xMulOrDivType = new XMulOrDivTypeImpl();
    return xMulOrDivType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XNotType createXNotType()
  {
    XNotTypeImpl xNotType = new XNotTypeImpl();
    return xNotType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XDoubleConstantType createXDoubleConstantType()
  {
    XDoubleConstantTypeImpl xDoubleConstantType = new XDoubleConstantTypeImpl();
    return xDoubleConstantType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XIntConstantType createXIntConstantType()
  {
    XIntConstantTypeImpl xIntConstantType = new XIntConstantTypeImpl();
    return xIntConstantType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XStringConstantType createXStringConstantType()
  {
    XStringConstantTypeImpl xStringConstantType = new XStringConstantTypeImpl();
    return xStringConstantType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XBoolConstantType createXBoolConstantType()
  {
    XBoolConstantTypeImpl xBoolConstantType = new XBoolConstantTypeImpl();
    return xBoolConstantType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StreamTimeUnit createStreamTimeUnitFromString(EDataType eDataType, String initialValue)
  {
    StreamTimeUnit result = StreamTimeUnit.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertStreamTimeUnitToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataType createDataTypeFromString(EDataType eDataType, String initialValue)
  {
    DataType result = DataType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDataTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XValueVarHistoricalAggFunction createXValueVarHistoricalAggFunctionFromString(EDataType eDataType, String initialValue)
  {
    XValueVarHistoricalAggFunction result = XValueVarHistoricalAggFunction.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertXValueVarHistoricalAggFunctionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XValueVarSessionAggFunction createXValueVarSessionAggFunctionFromString(EDataType eDataType, String initialValue)
  {
    XValueVarSessionAggFunction result = XValueVarSessionAggFunction.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertXValueVarSessionAggFunctionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XStreamOperator createXStreamOperatorFromString(EDataType eDataType, String initialValue)
  {
    XStreamOperator result = XStreamOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertXStreamOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XQueryValueCompareFunction createXQueryValueCompareFunctionFromString(EDataType eDataType, String initialValue)
  {
    XQueryValueCompareFunction result = XQueryValueCompareFunction.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertXQueryValueCompareFunctionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XScriptPackage getXScriptPackage()
  {
    return (XScriptPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static XScriptPackage getPackage()
  {
    return XScriptPackage.eINSTANCE;
  }

} //XScriptFactoryImpl
