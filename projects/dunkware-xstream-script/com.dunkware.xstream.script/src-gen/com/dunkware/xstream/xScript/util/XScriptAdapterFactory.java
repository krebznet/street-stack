/**
 * generated by Xtext 2.21.0
 */
package com.dunkware.xstream.xScript.util;

import com.dunkware.xstream.xScript.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.dunkware.xstream.xScript.XScriptPackage
 * @generated
 */
public class XScriptAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static XScriptPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XScriptAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = XScriptPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XScriptSwitch<Adapter> modelSwitch =
    new XScriptSwitch<Adapter>()
    {
      @Override
      public Adapter caseXScript(XScript object)
      {
        return createXScriptAdapter();
      }
      @Override
      public Adapter caseScriptElement(ScriptElement object)
      {
        return createScriptElementAdapter();
      }
      @Override
      public Adapter caseCoreAbstractElement(CoreAbstractElement object)
      {
        return createCoreAbstractElementAdapter();
      }
      @Override
      public Adapter caseVarType(VarType object)
      {
        return createVarTypeAdapter();
      }
      @Override
      public Adapter caseExpressionType(ExpressionType object)
      {
        return createExpressionTypeAdapter();
      }
      @Override
      public Adapter caseVariableValueRangeType(VariableValueRangeType object)
      {
        return createVariableValueRangeTypeAdapter();
      }
      @Override
      public Adapter caseVariableValueType(VariableValueType object)
      {
        return createVariableValueTypeAdapter();
      }
      @Override
      public Adapter caseVariableValueExpType(VariableValueExpType object)
      {
        return createVariableValueExpTypeAdapter();
      }
      @Override
      public Adapter caseSetExpressionType(SetExpressionType object)
      {
        return createSetExpressionTypeAdapter();
      }
      @Override
      public Adapter caseSnapshotExpressionType(SnapshotExpressionType object)
      {
        return createSnapshotExpressionTypeAdapter();
      }
      @Override
      public Adapter caseRocExpressionType(RocExpressionType object)
      {
        return createRocExpressionTypeAdapter();
      }
      @Override
      public Adapter caseAvgExpressionType(AvgExpressionType object)
      {
        return createAvgExpressionTypeAdapter();
      }
      @Override
      public Adapter caseSubExpressionType(SubExpressionType object)
      {
        return createSubExpressionTypeAdapter();
      }
      @Override
      public Adapter caseSessionSignalExpressionType(SessionSignalExpressionType object)
      {
        return createSessionSignalExpressionTypeAdapter();
      }
      @Override
      public Adapter caseSignalType(SignalType object)
      {
        return createSignalTypeAdapter();
      }
      @Override
      public Adapter caseAbstractElement(AbstractElement object)
      {
        return createAbstractElementAdapter();
      }
      @Override
      public Adapter caseXClassElementType(XClassElementType object)
      {
        return createXClassElementTypeAdapter();
      }
      @Override
      public Adapter caseXClassCoreElementType(XClassCoreElementType object)
      {
        return createXClassCoreElementTypeAdapter();
      }
      @Override
      public Adapter caseXVarType(XVarType object)
      {
        return createXVarTypeAdapter();
      }
      @Override
      public Adapter caseXFunctionType(XFunctionType object)
      {
        return createXFunctionTypeAdapter();
      }
      @Override
      public Adapter caseXFunctionCoreElementType(XFunctionCoreElementType object)
      {
        return createXFunctionCoreElementTypeAdapter();
      }
      @Override
      public Adapter caseXFunctionReturnType(XFunctionReturnType object)
      {
        return createXFunctionReturnTypeAdapter();
      }
      @Override
      public Adapter caseXFunctionCallType(XFunctionCallType object)
      {
        return createXFunctionCallTypeAdapter();
      }
      @Override
      public Adapter caseXSignalListenerType(XSignalListenerType object)
      {
        return createXSignalListenerTypeAdapter();
      }
      @Override
      public Adapter caseXStreamVarListenerType(XStreamVarListenerType object)
      {
        return createXStreamVarListenerTypeAdapter();
      }
      @Override
      public Adapter caseXSignalTriggerType(XSignalTriggerType object)
      {
        return createXSignalTriggerTypeAdapter();
      }
      @Override
      public Adapter caseXFunctionStartType(XFunctionStartType object)
      {
        return createXFunctionStartTypeAdapter();
      }
      @Override
      public Adapter caseXVarSetterType(XVarSetterType object)
      {
        return createXVarSetterTypeAdapter();
      }
      @Override
      public Adapter caseXVarIncrementType(XVarIncrementType object)
      {
        return createXVarIncrementTypeAdapter();
      }
      @Override
      public Adapter caseXVarDecrementType(XVarDecrementType object)
      {
        return createXVarDecrementTypeAdapter();
      }
      @Override
      public Adapter caseXSetVarType(XSetVarType object)
      {
        return createXSetVarTypeAdapter();
      }
      @Override
      public Adapter caseXDebugType(XDebugType object)
      {
        return createXDebugTypeAdapter();
      }
      @Override
      public Adapter caseXIfStatementType(XIfStatementType object)
      {
        return createXIfStatementTypeAdapter();
      }
      @Override
      public Adapter caseXElseIfStatementType(XElseIfStatementType object)
      {
        return createXElseIfStatementTypeAdapter();
      }
      @Override
      public Adapter caseXElseStatementType(XElseStatementType object)
      {
        return createXElseStatementTypeAdapter();
      }
      @Override
      public Adapter caseXWhileType(XWhileType object)
      {
        return createXWhileTypeAdapter();
      }
      @Override
      public Adapter caseXWhileBreakType(XWhileBreakType object)
      {
        return createXWhileBreakTypeAdapter();
      }
      @Override
      public Adapter caseXSleepType(XSleepType object)
      {
        return createXSleepTypeAdapter();
      }
      @Override
      public Adapter caseXExpressionType(XExpressionType object)
      {
        return createXExpressionTypeAdapter();
      }
      @Override
      public Adapter caseXPercentChangeExpType(XPercentChangeExpType object)
      {
        return createXPercentChangeExpTypeAdapter();
      }
      @Override
      public Adapter caseXSubExpType(XSubExpType object)
      {
        return createXSubExpTypeAdapter();
      }
      @Override
      public Adapter caseXVarExpType(XVarExpType object)
      {
        return createXVarExpTypeAdapter();
      }
      @Override
      public Adapter caseXStreamWrapperExpType(XStreamWrapperExpType object)
      {
        return createXStreamWrapperExpTypeAdapter();
      }
      @Override
      public Adapter caseXStreamVarValueExpType(XStreamVarValueExpType object)
      {
        return createXStreamVarValueExpTypeAdapter();
      }
      @Override
      public Adapter caseXFunctionCallExpType(XFunctionCallExpType object)
      {
        return createXFunctionCallExpTypeAdapter();
      }
      @Override
      public Adapter caseXVarStreakType(XVarStreakType object)
      {
        return createXVarStreakTypeAdapter();
      }
      @Override
      public Adapter caseXVarStreakCompareType(XVarStreakCompareType object)
      {
        return createXVarStreakCompareTypeAdapter();
      }
      @Override
      public Adapter caseXVarStreakValueType(XVarStreakValueType object)
      {
        return createXVarStreakValueTypeAdapter();
      }
      @Override
      public Adapter caseXVarCompareStreakType(XVarCompareStreakType object)
      {
        return createXVarCompareStreakTypeAdapter();
      }
      @Override
      public Adapter caseXSlrAvgExpType(XSlrAvgExpType object)
      {
        return createXSlrAvgExpTypeAdapter();
      }
      @Override
      public Adapter caseXLastSignalTriggerType(XLastSignalTriggerType object)
      {
        return createXLastSignalTriggerTypeAdapter();
      }
      @Override
      public Adapter caseXSignalTriggerCountType(XSignalTriggerCountType object)
      {
        return createXSignalTriggerCountTypeAdapter();
      }
      @Override
      public Adapter caseXVarianceAverageType(XVarianceAverageType object)
      {
        return createXVarianceAverageTypeAdapter();
      }
      @Override
      public Adapter caseXVarianceMaxType(XVarianceMaxType object)
      {
        return createXVarianceMaxTypeAdapter();
      }
      @Override
      public Adapter caseXRocExpType(XRocExpType object)
      {
        return createXRocExpTypeAdapter();
      }
      @Override
      public Adapter caseXTimeRange(XTimeRange object)
      {
        return createXTimeRangeAdapter();
      }
      @Override
      public Adapter caseXTimeRangeRelative(XTimeRangeRelative object)
      {
        return createXTimeRangeRelativeAdapter();
      }
      @Override
      public Adapter caseXValueType(XValueType object)
      {
        return createXValueTypeAdapter();
      }
      @Override
      public Adapter caseXValueSessionVarValueType(XValueSessionVarValueType object)
      {
        return createXValueSessionVarValueTypeAdapter();
      }
      @Override
      public Adapter caseXValueSessionVarAggType(XValueSessionVarAggType object)
      {
        return createXValueSessionVarAggTypeAdapter();
      }
      @Override
      public Adapter caseXValueSessionSignalCountType(XValueSessionSignalCountType object)
      {
        return createXValueSessionSignalCountTypeAdapter();
      }
      @Override
      public Adapter caseXValueHistoricalVarAggType(XValueHistoricalVarAggType object)
      {
        return createXValueHistoricalVarAggTypeAdapter();
      }
      @Override
      public Adapter caseXValueHistoricalSignalCountType(XValueHistoricalSignalCountType object)
      {
        return createXValueHistoricalSignalCountTypeAdapter();
      }
      @Override
      public Adapter caseXQueryType(XQueryType object)
      {
        return createXQueryTypeAdapter();
      }
      @Override
      public Adapter caseXQueryFilterType(XQueryFilterType object)
      {
        return createXQueryFilterTypeAdapter();
      }
      @Override
      public Adapter caseXQueryFilterValueType(XQueryFilterValueType object)
      {
        return createXQueryFilterValueTypeAdapter();
      }
      @Override
      public Adapter caseXQueryFilterValueCompareType(XQueryFilterValueCompareType object)
      {
        return createXQueryFilterValueCompareTypeAdapter();
      }
      @Override
      public Adapter caseOrType(OrType object)
      {
        return createOrTypeAdapter();
      }
      @Override
      public Adapter caseAndType(AndType object)
      {
        return createAndTypeAdapter();
      }
      @Override
      public Adapter caseEqualityType(EqualityType object)
      {
        return createEqualityTypeAdapter();
      }
      @Override
      public Adapter caseComparisonType(ComparisonType object)
      {
        return createComparisonTypeAdapter();
      }
      @Override
      public Adapter casePlusType(PlusType object)
      {
        return createPlusTypeAdapter();
      }
      @Override
      public Adapter caseMinusType(MinusType object)
      {
        return createMinusTypeAdapter();
      }
      @Override
      public Adapter caseMulOrDivType(MulOrDivType object)
      {
        return createMulOrDivTypeAdapter();
      }
      @Override
      public Adapter caseNotType(NotType object)
      {
        return createNotTypeAdapter();
      }
      @Override
      public Adapter caseDoubleConstantType(DoubleConstantType object)
      {
        return createDoubleConstantTypeAdapter();
      }
      @Override
      public Adapter caseIntConstantType(IntConstantType object)
      {
        return createIntConstantTypeAdapter();
      }
      @Override
      public Adapter caseStringConstantType(StringConstantType object)
      {
        return createStringConstantTypeAdapter();
      }
      @Override
      public Adapter caseBoolConstantType(BoolConstantType object)
      {
        return createBoolConstantTypeAdapter();
      }
      @Override
      public Adapter caseTickExpressionType(TickExpressionType object)
      {
        return createTickExpressionTypeAdapter();
      }
      @Override
      public Adapter caseXClassType(XClassType object)
      {
        return createXClassTypeAdapter();
      }
      @Override
      public Adapter caseXOrType(XOrType object)
      {
        return createXOrTypeAdapter();
      }
      @Override
      public Adapter caseXAndType(XAndType object)
      {
        return createXAndTypeAdapter();
      }
      @Override
      public Adapter caseXEqualityType(XEqualityType object)
      {
        return createXEqualityTypeAdapter();
      }
      @Override
      public Adapter caseXComparisonType(XComparisonType object)
      {
        return createXComparisonTypeAdapter();
      }
      @Override
      public Adapter caseXPlusType(XPlusType object)
      {
        return createXPlusTypeAdapter();
      }
      @Override
      public Adapter caseXMinusType(XMinusType object)
      {
        return createXMinusTypeAdapter();
      }
      @Override
      public Adapter caseXMulOrDivType(XMulOrDivType object)
      {
        return createXMulOrDivTypeAdapter();
      }
      @Override
      public Adapter caseXNotType(XNotType object)
      {
        return createXNotTypeAdapter();
      }
      @Override
      public Adapter caseXDoubleConstantType(XDoubleConstantType object)
      {
        return createXDoubleConstantTypeAdapter();
      }
      @Override
      public Adapter caseXIntConstantType(XIntConstantType object)
      {
        return createXIntConstantTypeAdapter();
      }
      @Override
      public Adapter caseXStringConstantType(XStringConstantType object)
      {
        return createXStringConstantTypeAdapter();
      }
      @Override
      public Adapter caseXBoolConstantType(XBoolConstantType object)
      {
        return createXBoolConstantTypeAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XScript <em>XScript</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XScript
   * @generated
   */
  public Adapter createXScriptAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.ScriptElement <em>Script Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.ScriptElement
   * @generated
   */
  public Adapter createScriptElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.CoreAbstractElement <em>Core Abstract Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.CoreAbstractElement
   * @generated
   */
  public Adapter createCoreAbstractElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.VarType <em>Var Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.VarType
   * @generated
   */
  public Adapter createVarTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.ExpressionType <em>Expression Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.ExpressionType
   * @generated
   */
  public Adapter createExpressionTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.VariableValueRangeType <em>Variable Value Range Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.VariableValueRangeType
   * @generated
   */
  public Adapter createVariableValueRangeTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.VariableValueType <em>Variable Value Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.VariableValueType
   * @generated
   */
  public Adapter createVariableValueTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.VariableValueExpType <em>Variable Value Exp Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.VariableValueExpType
   * @generated
   */
  public Adapter createVariableValueExpTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.SetExpressionType <em>Set Expression Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.SetExpressionType
   * @generated
   */
  public Adapter createSetExpressionTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.SnapshotExpressionType <em>Snapshot Expression Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.SnapshotExpressionType
   * @generated
   */
  public Adapter createSnapshotExpressionTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.RocExpressionType <em>Roc Expression Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.RocExpressionType
   * @generated
   */
  public Adapter createRocExpressionTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.AvgExpressionType <em>Avg Expression Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.AvgExpressionType
   * @generated
   */
  public Adapter createAvgExpressionTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.SubExpressionType <em>Sub Expression Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.SubExpressionType
   * @generated
   */
  public Adapter createSubExpressionTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.SessionSignalExpressionType <em>Session Signal Expression Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.SessionSignalExpressionType
   * @generated
   */
  public Adapter createSessionSignalExpressionTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.SignalType <em>Signal Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.SignalType
   * @generated
   */
  public Adapter createSignalTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.AbstractElement <em>Abstract Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.AbstractElement
   * @generated
   */
  public Adapter createAbstractElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XClassElementType <em>XClass Element Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XClassElementType
   * @generated
   */
  public Adapter createXClassElementTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XClassCoreElementType <em>XClass Core Element Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XClassCoreElementType
   * @generated
   */
  public Adapter createXClassCoreElementTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XVarType <em>XVar Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XVarType
   * @generated
   */
  public Adapter createXVarTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XFunctionType <em>XFunction Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XFunctionType
   * @generated
   */
  public Adapter createXFunctionTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XFunctionCoreElementType <em>XFunction Core Element Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XFunctionCoreElementType
   * @generated
   */
  public Adapter createXFunctionCoreElementTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XFunctionReturnType <em>XFunction Return Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XFunctionReturnType
   * @generated
   */
  public Adapter createXFunctionReturnTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XFunctionCallType <em>XFunction Call Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XFunctionCallType
   * @generated
   */
  public Adapter createXFunctionCallTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XSignalListenerType <em>XSignal Listener Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XSignalListenerType
   * @generated
   */
  public Adapter createXSignalListenerTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XStreamVarListenerType <em>XStream Var Listener Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XStreamVarListenerType
   * @generated
   */
  public Adapter createXStreamVarListenerTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XSignalTriggerType <em>XSignal Trigger Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XSignalTriggerType
   * @generated
   */
  public Adapter createXSignalTriggerTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XFunctionStartType <em>XFunction Start Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XFunctionStartType
   * @generated
   */
  public Adapter createXFunctionStartTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XVarSetterType <em>XVar Setter Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XVarSetterType
   * @generated
   */
  public Adapter createXVarSetterTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XVarIncrementType <em>XVar Increment Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XVarIncrementType
   * @generated
   */
  public Adapter createXVarIncrementTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XVarDecrementType <em>XVar Decrement Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XVarDecrementType
   * @generated
   */
  public Adapter createXVarDecrementTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XSetVarType <em>XSet Var Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XSetVarType
   * @generated
   */
  public Adapter createXSetVarTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XDebugType <em>XDebug Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XDebugType
   * @generated
   */
  public Adapter createXDebugTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XIfStatementType <em>XIf Statement Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XIfStatementType
   * @generated
   */
  public Adapter createXIfStatementTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XElseIfStatementType <em>XElse If Statement Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XElseIfStatementType
   * @generated
   */
  public Adapter createXElseIfStatementTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XElseStatementType <em>XElse Statement Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XElseStatementType
   * @generated
   */
  public Adapter createXElseStatementTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XWhileType <em>XWhile Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XWhileType
   * @generated
   */
  public Adapter createXWhileTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XWhileBreakType <em>XWhile Break Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XWhileBreakType
   * @generated
   */
  public Adapter createXWhileBreakTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XSleepType <em>XSleep Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XSleepType
   * @generated
   */
  public Adapter createXSleepTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XExpressionType <em>XExpression Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XExpressionType
   * @generated
   */
  public Adapter createXExpressionTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XPercentChangeExpType <em>XPercent Change Exp Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XPercentChangeExpType
   * @generated
   */
  public Adapter createXPercentChangeExpTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XSubExpType <em>XSub Exp Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XSubExpType
   * @generated
   */
  public Adapter createXSubExpTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XVarExpType <em>XVar Exp Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XVarExpType
   * @generated
   */
  public Adapter createXVarExpTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XStreamWrapperExpType <em>XStream Wrapper Exp Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XStreamWrapperExpType
   * @generated
   */
  public Adapter createXStreamWrapperExpTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XStreamVarValueExpType <em>XStream Var Value Exp Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XStreamVarValueExpType
   * @generated
   */
  public Adapter createXStreamVarValueExpTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XFunctionCallExpType <em>XFunction Call Exp Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XFunctionCallExpType
   * @generated
   */
  public Adapter createXFunctionCallExpTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XVarStreakType <em>XVar Streak Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XVarStreakType
   * @generated
   */
  public Adapter createXVarStreakTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XVarStreakCompareType <em>XVar Streak Compare Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XVarStreakCompareType
   * @generated
   */
  public Adapter createXVarStreakCompareTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XVarStreakValueType <em>XVar Streak Value Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XVarStreakValueType
   * @generated
   */
  public Adapter createXVarStreakValueTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XVarCompareStreakType <em>XVar Compare Streak Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XVarCompareStreakType
   * @generated
   */
  public Adapter createXVarCompareStreakTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XSlrAvgExpType <em>XSlr Avg Exp Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XSlrAvgExpType
   * @generated
   */
  public Adapter createXSlrAvgExpTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XLastSignalTriggerType <em>XLast Signal Trigger Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XLastSignalTriggerType
   * @generated
   */
  public Adapter createXLastSignalTriggerTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XSignalTriggerCountType <em>XSignal Trigger Count Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XSignalTriggerCountType
   * @generated
   */
  public Adapter createXSignalTriggerCountTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XVarianceAverageType <em>XVariance Average Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XVarianceAverageType
   * @generated
   */
  public Adapter createXVarianceAverageTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XVarianceMaxType <em>XVariance Max Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XVarianceMaxType
   * @generated
   */
  public Adapter createXVarianceMaxTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XRocExpType <em>XRoc Exp Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XRocExpType
   * @generated
   */
  public Adapter createXRocExpTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XTimeRange <em>XTime Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XTimeRange
   * @generated
   */
  public Adapter createXTimeRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XTimeRangeRelative <em>XTime Range Relative</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XTimeRangeRelative
   * @generated
   */
  public Adapter createXTimeRangeRelativeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XValueType <em>XValue Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XValueType
   * @generated
   */
  public Adapter createXValueTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XValueSessionVarValueType <em>XValue Session Var Value Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XValueSessionVarValueType
   * @generated
   */
  public Adapter createXValueSessionVarValueTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XValueSessionVarAggType <em>XValue Session Var Agg Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XValueSessionVarAggType
   * @generated
   */
  public Adapter createXValueSessionVarAggTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XValueSessionSignalCountType <em>XValue Session Signal Count Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XValueSessionSignalCountType
   * @generated
   */
  public Adapter createXValueSessionSignalCountTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XValueHistoricalVarAggType <em>XValue Historical Var Agg Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XValueHistoricalVarAggType
   * @generated
   */
  public Adapter createXValueHistoricalVarAggTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XValueHistoricalSignalCountType <em>XValue Historical Signal Count Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XValueHistoricalSignalCountType
   * @generated
   */
  public Adapter createXValueHistoricalSignalCountTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XQueryType <em>XQuery Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XQueryType
   * @generated
   */
  public Adapter createXQueryTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XQueryFilterType <em>XQuery Filter Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XQueryFilterType
   * @generated
   */
  public Adapter createXQueryFilterTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XQueryFilterValueType <em>XQuery Filter Value Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XQueryFilterValueType
   * @generated
   */
  public Adapter createXQueryFilterValueTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XQueryFilterValueCompareType <em>XQuery Filter Value Compare Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XQueryFilterValueCompareType
   * @generated
   */
  public Adapter createXQueryFilterValueCompareTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.OrType <em>Or Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.OrType
   * @generated
   */
  public Adapter createOrTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.AndType <em>And Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.AndType
   * @generated
   */
  public Adapter createAndTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.EqualityType <em>Equality Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.EqualityType
   * @generated
   */
  public Adapter createEqualityTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.ComparisonType <em>Comparison Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.ComparisonType
   * @generated
   */
  public Adapter createComparisonTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.PlusType <em>Plus Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.PlusType
   * @generated
   */
  public Adapter createPlusTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.MinusType <em>Minus Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.MinusType
   * @generated
   */
  public Adapter createMinusTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.MulOrDivType <em>Mul Or Div Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.MulOrDivType
   * @generated
   */
  public Adapter createMulOrDivTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.NotType <em>Not Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.NotType
   * @generated
   */
  public Adapter createNotTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.DoubleConstantType <em>Double Constant Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.DoubleConstantType
   * @generated
   */
  public Adapter createDoubleConstantTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.IntConstantType <em>Int Constant Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.IntConstantType
   * @generated
   */
  public Adapter createIntConstantTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.StringConstantType <em>String Constant Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.StringConstantType
   * @generated
   */
  public Adapter createStringConstantTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.BoolConstantType <em>Bool Constant Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.BoolConstantType
   * @generated
   */
  public Adapter createBoolConstantTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.TickExpressionType <em>Tick Expression Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.TickExpressionType
   * @generated
   */
  public Adapter createTickExpressionTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XClassType <em>XClass Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XClassType
   * @generated
   */
  public Adapter createXClassTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XOrType <em>XOr Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XOrType
   * @generated
   */
  public Adapter createXOrTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XAndType <em>XAnd Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XAndType
   * @generated
   */
  public Adapter createXAndTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XEqualityType <em>XEquality Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XEqualityType
   * @generated
   */
  public Adapter createXEqualityTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XComparisonType <em>XComparison Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XComparisonType
   * @generated
   */
  public Adapter createXComparisonTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XPlusType <em>XPlus Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XPlusType
   * @generated
   */
  public Adapter createXPlusTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XMinusType <em>XMinus Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XMinusType
   * @generated
   */
  public Adapter createXMinusTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XMulOrDivType <em>XMul Or Div Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XMulOrDivType
   * @generated
   */
  public Adapter createXMulOrDivTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XNotType <em>XNot Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XNotType
   * @generated
   */
  public Adapter createXNotTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XDoubleConstantType <em>XDouble Constant Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XDoubleConstantType
   * @generated
   */
  public Adapter createXDoubleConstantTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XIntConstantType <em>XInt Constant Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XIntConstantType
   * @generated
   */
  public Adapter createXIntConstantTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XStringConstantType <em>XString Constant Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XStringConstantType
   * @generated
   */
  public Adapter createXStringConstantTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.dunkware.xstream.xScript.XBoolConstantType <em>XBool Constant Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.dunkware.xstream.xScript.XBoolConstantType
   * @generated
   */
  public Adapter createXBoolConstantTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //XScriptAdapterFactory
