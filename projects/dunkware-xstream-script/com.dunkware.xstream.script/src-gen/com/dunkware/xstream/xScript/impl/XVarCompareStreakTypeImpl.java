/**
 * generated by Xtext 2.31.0
 */
package com.dunkware.xstream.xScript.impl;

import com.dunkware.xstream.xScript.VarType;
import com.dunkware.xstream.xScript.XExpressionType;
import com.dunkware.xstream.xScript.XScriptPackage;
import com.dunkware.xstream.xScript.XVarCompareStreakType;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>XVar Compare Streak Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XVarCompareStreakTypeImpl#getTargetVar <em>Target Var</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XVarCompareStreakTypeImpl#getCompareVar <em>Compare Var</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XVarCompareStreakTypeImpl#getDirection <em>Direction</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XVarCompareStreakTypeImpl#getStartIndexExp <em>Start Index Exp</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XVarCompareStreakTypeImpl#getFunction <em>Function</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XVarCompareStreakTypeImpl#getOp <em>Op</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XVarCompareStreakTypeImpl#getTest <em>Test</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XVarCompareStreakTypeImpl extends XExpressionTypeImpl implements XVarCompareStreakType
{
  /**
   * The cached value of the '{@link #getTargetVar() <em>Target Var</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTargetVar()
   * @generated
   * @ordered
   */
  protected VarType targetVar;

  /**
   * The cached value of the '{@link #getCompareVar() <em>Compare Var</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompareVar()
   * @generated
   * @ordered
   */
  protected VarType compareVar;

  /**
   * The default value of the '{@link #getDirection() <em>Direction</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDirection()
   * @generated
   * @ordered
   */
  protected static final String DIRECTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDirection() <em>Direction</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDirection()
   * @generated
   * @ordered
   */
  protected String direction = DIRECTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getStartIndexExp() <em>Start Index Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartIndexExp()
   * @generated
   * @ordered
   */
  protected XExpressionType startIndexExp;

  /**
   * The default value of the '{@link #getFunction() <em>Function</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunction()
   * @generated
   * @ordered
   */
  protected static final String FUNCTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFunction() <em>Function</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunction()
   * @generated
   * @ordered
   */
  protected String function = FUNCTION_EDEFAULT;

  /**
   * The default value of the '{@link #getOp() <em>Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp()
   * @generated
   * @ordered
   */
  protected static final String OP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOp() <em>Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp()
   * @generated
   * @ordered
   */
  protected String op = OP_EDEFAULT;

  /**
   * The default value of the '{@link #getTest() <em>Test</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTest()
   * @generated
   * @ordered
   */
  protected static final double TEST_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getTest() <em>Test</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTest()
   * @generated
   * @ordered
   */
  protected double test = TEST_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XVarCompareStreakTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XScriptPackage.Literals.XVAR_COMPARE_STREAK_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarType getTargetVar()
  {
    if (targetVar != null && targetVar.eIsProxy())
    {
      InternalEObject oldTargetVar = (InternalEObject)targetVar;
      targetVar = (VarType)eResolveProxy(oldTargetVar);
      if (targetVar != oldTargetVar)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XScriptPackage.XVAR_COMPARE_STREAK_TYPE__TARGET_VAR, oldTargetVar, targetVar));
      }
    }
    return targetVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarType basicGetTargetVar()
  {
    return targetVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTargetVar(VarType newTargetVar)
  {
    VarType oldTargetVar = targetVar;
    targetVar = newTargetVar;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XVAR_COMPARE_STREAK_TYPE__TARGET_VAR, oldTargetVar, targetVar));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarType getCompareVar()
  {
    if (compareVar != null && compareVar.eIsProxy())
    {
      InternalEObject oldCompareVar = (InternalEObject)compareVar;
      compareVar = (VarType)eResolveProxy(oldCompareVar);
      if (compareVar != oldCompareVar)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XScriptPackage.XVAR_COMPARE_STREAK_TYPE__COMPARE_VAR, oldCompareVar, compareVar));
      }
    }
    return compareVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarType basicGetCompareVar()
  {
    return compareVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCompareVar(VarType newCompareVar)
  {
    VarType oldCompareVar = compareVar;
    compareVar = newCompareVar;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XVAR_COMPARE_STREAK_TYPE__COMPARE_VAR, oldCompareVar, compareVar));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDirection()
  {
    return direction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDirection(String newDirection)
  {
    String oldDirection = direction;
    direction = newDirection;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XVAR_COMPARE_STREAK_TYPE__DIRECTION, oldDirection, direction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XExpressionType getStartIndexExp()
  {
    return startIndexExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStartIndexExp(XExpressionType newStartIndexExp, NotificationChain msgs)
  {
    XExpressionType oldStartIndexExp = startIndexExp;
    startIndexExp = newStartIndexExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XScriptPackage.XVAR_COMPARE_STREAK_TYPE__START_INDEX_EXP, oldStartIndexExp, newStartIndexExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStartIndexExp(XExpressionType newStartIndexExp)
  {
    if (newStartIndexExp != startIndexExp)
    {
      NotificationChain msgs = null;
      if (startIndexExp != null)
        msgs = ((InternalEObject)startIndexExp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XVAR_COMPARE_STREAK_TYPE__START_INDEX_EXP, null, msgs);
      if (newStartIndexExp != null)
        msgs = ((InternalEObject)newStartIndexExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XVAR_COMPARE_STREAK_TYPE__START_INDEX_EXP, null, msgs);
      msgs = basicSetStartIndexExp(newStartIndexExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XVAR_COMPARE_STREAK_TYPE__START_INDEX_EXP, newStartIndexExp, newStartIndexExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFunction()
  {
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFunction(String newFunction)
  {
    String oldFunction = function;
    function = newFunction;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XVAR_COMPARE_STREAK_TYPE__FUNCTION, oldFunction, function));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOp()
  {
    return op;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOp(String newOp)
  {
    String oldOp = op;
    op = newOp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XVAR_COMPARE_STREAK_TYPE__OP, oldOp, op));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public double getTest()
  {
    return test;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTest(double newTest)
  {
    double oldTest = test;
    test = newTest;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XVAR_COMPARE_STREAK_TYPE__TEST, oldTest, test));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__START_INDEX_EXP:
        return basicSetStartIndexExp(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__TARGET_VAR:
        if (resolve) return getTargetVar();
        return basicGetTargetVar();
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__COMPARE_VAR:
        if (resolve) return getCompareVar();
        return basicGetCompareVar();
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__DIRECTION:
        return getDirection();
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__START_INDEX_EXP:
        return getStartIndexExp();
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__FUNCTION:
        return getFunction();
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__OP:
        return getOp();
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__TEST:
        return getTest();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__TARGET_VAR:
        setTargetVar((VarType)newValue);
        return;
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__COMPARE_VAR:
        setCompareVar((VarType)newValue);
        return;
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__DIRECTION:
        setDirection((String)newValue);
        return;
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__START_INDEX_EXP:
        setStartIndexExp((XExpressionType)newValue);
        return;
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__FUNCTION:
        setFunction((String)newValue);
        return;
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__OP:
        setOp((String)newValue);
        return;
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__TEST:
        setTest((Double)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__TARGET_VAR:
        setTargetVar((VarType)null);
        return;
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__COMPARE_VAR:
        setCompareVar((VarType)null);
        return;
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__DIRECTION:
        setDirection(DIRECTION_EDEFAULT);
        return;
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__START_INDEX_EXP:
        setStartIndexExp((XExpressionType)null);
        return;
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__FUNCTION:
        setFunction(FUNCTION_EDEFAULT);
        return;
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__OP:
        setOp(OP_EDEFAULT);
        return;
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__TEST:
        setTest(TEST_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__TARGET_VAR:
        return targetVar != null;
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__COMPARE_VAR:
        return compareVar != null;
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__DIRECTION:
        return DIRECTION_EDEFAULT == null ? direction != null : !DIRECTION_EDEFAULT.equals(direction);
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__START_INDEX_EXP:
        return startIndexExp != null;
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__FUNCTION:
        return FUNCTION_EDEFAULT == null ? function != null : !FUNCTION_EDEFAULT.equals(function);
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__OP:
        return OP_EDEFAULT == null ? op != null : !OP_EDEFAULT.equals(op);
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE__TEST:
        return test != TEST_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (direction: ");
    result.append(direction);
    result.append(", function: ");
    result.append(function);
    result.append(", op: ");
    result.append(op);
    result.append(", test: ");
    result.append(test);
    result.append(')');
    return result.toString();
  }

} //XVarCompareStreakTypeImpl
