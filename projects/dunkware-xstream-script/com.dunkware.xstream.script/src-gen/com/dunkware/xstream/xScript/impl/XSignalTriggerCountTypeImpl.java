/**
 * generated by Xtext 2.31.0
 */
package com.dunkware.xstream.xScript.impl;

import com.dunkware.xstream.xScript.SignalType;
import com.dunkware.xstream.xScript.XScriptPackage;
import com.dunkware.xstream.xScript.XSignalTriggerCountType;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>XSignal Trigger Count Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XSignalTriggerCountTypeImpl#getSignal <em>Signal</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XSignalTriggerCountTypeImpl#getLookback <em>Lookback</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XSignalTriggerCountTypeImpl extends XExpressionTypeImpl implements XSignalTriggerCountType
{
  /**
   * The cached value of the '{@link #getSignal() <em>Signal</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSignal()
   * @generated
   * @ordered
   */
  protected SignalType signal;

  /**
   * The default value of the '{@link #getLookback() <em>Lookback</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLookback()
   * @generated
   * @ordered
   */
  protected static final int LOOKBACK_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getLookback() <em>Lookback</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLookback()
   * @generated
   * @ordered
   */
  protected int lookback = LOOKBACK_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XSignalTriggerCountTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XScriptPackage.Literals.XSIGNAL_TRIGGER_COUNT_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SignalType getSignal()
  {
    if (signal != null && signal.eIsProxy())
    {
      InternalEObject oldSignal = (InternalEObject)signal;
      signal = (SignalType)eResolveProxy(oldSignal);
      if (signal != oldSignal)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XScriptPackage.XSIGNAL_TRIGGER_COUNT_TYPE__SIGNAL, oldSignal, signal));
      }
    }
    return signal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SignalType basicGetSignal()
  {
    return signal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSignal(SignalType newSignal)
  {
    SignalType oldSignal = signal;
    signal = newSignal;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XSIGNAL_TRIGGER_COUNT_TYPE__SIGNAL, oldSignal, signal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getLookback()
  {
    return lookback;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLookback(int newLookback)
  {
    int oldLookback = lookback;
    lookback = newLookback;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XSIGNAL_TRIGGER_COUNT_TYPE__LOOKBACK, oldLookback, lookback));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XScriptPackage.XSIGNAL_TRIGGER_COUNT_TYPE__SIGNAL:
        if (resolve) return getSignal();
        return basicGetSignal();
      case XScriptPackage.XSIGNAL_TRIGGER_COUNT_TYPE__LOOKBACK:
        return getLookback();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XScriptPackage.XSIGNAL_TRIGGER_COUNT_TYPE__SIGNAL:
        setSignal((SignalType)newValue);
        return;
      case XScriptPackage.XSIGNAL_TRIGGER_COUNT_TYPE__LOOKBACK:
        setLookback((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XSIGNAL_TRIGGER_COUNT_TYPE__SIGNAL:
        setSignal((SignalType)null);
        return;
      case XScriptPackage.XSIGNAL_TRIGGER_COUNT_TYPE__LOOKBACK:
        setLookback(LOOKBACK_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XSIGNAL_TRIGGER_COUNT_TYPE__SIGNAL:
        return signal != null;
      case XScriptPackage.XSIGNAL_TRIGGER_COUNT_TYPE__LOOKBACK:
        return lookback != LOOKBACK_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (lookback: ");
    result.append(lookback);
    result.append(')');
    return result.toString();
  }

} //XSignalTriggerCountTypeImpl
