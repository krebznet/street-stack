/**
 * generated by Xtext 2.21.0
 */
package com.dunkware.xstream.xScript.impl;

import com.dunkware.xstream.xScript.VarType;
import com.dunkware.xstream.xScript.XExpressionType;
import com.dunkware.xstream.xScript.XScriptPackage;
import com.dunkware.xstream.xScript.XStreamVarValueExpType;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>XStream Var Value Exp Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XStreamVarValueExpTypeImpl#getVar <em>Var</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XStreamVarValueExpTypeImpl#getExpressionValue <em>Expression Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XStreamVarValueExpTypeImpl extends XExpressionTypeImpl implements XStreamVarValueExpType
{
  /**
   * The cached value of the '{@link #getVar() <em>Var</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar()
   * @generated
   * @ordered
   */
  protected VarType var;

  /**
   * The cached value of the '{@link #getExpressionValue() <em>Expression Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionValue()
   * @generated
   * @ordered
   */
  protected XExpressionType expressionValue;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XStreamVarValueExpTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XScriptPackage.Literals.XSTREAM_VAR_VALUE_EXP_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarType getVar()
  {
    if (var != null && var.eIsProxy())
    {
      InternalEObject oldVar = (InternalEObject)var;
      var = (VarType)eResolveProxy(oldVar);
      if (var != oldVar)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XScriptPackage.XSTREAM_VAR_VALUE_EXP_TYPE__VAR, oldVar, var));
      }
    }
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarType basicGetVar()
  {
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVar(VarType newVar)
  {
    VarType oldVar = var;
    var = newVar;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XSTREAM_VAR_VALUE_EXP_TYPE__VAR, oldVar, var));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XExpressionType getExpressionValue()
  {
    return expressionValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpressionValue(XExpressionType newExpressionValue, NotificationChain msgs)
  {
    XExpressionType oldExpressionValue = expressionValue;
    expressionValue = newExpressionValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XScriptPackage.XSTREAM_VAR_VALUE_EXP_TYPE__EXPRESSION_VALUE, oldExpressionValue, newExpressionValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpressionValue(XExpressionType newExpressionValue)
  {
    if (newExpressionValue != expressionValue)
    {
      NotificationChain msgs = null;
      if (expressionValue != null)
        msgs = ((InternalEObject)expressionValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XSTREAM_VAR_VALUE_EXP_TYPE__EXPRESSION_VALUE, null, msgs);
      if (newExpressionValue != null)
        msgs = ((InternalEObject)newExpressionValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XSTREAM_VAR_VALUE_EXP_TYPE__EXPRESSION_VALUE, null, msgs);
      msgs = basicSetExpressionValue(newExpressionValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XSTREAM_VAR_VALUE_EXP_TYPE__EXPRESSION_VALUE, newExpressionValue, newExpressionValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XScriptPackage.XSTREAM_VAR_VALUE_EXP_TYPE__EXPRESSION_VALUE:
        return basicSetExpressionValue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XScriptPackage.XSTREAM_VAR_VALUE_EXP_TYPE__VAR:
        if (resolve) return getVar();
        return basicGetVar();
      case XScriptPackage.XSTREAM_VAR_VALUE_EXP_TYPE__EXPRESSION_VALUE:
        return getExpressionValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XScriptPackage.XSTREAM_VAR_VALUE_EXP_TYPE__VAR:
        setVar((VarType)newValue);
        return;
      case XScriptPackage.XSTREAM_VAR_VALUE_EXP_TYPE__EXPRESSION_VALUE:
        setExpressionValue((XExpressionType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XSTREAM_VAR_VALUE_EXP_TYPE__VAR:
        setVar((VarType)null);
        return;
      case XScriptPackage.XSTREAM_VAR_VALUE_EXP_TYPE__EXPRESSION_VALUE:
        setExpressionValue((XExpressionType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XSTREAM_VAR_VALUE_EXP_TYPE__VAR:
        return var != null;
      case XScriptPackage.XSTREAM_VAR_VALUE_EXP_TYPE__EXPRESSION_VALUE:
        return expressionValue != null;
    }
    return super.eIsSet(featureID);
  }

} //XStreamVarValueExpTypeImpl
