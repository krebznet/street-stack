/**
 * generated by Xtext 2.28.0
 */
package com.dunkware.xstream.xScript.impl;

import com.dunkware.xstream.xScript.SubExpressionType;
import com.dunkware.xstream.xScript.VariableValueType;
import com.dunkware.xstream.xScript.XScriptPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sub Expression Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.dunkware.xstream.xScript.impl.SubExpressionTypeImpl#getTarget <em>Target</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.SubExpressionTypeImpl#getCompare <em>Compare</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SubExpressionTypeImpl extends ExpressionTypeImpl implements SubExpressionType
{
  /**
   * The cached value of the '{@link #getTarget() <em>Target</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected VariableValueType target;

  /**
   * The cached value of the '{@link #getCompare() <em>Compare</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompare()
   * @generated
   * @ordered
   */
  protected VariableValueType compare;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SubExpressionTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XScriptPackage.Literals.SUB_EXPRESSION_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableValueType getTarget()
  {
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTarget(VariableValueType newTarget, NotificationChain msgs)
  {
    VariableValueType oldTarget = target;
    target = newTarget;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XScriptPackage.SUB_EXPRESSION_TYPE__TARGET, oldTarget, newTarget);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTarget(VariableValueType newTarget)
  {
    if (newTarget != target)
    {
      NotificationChain msgs = null;
      if (target != null)
        msgs = ((InternalEObject)target).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.SUB_EXPRESSION_TYPE__TARGET, null, msgs);
      if (newTarget != null)
        msgs = ((InternalEObject)newTarget).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.SUB_EXPRESSION_TYPE__TARGET, null, msgs);
      msgs = basicSetTarget(newTarget, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.SUB_EXPRESSION_TYPE__TARGET, newTarget, newTarget));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableValueType getCompare()
  {
    return compare;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCompare(VariableValueType newCompare, NotificationChain msgs)
  {
    VariableValueType oldCompare = compare;
    compare = newCompare;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XScriptPackage.SUB_EXPRESSION_TYPE__COMPARE, oldCompare, newCompare);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCompare(VariableValueType newCompare)
  {
    if (newCompare != compare)
    {
      NotificationChain msgs = null;
      if (compare != null)
        msgs = ((InternalEObject)compare).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.SUB_EXPRESSION_TYPE__COMPARE, null, msgs);
      if (newCompare != null)
        msgs = ((InternalEObject)newCompare).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.SUB_EXPRESSION_TYPE__COMPARE, null, msgs);
      msgs = basicSetCompare(newCompare, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.SUB_EXPRESSION_TYPE__COMPARE, newCompare, newCompare));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XScriptPackage.SUB_EXPRESSION_TYPE__TARGET:
        return basicSetTarget(null, msgs);
      case XScriptPackage.SUB_EXPRESSION_TYPE__COMPARE:
        return basicSetCompare(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XScriptPackage.SUB_EXPRESSION_TYPE__TARGET:
        return getTarget();
      case XScriptPackage.SUB_EXPRESSION_TYPE__COMPARE:
        return getCompare();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XScriptPackage.SUB_EXPRESSION_TYPE__TARGET:
        setTarget((VariableValueType)newValue);
        return;
      case XScriptPackage.SUB_EXPRESSION_TYPE__COMPARE:
        setCompare((VariableValueType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.SUB_EXPRESSION_TYPE__TARGET:
        setTarget((VariableValueType)null);
        return;
      case XScriptPackage.SUB_EXPRESSION_TYPE__COMPARE:
        setCompare((VariableValueType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.SUB_EXPRESSION_TYPE__TARGET:
        return target != null;
      case XScriptPackage.SUB_EXPRESSION_TYPE__COMPARE:
        return compare != null;
    }
    return super.eIsSet(featureID);
  }

} //SubExpressionTypeImpl
