/**
 * generated by Xtext 2.21.0
 */
package com.dunkware.xstream.xScript.impl;

import com.dunkware.xstream.xScript.SignalType;
import com.dunkware.xstream.xScript.XScriptPackage;
import com.dunkware.xstream.xScript.XTimeRange;
import com.dunkware.xstream.xScript.XValueSessionSignalCountType;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>XValue Session Signal Count Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XValueSessionSignalCountTypeImpl#getSignal <em>Signal</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XValueSessionSignalCountTypeImpl#getTimeRange <em>Time Range</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XValueSessionSignalCountTypeImpl#getValue <em>Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XValueSessionSignalCountTypeImpl extends XValueTypeImpl implements XValueSessionSignalCountType
{
  /**
   * The cached value of the '{@link #getSignal() <em>Signal</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSignal()
   * @generated
   * @ordered
   */
  protected SignalType signal;

  /**
   * The cached value of the '{@link #getTimeRange() <em>Time Range</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeRange()
   * @generated
   * @ordered
   */
  protected XTimeRange timeRange;

  /**
   * The default value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected static final int VALUE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected int value = VALUE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XValueSessionSignalCountTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XScriptPackage.Literals.XVALUE_SESSION_SIGNAL_COUNT_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SignalType getSignal()
  {
    if (signal != null && signal.eIsProxy())
    {
      InternalEObject oldSignal = (InternalEObject)signal;
      signal = (SignalType)eResolveProxy(oldSignal);
      if (signal != oldSignal)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XScriptPackage.XVALUE_SESSION_SIGNAL_COUNT_TYPE__SIGNAL, oldSignal, signal));
      }
    }
    return signal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SignalType basicGetSignal()
  {
    return signal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSignal(SignalType newSignal)
  {
    SignalType oldSignal = signal;
    signal = newSignal;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XVALUE_SESSION_SIGNAL_COUNT_TYPE__SIGNAL, oldSignal, signal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XTimeRange getTimeRange()
  {
    return timeRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTimeRange(XTimeRange newTimeRange, NotificationChain msgs)
  {
    XTimeRange oldTimeRange = timeRange;
    timeRange = newTimeRange;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XScriptPackage.XVALUE_SESSION_SIGNAL_COUNT_TYPE__TIME_RANGE, oldTimeRange, newTimeRange);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTimeRange(XTimeRange newTimeRange)
  {
    if (newTimeRange != timeRange)
    {
      NotificationChain msgs = null;
      if (timeRange != null)
        msgs = ((InternalEObject)timeRange).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XVALUE_SESSION_SIGNAL_COUNT_TYPE__TIME_RANGE, null, msgs);
      if (newTimeRange != null)
        msgs = ((InternalEObject)newTimeRange).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XVALUE_SESSION_SIGNAL_COUNT_TYPE__TIME_RANGE, null, msgs);
      msgs = basicSetTimeRange(newTimeRange, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XVALUE_SESSION_SIGNAL_COUNT_TYPE__TIME_RANGE, newTimeRange, newTimeRange));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValue(int newValue)
  {
    int oldValue = value;
    value = newValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XVALUE_SESSION_SIGNAL_COUNT_TYPE__VALUE, oldValue, value));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XScriptPackage.XVALUE_SESSION_SIGNAL_COUNT_TYPE__TIME_RANGE:
        return basicSetTimeRange(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XScriptPackage.XVALUE_SESSION_SIGNAL_COUNT_TYPE__SIGNAL:
        if (resolve) return getSignal();
        return basicGetSignal();
      case XScriptPackage.XVALUE_SESSION_SIGNAL_COUNT_TYPE__TIME_RANGE:
        return getTimeRange();
      case XScriptPackage.XVALUE_SESSION_SIGNAL_COUNT_TYPE__VALUE:
        return getValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XScriptPackage.XVALUE_SESSION_SIGNAL_COUNT_TYPE__SIGNAL:
        setSignal((SignalType)newValue);
        return;
      case XScriptPackage.XVALUE_SESSION_SIGNAL_COUNT_TYPE__TIME_RANGE:
        setTimeRange((XTimeRange)newValue);
        return;
      case XScriptPackage.XVALUE_SESSION_SIGNAL_COUNT_TYPE__VALUE:
        setValue((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XVALUE_SESSION_SIGNAL_COUNT_TYPE__SIGNAL:
        setSignal((SignalType)null);
        return;
      case XScriptPackage.XVALUE_SESSION_SIGNAL_COUNT_TYPE__TIME_RANGE:
        setTimeRange((XTimeRange)null);
        return;
      case XScriptPackage.XVALUE_SESSION_SIGNAL_COUNT_TYPE__VALUE:
        setValue(VALUE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XVALUE_SESSION_SIGNAL_COUNT_TYPE__SIGNAL:
        return signal != null;
      case XScriptPackage.XVALUE_SESSION_SIGNAL_COUNT_TYPE__TIME_RANGE:
        return timeRange != null;
      case XScriptPackage.XVALUE_SESSION_SIGNAL_COUNT_TYPE__VALUE:
        return value != VALUE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (value: ");
    result.append(value);
    result.append(')');
    return result.toString();
  }

} //XValueSessionSignalCountTypeImpl
