/**
 * generated by Xtext 2.21.0
 */
package com.dunkware.xstream.xScript.impl;

import com.dunkware.xstream.xScript.XScriptPackage;
import com.dunkware.xstream.xScript.XVarExpType;
import com.dunkware.xstream.xScript.XVarType;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>XVar Exp Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XVarExpTypeImpl#getExpVar <em>Exp Var</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XVarExpTypeImpl extends XExpressionTypeImpl implements XVarExpType
{
  /**
   * The cached value of the '{@link #getExpVar() <em>Exp Var</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpVar()
   * @generated
   * @ordered
   */
  protected XVarType expVar;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XVarExpTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XScriptPackage.Literals.XVAR_EXP_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XVarType getExpVar()
  {
    if (expVar != null && expVar.eIsProxy())
    {
      InternalEObject oldExpVar = (InternalEObject)expVar;
      expVar = (XVarType)eResolveProxy(oldExpVar);
      if (expVar != oldExpVar)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XScriptPackage.XVAR_EXP_TYPE__EXP_VAR, oldExpVar, expVar));
      }
    }
    return expVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XVarType basicGetExpVar()
  {
    return expVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpVar(XVarType newExpVar)
  {
    XVarType oldExpVar = expVar;
    expVar = newExpVar;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XVAR_EXP_TYPE__EXP_VAR, oldExpVar, expVar));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XScriptPackage.XVAR_EXP_TYPE__EXP_VAR:
        if (resolve) return getExpVar();
        return basicGetExpVar();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XScriptPackage.XVAR_EXP_TYPE__EXP_VAR:
        setExpVar((XVarType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XVAR_EXP_TYPE__EXP_VAR:
        setExpVar((XVarType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XVAR_EXP_TYPE__EXP_VAR:
        return expVar != null;
    }
    return super.eIsSet(featureID);
  }

} //XVarExpTypeImpl
