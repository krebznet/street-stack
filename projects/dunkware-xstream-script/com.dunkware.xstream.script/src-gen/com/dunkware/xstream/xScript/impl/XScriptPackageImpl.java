/**
 * generated by Xtext 2.21.0
 */
package com.dunkware.xstream.xScript.impl;

import com.dunkware.xstream.xScript.AbstractElement;
import com.dunkware.xstream.xScript.AndType;
import com.dunkware.xstream.xScript.AvgExpressionType;
import com.dunkware.xstream.xScript.BoolConstantType;
import com.dunkware.xstream.xScript.ComparisonType;
import com.dunkware.xstream.xScript.CoreAbstractElement;
import com.dunkware.xstream.xScript.DataType;
import com.dunkware.xstream.xScript.DoubleConstantType;
import com.dunkware.xstream.xScript.EqualityType;
import com.dunkware.xstream.xScript.ExpressionType;
import com.dunkware.xstream.xScript.HistoricalAggFunc;
import com.dunkware.xstream.xScript.HistoryTimeRange;
import com.dunkware.xstream.xScript.IntConstantType;
import com.dunkware.xstream.xScript.MinusType;
import com.dunkware.xstream.xScript.MulOrDivType;
import com.dunkware.xstream.xScript.NotType;
import com.dunkware.xstream.xScript.OrType;
import com.dunkware.xstream.xScript.PlusType;
import com.dunkware.xstream.xScript.RelativeSessionTimeRange;
import com.dunkware.xstream.xScript.RocExpressionType;
import com.dunkware.xstream.xScript.ScriptElement;
import com.dunkware.xstream.xScript.SessionAggFunc;
import com.dunkware.xstream.xScript.SessionTimeRange;
import com.dunkware.xstream.xScript.SessionTimeUnit;
import com.dunkware.xstream.xScript.SetExpressionType;
import com.dunkware.xstream.xScript.SignalCountHistory;
import com.dunkware.xstream.xScript.SignalCountSession;
import com.dunkware.xstream.xScript.SignalType;
import com.dunkware.xstream.xScript.SnapshotExpressionType;
import com.dunkware.xstream.xScript.StreamTimeUnit;
import com.dunkware.xstream.xScript.StringConstantType;
import com.dunkware.xstream.xScript.SubExpressionType;
import com.dunkware.xstream.xScript.TickExpressionType;
import com.dunkware.xstream.xScript.TodaySessionTimeRange;
import com.dunkware.xstream.xScript.VarAggHistoryType;
import com.dunkware.xstream.xScript.VarAggSessionType;
import com.dunkware.xstream.xScript.VarStoreType;
import com.dunkware.xstream.xScript.VarTransType;
import com.dunkware.xstream.xScript.VarType;
import com.dunkware.xstream.xScript.VariableValueExpType;
import com.dunkware.xstream.xScript.VariableValueRangeType;
import com.dunkware.xstream.xScript.VariableValueType;
import com.dunkware.xstream.xScript.XAndType;
import com.dunkware.xstream.xScript.XBoolConstantType;
import com.dunkware.xstream.xScript.XClassCoreElementType;
import com.dunkware.xstream.xScript.XClassElementType;
import com.dunkware.xstream.xScript.XClassType;
import com.dunkware.xstream.xScript.XComparisonType;
import com.dunkware.xstream.xScript.XDebugType;
import com.dunkware.xstream.xScript.XDoubleConstantType;
import com.dunkware.xstream.xScript.XElseIfStatementType;
import com.dunkware.xstream.xScript.XElseStatementType;
import com.dunkware.xstream.xScript.XEqualityType;
import com.dunkware.xstream.xScript.XExpressionType;
import com.dunkware.xstream.xScript.XFunctionCallExpType;
import com.dunkware.xstream.xScript.XFunctionCallType;
import com.dunkware.xstream.xScript.XFunctionCoreElementType;
import com.dunkware.xstream.xScript.XFunctionReturnType;
import com.dunkware.xstream.xScript.XFunctionStartType;
import com.dunkware.xstream.xScript.XFunctionType;
import com.dunkware.xstream.xScript.XIfStatementType;
import com.dunkware.xstream.xScript.XIntConstantType;
import com.dunkware.xstream.xScript.XLastSignalTriggerType;
import com.dunkware.xstream.xScript.XMinusType;
import com.dunkware.xstream.xScript.XMulOrDivType;
import com.dunkware.xstream.xScript.XNotType;
import com.dunkware.xstream.xScript.XOrType;
import com.dunkware.xstream.xScript.XPercentChangeExpType;
import com.dunkware.xstream.xScript.XPlusType;
import com.dunkware.xstream.xScript.XRocExpType;
import com.dunkware.xstream.xScript.XScript;
import com.dunkware.xstream.xScript.XScriptFactory;
import com.dunkware.xstream.xScript.XScriptPackage;
import com.dunkware.xstream.xScript.XSetVarType;
import com.dunkware.xstream.xScript.XSignalListenerType;
import com.dunkware.xstream.xScript.XSignalTriggerCountType;
import com.dunkware.xstream.xScript.XSignalTriggerType;
import com.dunkware.xstream.xScript.XSleepType;
import com.dunkware.xstream.xScript.XSlrAvgExpType;
import com.dunkware.xstream.xScript.XStreamVarListenerType;
import com.dunkware.xstream.xScript.XStreamVarValueExpType;
import com.dunkware.xstream.xScript.XStreamWrapperExpType;
import com.dunkware.xstream.xScript.XStringConstantType;
import com.dunkware.xstream.xScript.XSubExpType;
import com.dunkware.xstream.xScript.XVarCompareStreakType;
import com.dunkware.xstream.xScript.XVarDecrementType;
import com.dunkware.xstream.xScript.XVarExpType;
import com.dunkware.xstream.xScript.XVarIncrementType;
import com.dunkware.xstream.xScript.XVarSetterType;
import com.dunkware.xstream.xScript.XVarStreakCompareType;
import com.dunkware.xstream.xScript.XVarStreakType;
import com.dunkware.xstream.xScript.XVarStreakValueType;
import com.dunkware.xstream.xScript.XVarType;
import com.dunkware.xstream.xScript.XVarianceAverageType;
import com.dunkware.xstream.xScript.XVarianceMaxType;
import com.dunkware.xstream.xScript.XWhileBreakType;
import com.dunkware.xstream.xScript.XWhileType;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class XScriptPackageImpl extends EPackageImpl implements XScriptPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xScriptEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass scriptElementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass coreAbstractElementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass varTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass varStoreTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass varTransTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass expressionTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableValueRangeTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableValueTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableValueExpTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass setExpressionTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass snapshotExpressionTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass rocExpressionTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass avgExpressionTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass subExpressionTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass historyTimeRangeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sessionTimeRangeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass relativeSessionTimeRangeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass todaySessionTimeRangeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass varAggSessionTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass varAggHistoryTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass signalCountSessionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass signalCountHistoryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass signalTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass abstractElementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xClassElementTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xClassCoreElementTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xVarTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xFunctionTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xFunctionCoreElementTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xFunctionReturnTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xFunctionCallTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xSignalListenerTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xStreamVarListenerTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xSignalTriggerTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xFunctionStartTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xVarSetterTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xVarIncrementTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xVarDecrementTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xSetVarTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xDebugTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xIfStatementTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xElseIfStatementTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xElseStatementTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xWhileTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xWhileBreakTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xSleepTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xExpressionTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xPercentChangeExpTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xSubExpTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xVarExpTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xStreamWrapperExpTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xStreamVarValueExpTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xFunctionCallExpTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xVarStreakTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xVarStreakCompareTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xVarStreakValueTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xVarCompareStreakTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xSlrAvgExpTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xLastSignalTriggerTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xSignalTriggerCountTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xVarianceAverageTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xVarianceMaxTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xRocExpTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass orTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass andTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass equalityTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass comparisonTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass plusTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass minusTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass mulOrDivTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass notTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass doubleConstantTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass intConstantTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stringConstantTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass boolConstantTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass tickExpressionTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xClassTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xOrTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xAndTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xEqualityTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xComparisonTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xPlusTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xMinusTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xMulOrDivTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xNotTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xDoubleConstantTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xIntConstantTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xStringConstantTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass xBoolConstantTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum historicalAggFuncEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum sessionAggFuncEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum sessionTimeUnitEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum streamTimeUnitEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum dataTypeEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see com.dunkware.xstream.xScript.XScriptPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private XScriptPackageImpl()
  {
    super(eNS_URI, XScriptFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link XScriptPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static XScriptPackage init()
  {
    if (isInited) return (XScriptPackage)EPackage.Registry.INSTANCE.getEPackage(XScriptPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredXScriptPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    XScriptPackageImpl theXScriptPackage = registeredXScriptPackage instanceof XScriptPackageImpl ? (XScriptPackageImpl)registeredXScriptPackage : new XScriptPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theXScriptPackage.createPackageContents();

    // Initialize created meta-data
    theXScriptPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theXScriptPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(XScriptPackage.eNS_URI, theXScriptPackage);
    return theXScriptPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXScript()
  {
    return xScriptEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXScript_Elements()
  {
    return (EReference)xScriptEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getScriptElement()
  {
    return scriptElementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCoreAbstractElement()
  {
    return coreAbstractElementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVarType()
  {
    return varTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVarType_Name()
  {
    return (EAttribute)varTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVarType_Code()
  {
    return (EAttribute)varTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVarType_Type()
  {
    return (EAttribute)varTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVarType_Expression()
  {
    return (EReference)varTypeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVarStoreType()
  {
    return varStoreTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVarTransType()
  {
    return varTransTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getExpressionType()
  {
    return expressionTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVariableValueRangeType()
  {
    return variableValueRangeTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVariableValueRangeType_TargetVar()
  {
    return (EReference)variableValueRangeTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVariableValueRangeType_StartIndex()
  {
    return (EAttribute)variableValueRangeTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVariableValueRangeType_EndIndex()
  {
    return (EAttribute)variableValueRangeTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVariableValueType()
  {
    return variableValueTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVariableValueType_Variable()
  {
    return (EReference)variableValueTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVariableValueType_IndexInt()
  {
    return (EAttribute)variableValueTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVariableValueType_ExpType()
  {
    return (EReference)variableValueTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVariableValueExpType()
  {
    return variableValueExpTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVariableValueExpType_ExpType()
  {
    return (EReference)variableValueExpTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSetExpressionType()
  {
    return setExpressionTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSetExpressionType_Args()
  {
    return (EReference)setExpressionTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSnapshotExpressionType()
  {
    return snapshotExpressionTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSnapshotExpressionType_Target()
  {
    return (EReference)snapshotExpressionTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSnapshotExpressionType_Interval()
  {
    return (EAttribute)snapshotExpressionTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSnapshotExpressionType_Time()
  {
    return (EAttribute)snapshotExpressionTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRocExpressionType()
  {
    return rocExpressionTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRocExpressionType_Target()
  {
    return (EReference)rocExpressionTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRocExpressionType_Compare()
  {
    return (EReference)rocExpressionTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAvgExpressionType()
  {
    return avgExpressionTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAvgExpressionType_Target()
  {
    return (EReference)avgExpressionTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSubExpressionType()
  {
    return subExpressionTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSubExpressionType_Target()
  {
    return (EReference)subExpressionTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSubExpressionType_Compare()
  {
    return (EReference)subExpressionTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getHistoryTimeRange()
  {
    return historyTimeRangeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getHistoryTimeRange_Value()
  {
    return (EAttribute)historyTimeRangeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSessionTimeRange()
  {
    return sessionTimeRangeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRelativeSessionTimeRange()
  {
    return relativeSessionTimeRangeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRelativeSessionTimeRange_RelativeVale()
  {
    return (EAttribute)relativeSessionTimeRangeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getRelativeSessionTimeRange_TimeUnit()
  {
    return (EAttribute)relativeSessionTimeRangeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTodaySessionTimeRange()
  {
    return todaySessionTimeRangeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVarAggSessionType()
  {
    return varAggSessionTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVarAggSessionType_Var()
  {
    return (EReference)varAggSessionTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVarAggSessionType_Function()
  {
    return (EAttribute)varAggSessionTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVarAggSessionType_TimeRange()
  {
    return (EReference)varAggSessionTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVarAggHistoryType()
  {
    return varAggHistoryTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVarAggHistoryType_Var()
  {
    return (EReference)varAggHistoryTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVarAggHistoryType_Function()
  {
    return (EAttribute)varAggHistoryTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVarAggHistoryType_TimeRange()
  {
    return (EReference)varAggHistoryTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSignalCountSession()
  {
    return signalCountSessionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSignalCountSession_Signal()
  {
    return (EReference)signalCountSessionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSignalCountSession_TimeRange()
  {
    return (EReference)signalCountSessionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSignalCountHistory()
  {
    return signalCountHistoryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSignalCountHistory_Signal()
  {
    return (EReference)signalCountHistoryEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSignalCountHistory_TimeRange()
  {
    return (EReference)signalCountHistoryEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSignalType()
  {
    return signalTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSignalType_Name()
  {
    return (EAttribute)signalTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSignalType_Id()
  {
    return (EAttribute)signalTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAbstractElement()
  {
    return abstractElementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXClassElementType()
  {
    return xClassElementTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXClassCoreElementType()
  {
    return xClassCoreElementTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXClassCoreElementType_Name()
  {
    return (EAttribute)xClassCoreElementTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXVarType()
  {
    return xVarTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXVarType_Exp()
  {
    return (EReference)xVarTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXFunctionType()
  {
    return xFunctionTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXFunctionType_Params()
  {
    return (EReference)xFunctionTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXFunctionType_Elements()
  {
    return (EReference)xFunctionTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXFunctionCoreElementType()
  {
    return xFunctionCoreElementTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXFunctionReturnType()
  {
    return xFunctionReturnTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXFunctionReturnType_ReturnValue()
  {
    return (EReference)xFunctionReturnTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXFunctionCallType()
  {
    return xFunctionCallTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXFunctionCallType_Function()
  {
    return (EReference)xFunctionCallTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXFunctionCallType_Params()
  {
    return (EAttribute)xFunctionCallTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXSignalListenerType()
  {
    return xSignalListenerTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXSignalListenerType_SignalType()
  {
    return (EReference)xSignalListenerTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXSignalListenerType_Function()
  {
    return (EReference)xSignalListenerTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXStreamVarListenerType()
  {
    return xStreamVarListenerTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXStreamVarListenerType_Column()
  {
    return (EReference)xStreamVarListenerTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXStreamVarListenerType_Function()
  {
    return (EReference)xStreamVarListenerTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXSignalTriggerType()
  {
    return xSignalTriggerTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXSignalTriggerType_Signal()
  {
    return (EReference)xSignalTriggerTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXFunctionStartType()
  {
    return xFunctionStartTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXFunctionStartType_Function()
  {
    return (EReference)xFunctionStartTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXFunctionStartType_Interval()
  {
    return (EAttribute)xFunctionStartTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXFunctionStartType_Time()
  {
    return (EAttribute)xFunctionStartTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXVarSetterType()
  {
    return xVarSetterTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXVarSetterType_Var()
  {
    return (EReference)xVarSetterTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXVarSetterType_Exp()
  {
    return (EReference)xVarSetterTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXVarIncrementType()
  {
    return xVarIncrementTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXVarIncrementType_Var()
  {
    return (EReference)xVarIncrementTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXVarDecrementType()
  {
    return xVarDecrementTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXVarDecrementType_Var()
  {
    return (EReference)xVarDecrementTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXSetVarType()
  {
    return xSetVarTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXSetVarType_Var()
  {
    return (EReference)xSetVarTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXSetVarType_Value()
  {
    return (EReference)xSetVarTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXDebugType()
  {
    return xDebugTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXDebugType_Args()
  {
    return (EReference)xDebugTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXIfStatementType()
  {
    return xIfStatementTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXIfStatementType_Expression()
  {
    return (EReference)xIfStatementTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXIfStatementType_Elements()
  {
    return (EReference)xIfStatementTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXIfStatementType_ElseIfElements()
  {
    return (EReference)xIfStatementTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXIfStatementType_ElseElement()
  {
    return (EReference)xIfStatementTypeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXElseIfStatementType()
  {
    return xElseIfStatementTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXElseIfStatementType_Expression()
  {
    return (EReference)xElseIfStatementTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXElseIfStatementType_Elements()
  {
    return (EReference)xElseIfStatementTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXElseStatementType()
  {
    return xElseStatementTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXElseStatementType_Elements()
  {
    return (EReference)xElseStatementTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXWhileType()
  {
    return xWhileTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXWhileType_Expression()
  {
    return (EReference)xWhileTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXWhileType_Elements()
  {
    return (EReference)xWhileTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXWhileBreakType()
  {
    return xWhileBreakTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXSleepType()
  {
    return xSleepTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXSleepType_Interval()
  {
    return (EAttribute)xSleepTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXSleepType_Unit()
  {
    return (EAttribute)xSleepTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXExpressionType()
  {
    return xExpressionTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXPercentChangeExpType()
  {
    return xPercentChangeExpTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXPercentChangeExpType_Value1()
  {
    return (EReference)xPercentChangeExpTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXPercentChangeExpType_Value2()
  {
    return (EReference)xPercentChangeExpTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXSubExpType()
  {
    return xSubExpTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXSubExpType_Value1()
  {
    return (EReference)xSubExpTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXSubExpType_Value2()
  {
    return (EReference)xSubExpTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXVarExpType()
  {
    return xVarExpTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXVarExpType_ExpVar()
  {
    return (EReference)xVarExpTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXStreamWrapperExpType()
  {
    return xStreamWrapperExpTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXStreamWrapperExpType_WrapperExp()
  {
    return (EReference)xStreamWrapperExpTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXStreamVarValueExpType()
  {
    return xStreamVarValueExpTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXStreamVarValueExpType_Var()
  {
    return (EReference)xStreamVarValueExpTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXStreamVarValueExpType_ExpressionValue()
  {
    return (EReference)xStreamVarValueExpTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXFunctionCallExpType()
  {
    return xFunctionCallExpTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXFunctionCallExpType_Function()
  {
    return (EReference)xFunctionCallExpTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXFunctionCallExpType_Parms()
  {
    return (EAttribute)xFunctionCallExpTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXVarStreakType()
  {
    return xVarStreakTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXVarStreakType_Var()
  {
    return (EReference)xVarStreakTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXVarStreakType_Direction()
  {
    return (EAttribute)xVarStreakTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXVarStreakType_StartIndexExp()
  {
    return (EReference)xVarStreakTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXVarStreakType_Compare()
  {
    return (EReference)xVarStreakTypeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXVarStreakType_Value()
  {
    return (EReference)xVarStreakTypeEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXVarStreakCompareType()
  {
    return xVarStreakCompareTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXVarStreakCompareType_Function()
  {
    return (EAttribute)xVarStreakCompareTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXVarStreakCompareType_Offset()
  {
    return (EAttribute)xVarStreakCompareTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXVarStreakCompareType_Op()
  {
    return (EAttribute)xVarStreakCompareTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXVarStreakCompareType_Test()
  {
    return (EAttribute)xVarStreakCompareTypeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXVarStreakValueType()
  {
    return xVarStreakValueTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXVarStreakValueType_Op()
  {
    return (EAttribute)xVarStreakValueTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXVarStreakValueType_Test()
  {
    return (EAttribute)xVarStreakValueTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXVarCompareStreakType()
  {
    return xVarCompareStreakTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXVarCompareStreakType_TargetVar()
  {
    return (EReference)xVarCompareStreakTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXVarCompareStreakType_CompareVar()
  {
    return (EReference)xVarCompareStreakTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXVarCompareStreakType_Direction()
  {
    return (EAttribute)xVarCompareStreakTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXVarCompareStreakType_StartIndexExp()
  {
    return (EReference)xVarCompareStreakTypeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXVarCompareStreakType_Function()
  {
    return (EAttribute)xVarCompareStreakTypeEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXVarCompareStreakType_Op()
  {
    return (EAttribute)xVarCompareStreakTypeEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXVarCompareStreakType_Test()
  {
    return (EAttribute)xVarCompareStreakTypeEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXSlrAvgExpType()
  {
    return xSlrAvgExpTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXSlrAvgExpType_Var()
  {
    return (EReference)xSlrAvgExpTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXSlrAvgExpType_StartValue()
  {
    return (EReference)xSlrAvgExpTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXSlrAvgExpType_EndValue()
  {
    return (EReference)xSlrAvgExpTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXLastSignalTriggerType()
  {
    return xLastSignalTriggerTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXLastSignalTriggerType_Signal()
  {
    return (EReference)xLastSignalTriggerTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXSignalTriggerCountType()
  {
    return xSignalTriggerCountTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXSignalTriggerCountType_Signal()
  {
    return (EReference)xSignalTriggerCountTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXSignalTriggerCountType_Lookback()
  {
    return (EAttribute)xSignalTriggerCountTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXVarianceAverageType()
  {
    return xVarianceAverageTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXVarianceAverageType_Target()
  {
    return (EReference)xVarianceAverageTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXVarianceAverageType_Compare()
  {
    return (EReference)xVarianceAverageTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXVarianceAverageType_Start()
  {
    return (EReference)xVarianceAverageTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXVarianceAverageType_End()
  {
    return (EReference)xVarianceAverageTypeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXVarianceMaxType()
  {
    return xVarianceMaxTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXVarianceMaxType_Target()
  {
    return (EReference)xVarianceMaxTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXVarianceMaxType_Compare()
  {
    return (EReference)xVarianceMaxTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXVarianceMaxType_Start()
  {
    return (EReference)xVarianceMaxTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXVarianceMaxType_End()
  {
    return (EReference)xVarianceMaxTypeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXRocExpType()
  {
    return xRocExpTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXRocExpType_Value1()
  {
    return (EReference)xRocExpTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXRocExpType_Value2()
  {
    return (EReference)xRocExpTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getOrType()
  {
    return orTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOrType_Left()
  {
    return (EReference)orTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getOrType_Right()
  {
    return (EReference)orTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAndType()
  {
    return andTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAndType_Left()
  {
    return (EReference)andTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAndType_Right()
  {
    return (EReference)andTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEqualityType()
  {
    return equalityTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEqualityType_Left()
  {
    return (EReference)equalityTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEqualityType_Op()
  {
    return (EAttribute)equalityTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEqualityType_Right()
  {
    return (EReference)equalityTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getComparisonType()
  {
    return comparisonTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getComparisonType_Left()
  {
    return (EReference)comparisonTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getComparisonType_Op()
  {
    return (EAttribute)comparisonTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getComparisonType_Right()
  {
    return (EReference)comparisonTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPlusType()
  {
    return plusTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPlusType_Left()
  {
    return (EReference)plusTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPlusType_Right()
  {
    return (EReference)plusTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMinusType()
  {
    return minusTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMinusType_Left()
  {
    return (EReference)minusTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMinusType_Right()
  {
    return (EReference)minusTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMulOrDivType()
  {
    return mulOrDivTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMulOrDivType_Left()
  {
    return (EReference)mulOrDivTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getMulOrDivType_Op()
  {
    return (EAttribute)mulOrDivTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getMulOrDivType_Right()
  {
    return (EReference)mulOrDivTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNotType()
  {
    return notTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getNotType_Expression()
  {
    return (EReference)notTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDoubleConstantType()
  {
    return doubleConstantTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getDoubleConstantType_Value()
  {
    return (EAttribute)doubleConstantTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getIntConstantType()
  {
    return intConstantTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getIntConstantType_Value()
  {
    return (EAttribute)intConstantTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStringConstantType()
  {
    return stringConstantTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getStringConstantType_Value()
  {
    return (EAttribute)stringConstantTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBoolConstantType()
  {
    return boolConstantTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBoolConstantType_Value()
  {
    return (EAttribute)boolConstantTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTickExpressionType()
  {
    return tickExpressionTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTickExpressionType_Type()
  {
    return (EAttribute)tickExpressionTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTickExpressionType_Field()
  {
    return (EAttribute)tickExpressionTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTickExpressionType_DataType()
  {
    return (EAttribute)tickExpressionTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXClassType()
  {
    return xClassTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXClassType_Name()
  {
    return (EAttribute)xClassTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXClassType_SymbolFilter()
  {
    return (EAttribute)xClassTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXClassType_Elements()
  {
    return (EReference)xClassTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXOrType()
  {
    return xOrTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXOrType_Left()
  {
    return (EReference)xOrTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXOrType_Right()
  {
    return (EReference)xOrTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXAndType()
  {
    return xAndTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXAndType_Left()
  {
    return (EReference)xAndTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXAndType_Right()
  {
    return (EReference)xAndTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXEqualityType()
  {
    return xEqualityTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXEqualityType_Left()
  {
    return (EReference)xEqualityTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXEqualityType_Op()
  {
    return (EAttribute)xEqualityTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXEqualityType_Right()
  {
    return (EReference)xEqualityTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXComparisonType()
  {
    return xComparisonTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXComparisonType_Left()
  {
    return (EReference)xComparisonTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXComparisonType_Op()
  {
    return (EAttribute)xComparisonTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXComparisonType_Right()
  {
    return (EReference)xComparisonTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXPlusType()
  {
    return xPlusTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXPlusType_Left()
  {
    return (EReference)xPlusTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXPlusType_Right()
  {
    return (EReference)xPlusTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXMinusType()
  {
    return xMinusTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXMinusType_Left()
  {
    return (EReference)xMinusTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXMinusType_Right()
  {
    return (EReference)xMinusTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXMulOrDivType()
  {
    return xMulOrDivTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXMulOrDivType_Left()
  {
    return (EReference)xMulOrDivTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXMulOrDivType_Op()
  {
    return (EAttribute)xMulOrDivTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXMulOrDivType_Right()
  {
    return (EReference)xMulOrDivTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXNotType()
  {
    return xNotTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getXNotType_Expression()
  {
    return (EReference)xNotTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXDoubleConstantType()
  {
    return xDoubleConstantTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXDoubleConstantType_Value()
  {
    return (EAttribute)xDoubleConstantTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXIntConstantType()
  {
    return xIntConstantTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXIntConstantType_Value()
  {
    return (EAttribute)xIntConstantTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXStringConstantType()
  {
    return xStringConstantTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXStringConstantType_Value()
  {
    return (EAttribute)xStringConstantTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getXBoolConstantType()
  {
    return xBoolConstantTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getXBoolConstantType_Value()
  {
    return (EAttribute)xBoolConstantTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getHistoricalAggFunc()
  {
    return historicalAggFuncEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getSessionAggFunc()
  {
    return sessionAggFuncEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getSessionTimeUnit()
  {
    return sessionTimeUnitEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getStreamTimeUnit()
  {
    return streamTimeUnitEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getDataType()
  {
    return dataTypeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XScriptFactory getXScriptFactory()
  {
    return (XScriptFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    xScriptEClass = createEClass(XSCRIPT);
    createEReference(xScriptEClass, XSCRIPT__ELEMENTS);

    scriptElementEClass = createEClass(SCRIPT_ELEMENT);

    coreAbstractElementEClass = createEClass(CORE_ABSTRACT_ELEMENT);

    varTypeEClass = createEClass(VAR_TYPE);
    createEAttribute(varTypeEClass, VAR_TYPE__NAME);
    createEAttribute(varTypeEClass, VAR_TYPE__CODE);
    createEAttribute(varTypeEClass, VAR_TYPE__TYPE);
    createEReference(varTypeEClass, VAR_TYPE__EXPRESSION);

    varStoreTypeEClass = createEClass(VAR_STORE_TYPE);

    varTransTypeEClass = createEClass(VAR_TRANS_TYPE);

    expressionTypeEClass = createEClass(EXPRESSION_TYPE);

    variableValueRangeTypeEClass = createEClass(VARIABLE_VALUE_RANGE_TYPE);
    createEReference(variableValueRangeTypeEClass, VARIABLE_VALUE_RANGE_TYPE__TARGET_VAR);
    createEAttribute(variableValueRangeTypeEClass, VARIABLE_VALUE_RANGE_TYPE__START_INDEX);
    createEAttribute(variableValueRangeTypeEClass, VARIABLE_VALUE_RANGE_TYPE__END_INDEX);

    variableValueTypeEClass = createEClass(VARIABLE_VALUE_TYPE);
    createEReference(variableValueTypeEClass, VARIABLE_VALUE_TYPE__VARIABLE);
    createEAttribute(variableValueTypeEClass, VARIABLE_VALUE_TYPE__INDEX_INT);
    createEReference(variableValueTypeEClass, VARIABLE_VALUE_TYPE__EXP_TYPE);

    variableValueExpTypeEClass = createEClass(VARIABLE_VALUE_EXP_TYPE);
    createEReference(variableValueExpTypeEClass, VARIABLE_VALUE_EXP_TYPE__EXP_TYPE);

    setExpressionTypeEClass = createEClass(SET_EXPRESSION_TYPE);
    createEReference(setExpressionTypeEClass, SET_EXPRESSION_TYPE__ARGS);

    snapshotExpressionTypeEClass = createEClass(SNAPSHOT_EXPRESSION_TYPE);
    createEReference(snapshotExpressionTypeEClass, SNAPSHOT_EXPRESSION_TYPE__TARGET);
    createEAttribute(snapshotExpressionTypeEClass, SNAPSHOT_EXPRESSION_TYPE__INTERVAL);
    createEAttribute(snapshotExpressionTypeEClass, SNAPSHOT_EXPRESSION_TYPE__TIME);

    rocExpressionTypeEClass = createEClass(ROC_EXPRESSION_TYPE);
    createEReference(rocExpressionTypeEClass, ROC_EXPRESSION_TYPE__TARGET);
    createEReference(rocExpressionTypeEClass, ROC_EXPRESSION_TYPE__COMPARE);

    avgExpressionTypeEClass = createEClass(AVG_EXPRESSION_TYPE);
    createEReference(avgExpressionTypeEClass, AVG_EXPRESSION_TYPE__TARGET);

    subExpressionTypeEClass = createEClass(SUB_EXPRESSION_TYPE);
    createEReference(subExpressionTypeEClass, SUB_EXPRESSION_TYPE__TARGET);
    createEReference(subExpressionTypeEClass, SUB_EXPRESSION_TYPE__COMPARE);

    historyTimeRangeEClass = createEClass(HISTORY_TIME_RANGE);
    createEAttribute(historyTimeRangeEClass, HISTORY_TIME_RANGE__VALUE);

    sessionTimeRangeEClass = createEClass(SESSION_TIME_RANGE);

    relativeSessionTimeRangeEClass = createEClass(RELATIVE_SESSION_TIME_RANGE);
    createEAttribute(relativeSessionTimeRangeEClass, RELATIVE_SESSION_TIME_RANGE__RELATIVE_VALE);
    createEAttribute(relativeSessionTimeRangeEClass, RELATIVE_SESSION_TIME_RANGE__TIME_UNIT);

    todaySessionTimeRangeEClass = createEClass(TODAY_SESSION_TIME_RANGE);

    varAggSessionTypeEClass = createEClass(VAR_AGG_SESSION_TYPE);
    createEReference(varAggSessionTypeEClass, VAR_AGG_SESSION_TYPE__VAR);
    createEAttribute(varAggSessionTypeEClass, VAR_AGG_SESSION_TYPE__FUNCTION);
    createEReference(varAggSessionTypeEClass, VAR_AGG_SESSION_TYPE__TIME_RANGE);

    varAggHistoryTypeEClass = createEClass(VAR_AGG_HISTORY_TYPE);
    createEReference(varAggHistoryTypeEClass, VAR_AGG_HISTORY_TYPE__VAR);
    createEAttribute(varAggHistoryTypeEClass, VAR_AGG_HISTORY_TYPE__FUNCTION);
    createEReference(varAggHistoryTypeEClass, VAR_AGG_HISTORY_TYPE__TIME_RANGE);

    signalCountSessionEClass = createEClass(SIGNAL_COUNT_SESSION);
    createEReference(signalCountSessionEClass, SIGNAL_COUNT_SESSION__SIGNAL);
    createEReference(signalCountSessionEClass, SIGNAL_COUNT_SESSION__TIME_RANGE);

    signalCountHistoryEClass = createEClass(SIGNAL_COUNT_HISTORY);
    createEReference(signalCountHistoryEClass, SIGNAL_COUNT_HISTORY__SIGNAL);
    createEReference(signalCountHistoryEClass, SIGNAL_COUNT_HISTORY__TIME_RANGE);

    signalTypeEClass = createEClass(SIGNAL_TYPE);
    createEAttribute(signalTypeEClass, SIGNAL_TYPE__NAME);
    createEAttribute(signalTypeEClass, SIGNAL_TYPE__ID);

    abstractElementEClass = createEClass(ABSTRACT_ELEMENT);

    xClassElementTypeEClass = createEClass(XCLASS_ELEMENT_TYPE);

    xClassCoreElementTypeEClass = createEClass(XCLASS_CORE_ELEMENT_TYPE);
    createEAttribute(xClassCoreElementTypeEClass, XCLASS_CORE_ELEMENT_TYPE__NAME);

    xVarTypeEClass = createEClass(XVAR_TYPE);
    createEReference(xVarTypeEClass, XVAR_TYPE__EXP);

    xFunctionTypeEClass = createEClass(XFUNCTION_TYPE);
    createEReference(xFunctionTypeEClass, XFUNCTION_TYPE__PARAMS);
    createEReference(xFunctionTypeEClass, XFUNCTION_TYPE__ELEMENTS);

    xFunctionCoreElementTypeEClass = createEClass(XFUNCTION_CORE_ELEMENT_TYPE);

    xFunctionReturnTypeEClass = createEClass(XFUNCTION_RETURN_TYPE);
    createEReference(xFunctionReturnTypeEClass, XFUNCTION_RETURN_TYPE__RETURN_VALUE);

    xFunctionCallTypeEClass = createEClass(XFUNCTION_CALL_TYPE);
    createEReference(xFunctionCallTypeEClass, XFUNCTION_CALL_TYPE__FUNCTION);
    createEAttribute(xFunctionCallTypeEClass, XFUNCTION_CALL_TYPE__PARAMS);

    xSignalListenerTypeEClass = createEClass(XSIGNAL_LISTENER_TYPE);
    createEReference(xSignalListenerTypeEClass, XSIGNAL_LISTENER_TYPE__SIGNAL_TYPE);
    createEReference(xSignalListenerTypeEClass, XSIGNAL_LISTENER_TYPE__FUNCTION);

    xStreamVarListenerTypeEClass = createEClass(XSTREAM_VAR_LISTENER_TYPE);
    createEReference(xStreamVarListenerTypeEClass, XSTREAM_VAR_LISTENER_TYPE__COLUMN);
    createEReference(xStreamVarListenerTypeEClass, XSTREAM_VAR_LISTENER_TYPE__FUNCTION);

    xSignalTriggerTypeEClass = createEClass(XSIGNAL_TRIGGER_TYPE);
    createEReference(xSignalTriggerTypeEClass, XSIGNAL_TRIGGER_TYPE__SIGNAL);

    xFunctionStartTypeEClass = createEClass(XFUNCTION_START_TYPE);
    createEReference(xFunctionStartTypeEClass, XFUNCTION_START_TYPE__FUNCTION);
    createEAttribute(xFunctionStartTypeEClass, XFUNCTION_START_TYPE__INTERVAL);
    createEAttribute(xFunctionStartTypeEClass, XFUNCTION_START_TYPE__TIME);

    xVarSetterTypeEClass = createEClass(XVAR_SETTER_TYPE);
    createEReference(xVarSetterTypeEClass, XVAR_SETTER_TYPE__VAR);
    createEReference(xVarSetterTypeEClass, XVAR_SETTER_TYPE__EXP);

    xVarIncrementTypeEClass = createEClass(XVAR_INCREMENT_TYPE);
    createEReference(xVarIncrementTypeEClass, XVAR_INCREMENT_TYPE__VAR);

    xVarDecrementTypeEClass = createEClass(XVAR_DECREMENT_TYPE);
    createEReference(xVarDecrementTypeEClass, XVAR_DECREMENT_TYPE__VAR);

    xSetVarTypeEClass = createEClass(XSET_VAR_TYPE);
    createEReference(xSetVarTypeEClass, XSET_VAR_TYPE__VAR);
    createEReference(xSetVarTypeEClass, XSET_VAR_TYPE__VALUE);

    xDebugTypeEClass = createEClass(XDEBUG_TYPE);
    createEReference(xDebugTypeEClass, XDEBUG_TYPE__ARGS);

    xIfStatementTypeEClass = createEClass(XIF_STATEMENT_TYPE);
    createEReference(xIfStatementTypeEClass, XIF_STATEMENT_TYPE__EXPRESSION);
    createEReference(xIfStatementTypeEClass, XIF_STATEMENT_TYPE__ELEMENTS);
    createEReference(xIfStatementTypeEClass, XIF_STATEMENT_TYPE__ELSE_IF_ELEMENTS);
    createEReference(xIfStatementTypeEClass, XIF_STATEMENT_TYPE__ELSE_ELEMENT);

    xElseIfStatementTypeEClass = createEClass(XELSE_IF_STATEMENT_TYPE);
    createEReference(xElseIfStatementTypeEClass, XELSE_IF_STATEMENT_TYPE__EXPRESSION);
    createEReference(xElseIfStatementTypeEClass, XELSE_IF_STATEMENT_TYPE__ELEMENTS);

    xElseStatementTypeEClass = createEClass(XELSE_STATEMENT_TYPE);
    createEReference(xElseStatementTypeEClass, XELSE_STATEMENT_TYPE__ELEMENTS);

    xWhileTypeEClass = createEClass(XWHILE_TYPE);
    createEReference(xWhileTypeEClass, XWHILE_TYPE__EXPRESSION);
    createEReference(xWhileTypeEClass, XWHILE_TYPE__ELEMENTS);

    xWhileBreakTypeEClass = createEClass(XWHILE_BREAK_TYPE);

    xSleepTypeEClass = createEClass(XSLEEP_TYPE);
    createEAttribute(xSleepTypeEClass, XSLEEP_TYPE__INTERVAL);
    createEAttribute(xSleepTypeEClass, XSLEEP_TYPE__UNIT);

    xExpressionTypeEClass = createEClass(XEXPRESSION_TYPE);

    xPercentChangeExpTypeEClass = createEClass(XPERCENT_CHANGE_EXP_TYPE);
    createEReference(xPercentChangeExpTypeEClass, XPERCENT_CHANGE_EXP_TYPE__VALUE1);
    createEReference(xPercentChangeExpTypeEClass, XPERCENT_CHANGE_EXP_TYPE__VALUE2);

    xSubExpTypeEClass = createEClass(XSUB_EXP_TYPE);
    createEReference(xSubExpTypeEClass, XSUB_EXP_TYPE__VALUE1);
    createEReference(xSubExpTypeEClass, XSUB_EXP_TYPE__VALUE2);

    xVarExpTypeEClass = createEClass(XVAR_EXP_TYPE);
    createEReference(xVarExpTypeEClass, XVAR_EXP_TYPE__EXP_VAR);

    xStreamWrapperExpTypeEClass = createEClass(XSTREAM_WRAPPER_EXP_TYPE);
    createEReference(xStreamWrapperExpTypeEClass, XSTREAM_WRAPPER_EXP_TYPE__WRAPPER_EXP);

    xStreamVarValueExpTypeEClass = createEClass(XSTREAM_VAR_VALUE_EXP_TYPE);
    createEReference(xStreamVarValueExpTypeEClass, XSTREAM_VAR_VALUE_EXP_TYPE__VAR);
    createEReference(xStreamVarValueExpTypeEClass, XSTREAM_VAR_VALUE_EXP_TYPE__EXPRESSION_VALUE);

    xFunctionCallExpTypeEClass = createEClass(XFUNCTION_CALL_EXP_TYPE);
    createEReference(xFunctionCallExpTypeEClass, XFUNCTION_CALL_EXP_TYPE__FUNCTION);
    createEAttribute(xFunctionCallExpTypeEClass, XFUNCTION_CALL_EXP_TYPE__PARMS);

    xVarStreakTypeEClass = createEClass(XVAR_STREAK_TYPE);
    createEReference(xVarStreakTypeEClass, XVAR_STREAK_TYPE__VAR);
    createEAttribute(xVarStreakTypeEClass, XVAR_STREAK_TYPE__DIRECTION);
    createEReference(xVarStreakTypeEClass, XVAR_STREAK_TYPE__START_INDEX_EXP);
    createEReference(xVarStreakTypeEClass, XVAR_STREAK_TYPE__COMPARE);
    createEReference(xVarStreakTypeEClass, XVAR_STREAK_TYPE__VALUE);

    xVarStreakCompareTypeEClass = createEClass(XVAR_STREAK_COMPARE_TYPE);
    createEAttribute(xVarStreakCompareTypeEClass, XVAR_STREAK_COMPARE_TYPE__FUNCTION);
    createEAttribute(xVarStreakCompareTypeEClass, XVAR_STREAK_COMPARE_TYPE__OFFSET);
    createEAttribute(xVarStreakCompareTypeEClass, XVAR_STREAK_COMPARE_TYPE__OP);
    createEAttribute(xVarStreakCompareTypeEClass, XVAR_STREAK_COMPARE_TYPE__TEST);

    xVarStreakValueTypeEClass = createEClass(XVAR_STREAK_VALUE_TYPE);
    createEAttribute(xVarStreakValueTypeEClass, XVAR_STREAK_VALUE_TYPE__OP);
    createEAttribute(xVarStreakValueTypeEClass, XVAR_STREAK_VALUE_TYPE__TEST);

    xVarCompareStreakTypeEClass = createEClass(XVAR_COMPARE_STREAK_TYPE);
    createEReference(xVarCompareStreakTypeEClass, XVAR_COMPARE_STREAK_TYPE__TARGET_VAR);
    createEReference(xVarCompareStreakTypeEClass, XVAR_COMPARE_STREAK_TYPE__COMPARE_VAR);
    createEAttribute(xVarCompareStreakTypeEClass, XVAR_COMPARE_STREAK_TYPE__DIRECTION);
    createEReference(xVarCompareStreakTypeEClass, XVAR_COMPARE_STREAK_TYPE__START_INDEX_EXP);
    createEAttribute(xVarCompareStreakTypeEClass, XVAR_COMPARE_STREAK_TYPE__FUNCTION);
    createEAttribute(xVarCompareStreakTypeEClass, XVAR_COMPARE_STREAK_TYPE__OP);
    createEAttribute(xVarCompareStreakTypeEClass, XVAR_COMPARE_STREAK_TYPE__TEST);

    xSlrAvgExpTypeEClass = createEClass(XSLR_AVG_EXP_TYPE);
    createEReference(xSlrAvgExpTypeEClass, XSLR_AVG_EXP_TYPE__VAR);
    createEReference(xSlrAvgExpTypeEClass, XSLR_AVG_EXP_TYPE__START_VALUE);
    createEReference(xSlrAvgExpTypeEClass, XSLR_AVG_EXP_TYPE__END_VALUE);

    xLastSignalTriggerTypeEClass = createEClass(XLAST_SIGNAL_TRIGGER_TYPE);
    createEReference(xLastSignalTriggerTypeEClass, XLAST_SIGNAL_TRIGGER_TYPE__SIGNAL);

    xSignalTriggerCountTypeEClass = createEClass(XSIGNAL_TRIGGER_COUNT_TYPE);
    createEReference(xSignalTriggerCountTypeEClass, XSIGNAL_TRIGGER_COUNT_TYPE__SIGNAL);
    createEAttribute(xSignalTriggerCountTypeEClass, XSIGNAL_TRIGGER_COUNT_TYPE__LOOKBACK);

    xVarianceAverageTypeEClass = createEClass(XVARIANCE_AVERAGE_TYPE);
    createEReference(xVarianceAverageTypeEClass, XVARIANCE_AVERAGE_TYPE__TARGET);
    createEReference(xVarianceAverageTypeEClass, XVARIANCE_AVERAGE_TYPE__COMPARE);
    createEReference(xVarianceAverageTypeEClass, XVARIANCE_AVERAGE_TYPE__START);
    createEReference(xVarianceAverageTypeEClass, XVARIANCE_AVERAGE_TYPE__END);

    xVarianceMaxTypeEClass = createEClass(XVARIANCE_MAX_TYPE);
    createEReference(xVarianceMaxTypeEClass, XVARIANCE_MAX_TYPE__TARGET);
    createEReference(xVarianceMaxTypeEClass, XVARIANCE_MAX_TYPE__COMPARE);
    createEReference(xVarianceMaxTypeEClass, XVARIANCE_MAX_TYPE__START);
    createEReference(xVarianceMaxTypeEClass, XVARIANCE_MAX_TYPE__END);

    xRocExpTypeEClass = createEClass(XROC_EXP_TYPE);
    createEReference(xRocExpTypeEClass, XROC_EXP_TYPE__VALUE1);
    createEReference(xRocExpTypeEClass, XROC_EXP_TYPE__VALUE2);

    orTypeEClass = createEClass(OR_TYPE);
    createEReference(orTypeEClass, OR_TYPE__LEFT);
    createEReference(orTypeEClass, OR_TYPE__RIGHT);

    andTypeEClass = createEClass(AND_TYPE);
    createEReference(andTypeEClass, AND_TYPE__LEFT);
    createEReference(andTypeEClass, AND_TYPE__RIGHT);

    equalityTypeEClass = createEClass(EQUALITY_TYPE);
    createEReference(equalityTypeEClass, EQUALITY_TYPE__LEFT);
    createEAttribute(equalityTypeEClass, EQUALITY_TYPE__OP);
    createEReference(equalityTypeEClass, EQUALITY_TYPE__RIGHT);

    comparisonTypeEClass = createEClass(COMPARISON_TYPE);
    createEReference(comparisonTypeEClass, COMPARISON_TYPE__LEFT);
    createEAttribute(comparisonTypeEClass, COMPARISON_TYPE__OP);
    createEReference(comparisonTypeEClass, COMPARISON_TYPE__RIGHT);

    plusTypeEClass = createEClass(PLUS_TYPE);
    createEReference(plusTypeEClass, PLUS_TYPE__LEFT);
    createEReference(plusTypeEClass, PLUS_TYPE__RIGHT);

    minusTypeEClass = createEClass(MINUS_TYPE);
    createEReference(minusTypeEClass, MINUS_TYPE__LEFT);
    createEReference(minusTypeEClass, MINUS_TYPE__RIGHT);

    mulOrDivTypeEClass = createEClass(MUL_OR_DIV_TYPE);
    createEReference(mulOrDivTypeEClass, MUL_OR_DIV_TYPE__LEFT);
    createEAttribute(mulOrDivTypeEClass, MUL_OR_DIV_TYPE__OP);
    createEReference(mulOrDivTypeEClass, MUL_OR_DIV_TYPE__RIGHT);

    notTypeEClass = createEClass(NOT_TYPE);
    createEReference(notTypeEClass, NOT_TYPE__EXPRESSION);

    doubleConstantTypeEClass = createEClass(DOUBLE_CONSTANT_TYPE);
    createEAttribute(doubleConstantTypeEClass, DOUBLE_CONSTANT_TYPE__VALUE);

    intConstantTypeEClass = createEClass(INT_CONSTANT_TYPE);
    createEAttribute(intConstantTypeEClass, INT_CONSTANT_TYPE__VALUE);

    stringConstantTypeEClass = createEClass(STRING_CONSTANT_TYPE);
    createEAttribute(stringConstantTypeEClass, STRING_CONSTANT_TYPE__VALUE);

    boolConstantTypeEClass = createEClass(BOOL_CONSTANT_TYPE);
    createEAttribute(boolConstantTypeEClass, BOOL_CONSTANT_TYPE__VALUE);

    tickExpressionTypeEClass = createEClass(TICK_EXPRESSION_TYPE);
    createEAttribute(tickExpressionTypeEClass, TICK_EXPRESSION_TYPE__TYPE);
    createEAttribute(tickExpressionTypeEClass, TICK_EXPRESSION_TYPE__FIELD);
    createEAttribute(tickExpressionTypeEClass, TICK_EXPRESSION_TYPE__DATA_TYPE);

    xClassTypeEClass = createEClass(XCLASS_TYPE);
    createEAttribute(xClassTypeEClass, XCLASS_TYPE__NAME);
    createEAttribute(xClassTypeEClass, XCLASS_TYPE__SYMBOL_FILTER);
    createEReference(xClassTypeEClass, XCLASS_TYPE__ELEMENTS);

    xOrTypeEClass = createEClass(XOR_TYPE);
    createEReference(xOrTypeEClass, XOR_TYPE__LEFT);
    createEReference(xOrTypeEClass, XOR_TYPE__RIGHT);

    xAndTypeEClass = createEClass(XAND_TYPE);
    createEReference(xAndTypeEClass, XAND_TYPE__LEFT);
    createEReference(xAndTypeEClass, XAND_TYPE__RIGHT);

    xEqualityTypeEClass = createEClass(XEQUALITY_TYPE);
    createEReference(xEqualityTypeEClass, XEQUALITY_TYPE__LEFT);
    createEAttribute(xEqualityTypeEClass, XEQUALITY_TYPE__OP);
    createEReference(xEqualityTypeEClass, XEQUALITY_TYPE__RIGHT);

    xComparisonTypeEClass = createEClass(XCOMPARISON_TYPE);
    createEReference(xComparisonTypeEClass, XCOMPARISON_TYPE__LEFT);
    createEAttribute(xComparisonTypeEClass, XCOMPARISON_TYPE__OP);
    createEReference(xComparisonTypeEClass, XCOMPARISON_TYPE__RIGHT);

    xPlusTypeEClass = createEClass(XPLUS_TYPE);
    createEReference(xPlusTypeEClass, XPLUS_TYPE__LEFT);
    createEReference(xPlusTypeEClass, XPLUS_TYPE__RIGHT);

    xMinusTypeEClass = createEClass(XMINUS_TYPE);
    createEReference(xMinusTypeEClass, XMINUS_TYPE__LEFT);
    createEReference(xMinusTypeEClass, XMINUS_TYPE__RIGHT);

    xMulOrDivTypeEClass = createEClass(XMUL_OR_DIV_TYPE);
    createEReference(xMulOrDivTypeEClass, XMUL_OR_DIV_TYPE__LEFT);
    createEAttribute(xMulOrDivTypeEClass, XMUL_OR_DIV_TYPE__OP);
    createEReference(xMulOrDivTypeEClass, XMUL_OR_DIV_TYPE__RIGHT);

    xNotTypeEClass = createEClass(XNOT_TYPE);
    createEReference(xNotTypeEClass, XNOT_TYPE__EXPRESSION);

    xDoubleConstantTypeEClass = createEClass(XDOUBLE_CONSTANT_TYPE);
    createEAttribute(xDoubleConstantTypeEClass, XDOUBLE_CONSTANT_TYPE__VALUE);

    xIntConstantTypeEClass = createEClass(XINT_CONSTANT_TYPE);
    createEAttribute(xIntConstantTypeEClass, XINT_CONSTANT_TYPE__VALUE);

    xStringConstantTypeEClass = createEClass(XSTRING_CONSTANT_TYPE);
    createEAttribute(xStringConstantTypeEClass, XSTRING_CONSTANT_TYPE__VALUE);

    xBoolConstantTypeEClass = createEClass(XBOOL_CONSTANT_TYPE);
    createEAttribute(xBoolConstantTypeEClass, XBOOL_CONSTANT_TYPE__VALUE);

    // Create enums
    historicalAggFuncEEnum = createEEnum(HISTORICAL_AGG_FUNC);
    sessionAggFuncEEnum = createEEnum(SESSION_AGG_FUNC);
    sessionTimeUnitEEnum = createEEnum(SESSION_TIME_UNIT);
    streamTimeUnitEEnum = createEEnum(STREAM_TIME_UNIT);
    dataTypeEEnum = createEEnum(DATA_TYPE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    coreAbstractElementEClass.getESuperTypes().add(this.getScriptElement());
    varTypeEClass.getESuperTypes().add(this.getCoreAbstractElement());
    varStoreTypeEClass.getESuperTypes().add(this.getVarType());
    varTransTypeEClass.getESuperTypes().add(this.getVarType());
    variableValueRangeTypeEClass.getESuperTypes().add(this.getExpressionType());
    variableValueTypeEClass.getESuperTypes().add(this.getExpressionType());
    variableValueExpTypeEClass.getESuperTypes().add(this.getExpressionType());
    setExpressionTypeEClass.getESuperTypes().add(this.getExpressionType());
    snapshotExpressionTypeEClass.getESuperTypes().add(this.getExpressionType());
    rocExpressionTypeEClass.getESuperTypes().add(this.getExpressionType());
    avgExpressionTypeEClass.getESuperTypes().add(this.getExpressionType());
    subExpressionTypeEClass.getESuperTypes().add(this.getExpressionType());
    relativeSessionTimeRangeEClass.getESuperTypes().add(this.getSessionTimeRange());
    todaySessionTimeRangeEClass.getESuperTypes().add(this.getSessionTimeRange());
    varAggSessionTypeEClass.getESuperTypes().add(this.getExpressionType());
    varAggHistoryTypeEClass.getESuperTypes().add(this.getExpressionType());
    signalCountSessionEClass.getESuperTypes().add(this.getExpressionType());
    signalCountHistoryEClass.getESuperTypes().add(this.getExpressionType());
    signalTypeEClass.getESuperTypes().add(this.getCoreAbstractElement());
    abstractElementEClass.getESuperTypes().add(this.getCoreAbstractElement());
    xClassCoreElementTypeEClass.getESuperTypes().add(this.getXClassElementType());
    xVarTypeEClass.getESuperTypes().add(this.getXClassCoreElementType());
    xVarTypeEClass.getESuperTypes().add(this.getXFunctionCoreElementType());
    xFunctionTypeEClass.getESuperTypes().add(this.getXClassCoreElementType());
    xFunctionCoreElementTypeEClass.getESuperTypes().add(this.getXClassElementType());
    xFunctionReturnTypeEClass.getESuperTypes().add(this.getXFunctionCoreElementType());
    xFunctionCallTypeEClass.getESuperTypes().add(this.getXFunctionCoreElementType());
    xSignalListenerTypeEClass.getESuperTypes().add(this.getXFunctionCoreElementType());
    xStreamVarListenerTypeEClass.getESuperTypes().add(this.getXFunctionCoreElementType());
    xSignalTriggerTypeEClass.getESuperTypes().add(this.getXFunctionCoreElementType());
    xFunctionStartTypeEClass.getESuperTypes().add(this.getXFunctionCoreElementType());
    xVarSetterTypeEClass.getESuperTypes().add(this.getXFunctionCoreElementType());
    xVarIncrementTypeEClass.getESuperTypes().add(this.getXFunctionCoreElementType());
    xVarDecrementTypeEClass.getESuperTypes().add(this.getXFunctionCoreElementType());
    xSetVarTypeEClass.getESuperTypes().add(this.getXFunctionCoreElementType());
    xDebugTypeEClass.getESuperTypes().add(this.getXFunctionCoreElementType());
    xIfStatementTypeEClass.getESuperTypes().add(this.getXFunctionCoreElementType());
    xWhileTypeEClass.getESuperTypes().add(this.getXFunctionCoreElementType());
    xWhileBreakTypeEClass.getESuperTypes().add(this.getXClassElementType());
    xSleepTypeEClass.getESuperTypes().add(this.getXFunctionCoreElementType());
    xPercentChangeExpTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xSubExpTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xVarExpTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xStreamWrapperExpTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xStreamVarValueExpTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xFunctionCallExpTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xVarStreakTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xVarCompareStreakTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xSlrAvgExpTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xLastSignalTriggerTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xSignalTriggerCountTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xVarianceAverageTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xVarianceMaxTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xRocExpTypeEClass.getESuperTypes().add(this.getXExpressionType());
    orTypeEClass.getESuperTypes().add(this.getExpressionType());
    andTypeEClass.getESuperTypes().add(this.getExpressionType());
    equalityTypeEClass.getESuperTypes().add(this.getExpressionType());
    comparisonTypeEClass.getESuperTypes().add(this.getExpressionType());
    plusTypeEClass.getESuperTypes().add(this.getExpressionType());
    minusTypeEClass.getESuperTypes().add(this.getExpressionType());
    mulOrDivTypeEClass.getESuperTypes().add(this.getExpressionType());
    notTypeEClass.getESuperTypes().add(this.getExpressionType());
    doubleConstantTypeEClass.getESuperTypes().add(this.getExpressionType());
    intConstantTypeEClass.getESuperTypes().add(this.getExpressionType());
    stringConstantTypeEClass.getESuperTypes().add(this.getExpressionType());
    boolConstantTypeEClass.getESuperTypes().add(this.getExpressionType());
    tickExpressionTypeEClass.getESuperTypes().add(this.getExpressionType());
    xClassTypeEClass.getESuperTypes().add(this.getAbstractElement());
    xOrTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xAndTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xEqualityTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xComparisonTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xPlusTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xMinusTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xMulOrDivTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xNotTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xDoubleConstantTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xIntConstantTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xStringConstantTypeEClass.getESuperTypes().add(this.getXExpressionType());
    xBoolConstantTypeEClass.getESuperTypes().add(this.getXExpressionType());

    // Initialize classes and features; add operations and parameters
    initEClass(xScriptEClass, XScript.class, "XScript", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXScript_Elements(), this.getScriptElement(), null, "elements", null, 0, -1, XScript.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(scriptElementEClass, ScriptElement.class, "ScriptElement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(coreAbstractElementEClass, CoreAbstractElement.class, "CoreAbstractElement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(varTypeEClass, VarType.class, "VarType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVarType_Name(), ecorePackage.getEString(), "name", null, 0, 1, VarType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVarType_Code(), ecorePackage.getEInt(), "code", null, 0, 1, VarType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVarType_Type(), this.getDataType(), "type", null, 0, 1, VarType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVarType_Expression(), this.getExpressionType(), null, "expression", null, 0, 1, VarType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(varStoreTypeEClass, VarStoreType.class, "VarStoreType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(varTransTypeEClass, VarTransType.class, "VarTransType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(expressionTypeEClass, ExpressionType.class, "ExpressionType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(variableValueRangeTypeEClass, VariableValueRangeType.class, "VariableValueRangeType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVariableValueRangeType_TargetVar(), this.getVarType(), null, "targetVar", null, 0, 1, VariableValueRangeType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVariableValueRangeType_StartIndex(), ecorePackage.getEInt(), "startIndex", null, 0, 1, VariableValueRangeType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVariableValueRangeType_EndIndex(), ecorePackage.getEInt(), "endIndex", null, 0, 1, VariableValueRangeType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(variableValueTypeEClass, VariableValueType.class, "VariableValueType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVariableValueType_Variable(), this.getVarType(), null, "variable", null, 0, 1, VariableValueType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVariableValueType_IndexInt(), ecorePackage.getEInt(), "indexInt", null, 0, 1, VariableValueType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVariableValueType_ExpType(), this.getExpressionType(), null, "expType", null, 0, 1, VariableValueType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(variableValueExpTypeEClass, VariableValueExpType.class, "VariableValueExpType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVariableValueExpType_ExpType(), this.getExpressionType(), null, "expType", null, 0, 1, VariableValueExpType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(setExpressionTypeEClass, SetExpressionType.class, "SetExpressionType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSetExpressionType_Args(), this.getExpressionType(), null, "args", null, 0, -1, SetExpressionType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(snapshotExpressionTypeEClass, SnapshotExpressionType.class, "SnapshotExpressionType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSnapshotExpressionType_Target(), this.getExpressionType(), null, "target", null, 0, 1, SnapshotExpressionType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSnapshotExpressionType_Interval(), ecorePackage.getEInt(), "interval", null, 0, 1, SnapshotExpressionType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSnapshotExpressionType_Time(), this.getStreamTimeUnit(), "time", null, 0, 1, SnapshotExpressionType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(rocExpressionTypeEClass, RocExpressionType.class, "RocExpressionType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRocExpressionType_Target(), this.getExpressionType(), null, "target", null, 0, 1, RocExpressionType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getRocExpressionType_Compare(), this.getExpressionType(), null, "compare", null, 0, 1, RocExpressionType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(avgExpressionTypeEClass, AvgExpressionType.class, "AvgExpressionType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAvgExpressionType_Target(), this.getSetExpressionType(), null, "target", null, 0, 1, AvgExpressionType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(subExpressionTypeEClass, SubExpressionType.class, "SubExpressionType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSubExpressionType_Target(), this.getVariableValueType(), null, "target", null, 0, 1, SubExpressionType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSubExpressionType_Compare(), this.getVariableValueType(), null, "compare", null, 0, 1, SubExpressionType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(historyTimeRangeEClass, HistoryTimeRange.class, "HistoryTimeRange", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getHistoryTimeRange_Value(), ecorePackage.getEInt(), "value", null, 0, 1, HistoryTimeRange.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(sessionTimeRangeEClass, SessionTimeRange.class, "SessionTimeRange", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(relativeSessionTimeRangeEClass, RelativeSessionTimeRange.class, "RelativeSessionTimeRange", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getRelativeSessionTimeRange_RelativeVale(), ecorePackage.getEInt(), "relativeVale", null, 0, 1, RelativeSessionTimeRange.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getRelativeSessionTimeRange_TimeUnit(), this.getSessionTimeUnit(), "timeUnit", null, 0, 1, RelativeSessionTimeRange.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(todaySessionTimeRangeEClass, TodaySessionTimeRange.class, "TodaySessionTimeRange", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(varAggSessionTypeEClass, VarAggSessionType.class, "VarAggSessionType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVarAggSessionType_Var(), this.getVarType(), null, "var", null, 0, 1, VarAggSessionType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVarAggSessionType_Function(), this.getSessionAggFunc(), "function", null, 0, 1, VarAggSessionType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVarAggSessionType_TimeRange(), this.getSessionTimeRange(), null, "timeRange", null, 0, 1, VarAggSessionType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(varAggHistoryTypeEClass, VarAggHistoryType.class, "VarAggHistoryType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVarAggHistoryType_Var(), this.getVarType(), null, "var", null, 0, 1, VarAggHistoryType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVarAggHistoryType_Function(), this.getHistoricalAggFunc(), "function", null, 0, 1, VarAggHistoryType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getVarAggHistoryType_TimeRange(), this.getHistoryTimeRange(), null, "timeRange", null, 0, 1, VarAggHistoryType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(signalCountSessionEClass, SignalCountSession.class, "SignalCountSession", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSignalCountSession_Signal(), this.getSignalType(), null, "signal", null, 0, 1, SignalCountSession.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSignalCountSession_TimeRange(), this.getSessionTimeRange(), null, "timeRange", null, 0, 1, SignalCountSession.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(signalCountHistoryEClass, SignalCountHistory.class, "SignalCountHistory", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSignalCountHistory_Signal(), this.getSignalType(), null, "signal", null, 0, 1, SignalCountHistory.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSignalCountHistory_TimeRange(), this.getHistoryTimeRange(), null, "timeRange", null, 0, 1, SignalCountHistory.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(signalTypeEClass, SignalType.class, "SignalType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSignalType_Name(), ecorePackage.getEString(), "name", null, 0, 1, SignalType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSignalType_Id(), ecorePackage.getEInt(), "id", null, 0, 1, SignalType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(abstractElementEClass, AbstractElement.class, "AbstractElement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(xClassElementTypeEClass, XClassElementType.class, "XClassElementType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(xClassCoreElementTypeEClass, XClassCoreElementType.class, "XClassCoreElementType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getXClassCoreElementType_Name(), ecorePackage.getEString(), "name", null, 0, 1, XClassCoreElementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xVarTypeEClass, XVarType.class, "XVarType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXVarType_Exp(), this.getXExpressionType(), null, "exp", null, 0, 1, XVarType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xFunctionTypeEClass, XFunctionType.class, "XFunctionType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXFunctionType_Params(), this.getXVarType(), null, "params", null, 0, -1, XFunctionType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXFunctionType_Elements(), this.getXClassElementType(), null, "elements", null, 0, -1, XFunctionType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xFunctionCoreElementTypeEClass, XFunctionCoreElementType.class, "XFunctionCoreElementType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(xFunctionReturnTypeEClass, XFunctionReturnType.class, "XFunctionReturnType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXFunctionReturnType_ReturnValue(), this.getXExpressionType(), null, "returnValue", null, 0, 1, XFunctionReturnType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xFunctionCallTypeEClass, XFunctionCallType.class, "XFunctionCallType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXFunctionCallType_Function(), this.getXFunctionType(), null, "function", null, 0, 1, XFunctionCallType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getXFunctionCallType_Params(), ecorePackage.getEString(), "params", null, 0, 1, XFunctionCallType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xSignalListenerTypeEClass, XSignalListenerType.class, "XSignalListenerType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXSignalListenerType_SignalType(), this.getSignalType(), null, "signalType", null, 0, 1, XSignalListenerType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXSignalListenerType_Function(), this.getXFunctionType(), null, "function", null, 0, 1, XSignalListenerType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xStreamVarListenerTypeEClass, XStreamVarListenerType.class, "XStreamVarListenerType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXStreamVarListenerType_Column(), this.getVarType(), null, "column", null, 0, 1, XStreamVarListenerType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXStreamVarListenerType_Function(), this.getXFunctionType(), null, "function", null, 0, 1, XStreamVarListenerType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xSignalTriggerTypeEClass, XSignalTriggerType.class, "XSignalTriggerType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXSignalTriggerType_Signal(), this.getSignalType(), null, "signal", null, 0, 1, XSignalTriggerType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xFunctionStartTypeEClass, XFunctionStartType.class, "XFunctionStartType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXFunctionStartType_Function(), this.getXFunctionType(), null, "function", null, 0, 1, XFunctionStartType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getXFunctionStartType_Interval(), ecorePackage.getEInt(), "interval", null, 0, 1, XFunctionStartType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getXFunctionStartType_Time(), this.getStreamTimeUnit(), "time", null, 0, 1, XFunctionStartType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xVarSetterTypeEClass, XVarSetterType.class, "XVarSetterType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXVarSetterType_Var(), this.getXVarType(), null, "var", null, 0, 1, XVarSetterType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXVarSetterType_Exp(), this.getXExpressionType(), null, "exp", null, 0, 1, XVarSetterType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xVarIncrementTypeEClass, XVarIncrementType.class, "XVarIncrementType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXVarIncrementType_Var(), this.getXVarType(), null, "var", null, 0, 1, XVarIncrementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xVarDecrementTypeEClass, XVarDecrementType.class, "XVarDecrementType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXVarDecrementType_Var(), this.getXVarType(), null, "var", null, 0, 1, XVarDecrementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xSetVarTypeEClass, XSetVarType.class, "XSetVarType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXSetVarType_Var(), this.getVarType(), null, "var", null, 0, 1, XSetVarType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXSetVarType_Value(), this.getXExpressionType(), null, "value", null, 0, 1, XSetVarType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xDebugTypeEClass, XDebugType.class, "XDebugType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXDebugType_Args(), this.getXExpressionType(), null, "args", null, 0, -1, XDebugType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xIfStatementTypeEClass, XIfStatementType.class, "XIfStatementType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXIfStatementType_Expression(), this.getXExpressionType(), null, "expression", null, 0, 1, XIfStatementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXIfStatementType_Elements(), this.getXClassElementType(), null, "elements", null, 0, -1, XIfStatementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXIfStatementType_ElseIfElements(), this.getXElseIfStatementType(), null, "elseIfElements", null, 0, -1, XIfStatementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXIfStatementType_ElseElement(), this.getXElseStatementType(), null, "elseElement", null, 0, 1, XIfStatementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xElseIfStatementTypeEClass, XElseIfStatementType.class, "XElseIfStatementType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXElseIfStatementType_Expression(), this.getXExpressionType(), null, "expression", null, 0, 1, XElseIfStatementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXElseIfStatementType_Elements(), this.getXClassElementType(), null, "elements", null, 0, -1, XElseIfStatementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xElseStatementTypeEClass, XElseStatementType.class, "XElseStatementType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXElseStatementType_Elements(), this.getXClassElementType(), null, "elements", null, 0, -1, XElseStatementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xWhileTypeEClass, XWhileType.class, "XWhileType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXWhileType_Expression(), this.getXExpressionType(), null, "expression", null, 0, 1, XWhileType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXWhileType_Elements(), this.getXClassElementType(), null, "elements", null, 0, -1, XWhileType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xWhileBreakTypeEClass, XWhileBreakType.class, "XWhileBreakType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(xSleepTypeEClass, XSleepType.class, "XSleepType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getXSleepType_Interval(), ecorePackage.getEInt(), "interval", null, 0, 1, XSleepType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getXSleepType_Unit(), this.getStreamTimeUnit(), "unit", null, 0, 1, XSleepType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xExpressionTypeEClass, XExpressionType.class, "XExpressionType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(xPercentChangeExpTypeEClass, XPercentChangeExpType.class, "XPercentChangeExpType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXPercentChangeExpType_Value1(), this.getXExpressionType(), null, "value1", null, 0, 1, XPercentChangeExpType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXPercentChangeExpType_Value2(), this.getXExpressionType(), null, "value2", null, 0, 1, XPercentChangeExpType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xSubExpTypeEClass, XSubExpType.class, "XSubExpType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXSubExpType_Value1(), this.getXExpressionType(), null, "value1", null, 0, 1, XSubExpType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXSubExpType_Value2(), this.getXExpressionType(), null, "value2", null, 0, 1, XSubExpType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xVarExpTypeEClass, XVarExpType.class, "XVarExpType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXVarExpType_ExpVar(), this.getXVarType(), null, "expVar", null, 0, 1, XVarExpType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xStreamWrapperExpTypeEClass, XStreamWrapperExpType.class, "XStreamWrapperExpType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXStreamWrapperExpType_WrapperExp(), this.getExpressionType(), null, "wrapperExp", null, 0, 1, XStreamWrapperExpType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xStreamVarValueExpTypeEClass, XStreamVarValueExpType.class, "XStreamVarValueExpType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXStreamVarValueExpType_Var(), this.getVarType(), null, "var", null, 0, 1, XStreamVarValueExpType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXStreamVarValueExpType_ExpressionValue(), this.getXExpressionType(), null, "expressionValue", null, 0, 1, XStreamVarValueExpType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xFunctionCallExpTypeEClass, XFunctionCallExpType.class, "XFunctionCallExpType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXFunctionCallExpType_Function(), this.getXFunctionType(), null, "function", null, 0, 1, XFunctionCallExpType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getXFunctionCallExpType_Parms(), ecorePackage.getEString(), "parms", null, 0, 1, XFunctionCallExpType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xVarStreakTypeEClass, XVarStreakType.class, "XVarStreakType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXVarStreakType_Var(), this.getVarType(), null, "var", null, 0, 1, XVarStreakType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getXVarStreakType_Direction(), ecorePackage.getEString(), "direction", null, 0, 1, XVarStreakType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXVarStreakType_StartIndexExp(), this.getXExpressionType(), null, "startIndexExp", null, 0, 1, XVarStreakType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXVarStreakType_Compare(), this.getXVarStreakCompareType(), null, "compare", null, 0, 1, XVarStreakType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXVarStreakType_Value(), this.getXVarStreakValueType(), null, "value", null, 0, 1, XVarStreakType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xVarStreakCompareTypeEClass, XVarStreakCompareType.class, "XVarStreakCompareType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getXVarStreakCompareType_Function(), ecorePackage.getEString(), "function", null, 0, 1, XVarStreakCompareType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getXVarStreakCompareType_Offset(), ecorePackage.getEInt(), "offset", null, 0, 1, XVarStreakCompareType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getXVarStreakCompareType_Op(), ecorePackage.getEString(), "op", null, 0, 1, XVarStreakCompareType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getXVarStreakCompareType_Test(), ecorePackage.getEDouble(), "test", null, 0, 1, XVarStreakCompareType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xVarStreakValueTypeEClass, XVarStreakValueType.class, "XVarStreakValueType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getXVarStreakValueType_Op(), ecorePackage.getEString(), "op", null, 0, 1, XVarStreakValueType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getXVarStreakValueType_Test(), ecorePackage.getEDouble(), "test", null, 0, 1, XVarStreakValueType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xVarCompareStreakTypeEClass, XVarCompareStreakType.class, "XVarCompareStreakType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXVarCompareStreakType_TargetVar(), this.getVarType(), null, "targetVar", null, 0, 1, XVarCompareStreakType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXVarCompareStreakType_CompareVar(), this.getVarType(), null, "compareVar", null, 0, 1, XVarCompareStreakType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getXVarCompareStreakType_Direction(), ecorePackage.getEString(), "direction", null, 0, 1, XVarCompareStreakType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXVarCompareStreakType_StartIndexExp(), this.getXExpressionType(), null, "startIndexExp", null, 0, 1, XVarCompareStreakType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getXVarCompareStreakType_Function(), ecorePackage.getEString(), "function", null, 0, 1, XVarCompareStreakType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getXVarCompareStreakType_Op(), ecorePackage.getEString(), "op", null, 0, 1, XVarCompareStreakType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getXVarCompareStreakType_Test(), ecorePackage.getEDouble(), "test", null, 0, 1, XVarCompareStreakType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xSlrAvgExpTypeEClass, XSlrAvgExpType.class, "XSlrAvgExpType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXSlrAvgExpType_Var(), this.getVarType(), null, "var", null, 0, 1, XSlrAvgExpType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXSlrAvgExpType_StartValue(), this.getXExpressionType(), null, "startValue", null, 0, 1, XSlrAvgExpType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXSlrAvgExpType_EndValue(), this.getXExpressionType(), null, "endValue", null, 0, 1, XSlrAvgExpType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xLastSignalTriggerTypeEClass, XLastSignalTriggerType.class, "XLastSignalTriggerType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXLastSignalTriggerType_Signal(), this.getSignalType(), null, "signal", null, 0, 1, XLastSignalTriggerType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xSignalTriggerCountTypeEClass, XSignalTriggerCountType.class, "XSignalTriggerCountType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXSignalTriggerCountType_Signal(), this.getSignalType(), null, "signal", null, 0, 1, XSignalTriggerCountType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getXSignalTriggerCountType_Lookback(), ecorePackage.getEInt(), "lookback", null, 0, 1, XSignalTriggerCountType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xVarianceAverageTypeEClass, XVarianceAverageType.class, "XVarianceAverageType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXVarianceAverageType_Target(), this.getVarType(), null, "target", null, 0, 1, XVarianceAverageType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXVarianceAverageType_Compare(), this.getVarType(), null, "compare", null, 0, 1, XVarianceAverageType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXVarianceAverageType_Start(), this.getXExpressionType(), null, "start", null, 0, 1, XVarianceAverageType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXVarianceAverageType_End(), this.getXExpressionType(), null, "end", null, 0, 1, XVarianceAverageType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xVarianceMaxTypeEClass, XVarianceMaxType.class, "XVarianceMaxType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXVarianceMaxType_Target(), this.getVarType(), null, "target", null, 0, 1, XVarianceMaxType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXVarianceMaxType_Compare(), this.getVarType(), null, "compare", null, 0, 1, XVarianceMaxType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXVarianceMaxType_Start(), this.getXExpressionType(), null, "start", null, 0, 1, XVarianceMaxType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXVarianceMaxType_End(), this.getXExpressionType(), null, "end", null, 0, 1, XVarianceMaxType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xRocExpTypeEClass, XRocExpType.class, "XRocExpType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXRocExpType_Value1(), this.getXExpressionType(), null, "value1", null, 0, 1, XRocExpType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXRocExpType_Value2(), this.getXExpressionType(), null, "value2", null, 0, 1, XRocExpType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(orTypeEClass, OrType.class, "OrType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getOrType_Left(), this.getExpressionType(), null, "left", null, 0, 1, OrType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOrType_Right(), this.getExpressionType(), null, "right", null, 0, 1, OrType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(andTypeEClass, AndType.class, "AndType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAndType_Left(), this.getExpressionType(), null, "left", null, 0, 1, AndType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAndType_Right(), this.getExpressionType(), null, "right", null, 0, 1, AndType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(equalityTypeEClass, EqualityType.class, "EqualityType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getEqualityType_Left(), this.getExpressionType(), null, "left", null, 0, 1, EqualityType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEqualityType_Op(), ecorePackage.getEString(), "op", null, 0, 1, EqualityType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEqualityType_Right(), this.getExpressionType(), null, "right", null, 0, 1, EqualityType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(comparisonTypeEClass, ComparisonType.class, "ComparisonType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getComparisonType_Left(), this.getExpressionType(), null, "left", null, 0, 1, ComparisonType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getComparisonType_Op(), ecorePackage.getEString(), "op", null, 0, 1, ComparisonType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getComparisonType_Right(), this.getExpressionType(), null, "right", null, 0, 1, ComparisonType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(plusTypeEClass, PlusType.class, "PlusType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPlusType_Left(), this.getExpressionType(), null, "left", null, 0, 1, PlusType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPlusType_Right(), this.getExpressionType(), null, "right", null, 0, 1, PlusType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(minusTypeEClass, MinusType.class, "MinusType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMinusType_Left(), this.getExpressionType(), null, "left", null, 0, 1, MinusType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMinusType_Right(), this.getExpressionType(), null, "right", null, 0, 1, MinusType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(mulOrDivTypeEClass, MulOrDivType.class, "MulOrDivType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMulOrDivType_Left(), this.getExpressionType(), null, "left", null, 0, 1, MulOrDivType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMulOrDivType_Op(), ecorePackage.getEString(), "op", null, 0, 1, MulOrDivType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMulOrDivType_Right(), this.getExpressionType(), null, "right", null, 0, 1, MulOrDivType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(notTypeEClass, NotType.class, "NotType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getNotType_Expression(), this.getExpressionType(), null, "expression", null, 0, 1, NotType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(doubleConstantTypeEClass, DoubleConstantType.class, "DoubleConstantType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDoubleConstantType_Value(), ecorePackage.getEDouble(), "value", null, 0, 1, DoubleConstantType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(intConstantTypeEClass, IntConstantType.class, "IntConstantType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getIntConstantType_Value(), ecorePackage.getEInt(), "value", null, 0, 1, IntConstantType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stringConstantTypeEClass, StringConstantType.class, "StringConstantType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStringConstantType_Value(), ecorePackage.getEString(), "value", null, 0, 1, StringConstantType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(boolConstantTypeEClass, BoolConstantType.class, "BoolConstantType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBoolConstantType_Value(), ecorePackage.getEString(), "value", null, 0, 1, BoolConstantType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(tickExpressionTypeEClass, TickExpressionType.class, "TickExpressionType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTickExpressionType_Type(), ecorePackage.getEInt(), "type", null, 0, 1, TickExpressionType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTickExpressionType_Field(), ecorePackage.getEInt(), "field", null, 0, 1, TickExpressionType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTickExpressionType_DataType(), this.getDataType(), "dataType", null, 0, 1, TickExpressionType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xClassTypeEClass, XClassType.class, "XClassType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getXClassType_Name(), ecorePackage.getEString(), "name", null, 0, 1, XClassType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getXClassType_SymbolFilter(), ecorePackage.getEString(), "symbolFilter", null, 0, 1, XClassType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXClassType_Elements(), this.getXClassElementType(), null, "elements", null, 0, -1, XClassType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xOrTypeEClass, XOrType.class, "XOrType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXOrType_Left(), this.getXExpressionType(), null, "left", null, 0, 1, XOrType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXOrType_Right(), this.getXExpressionType(), null, "right", null, 0, 1, XOrType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xAndTypeEClass, XAndType.class, "XAndType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXAndType_Left(), this.getXExpressionType(), null, "left", null, 0, 1, XAndType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXAndType_Right(), this.getXExpressionType(), null, "right", null, 0, 1, XAndType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xEqualityTypeEClass, XEqualityType.class, "XEqualityType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXEqualityType_Left(), this.getXExpressionType(), null, "left", null, 0, 1, XEqualityType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getXEqualityType_Op(), ecorePackage.getEString(), "op", null, 0, 1, XEqualityType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXEqualityType_Right(), this.getXExpressionType(), null, "right", null, 0, 1, XEqualityType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xComparisonTypeEClass, XComparisonType.class, "XComparisonType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXComparisonType_Left(), this.getXExpressionType(), null, "left", null, 0, 1, XComparisonType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getXComparisonType_Op(), ecorePackage.getEString(), "op", null, 0, 1, XComparisonType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXComparisonType_Right(), this.getXExpressionType(), null, "right", null, 0, 1, XComparisonType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xPlusTypeEClass, XPlusType.class, "XPlusType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXPlusType_Left(), this.getXExpressionType(), null, "left", null, 0, 1, XPlusType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXPlusType_Right(), this.getXExpressionType(), null, "right", null, 0, 1, XPlusType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xMinusTypeEClass, XMinusType.class, "XMinusType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXMinusType_Left(), this.getXExpressionType(), null, "left", null, 0, 1, XMinusType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXMinusType_Right(), this.getXExpressionType(), null, "right", null, 0, 1, XMinusType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xMulOrDivTypeEClass, XMulOrDivType.class, "XMulOrDivType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXMulOrDivType_Left(), this.getXExpressionType(), null, "left", null, 0, 1, XMulOrDivType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getXMulOrDivType_Op(), ecorePackage.getEString(), "op", null, 0, 1, XMulOrDivType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getXMulOrDivType_Right(), this.getXExpressionType(), null, "right", null, 0, 1, XMulOrDivType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xNotTypeEClass, XNotType.class, "XNotType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getXNotType_Expression(), this.getXExpressionType(), null, "expression", null, 0, 1, XNotType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xDoubleConstantTypeEClass, XDoubleConstantType.class, "XDoubleConstantType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getXDoubleConstantType_Value(), ecorePackage.getEDouble(), "value", null, 0, 1, XDoubleConstantType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xIntConstantTypeEClass, XIntConstantType.class, "XIntConstantType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getXIntConstantType_Value(), ecorePackage.getEInt(), "value", null, 0, 1, XIntConstantType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xStringConstantTypeEClass, XStringConstantType.class, "XStringConstantType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getXStringConstantType_Value(), ecorePackage.getEString(), "value", null, 0, 1, XStringConstantType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(xBoolConstantTypeEClass, XBoolConstantType.class, "XBoolConstantType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getXBoolConstantType_Value(), ecorePackage.getEString(), "value", null, 0, 1, XBoolConstantType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(historicalAggFuncEEnum, HistoricalAggFunc.class, "HistoricalAggFunc");
    addEEnumLiteral(historicalAggFuncEEnum, HistoricalAggFunc.HIGH);
    addEEnumLiteral(historicalAggFuncEEnum, HistoricalAggFunc.LOW);

    initEEnum(sessionAggFuncEEnum, SessionAggFunc.class, "SessionAggFunc");
    addEEnumLiteral(sessionAggFuncEEnum, SessionAggFunc.HIGH);
    addEEnumLiteral(sessionAggFuncEEnum, SessionAggFunc.LOW);

    initEEnum(sessionTimeUnitEEnum, SessionTimeUnit.class, "SessionTimeUnit");
    addEEnumLiteral(sessionTimeUnitEEnum, SessionTimeUnit.SEC);
    addEEnumLiteral(sessionTimeUnitEEnum, SessionTimeUnit.MIN);

    initEEnum(streamTimeUnitEEnum, StreamTimeUnit.class, "StreamTimeUnit");
    addEEnumLiteral(streamTimeUnitEEnum, StreamTimeUnit.SECOND);
    addEEnumLiteral(streamTimeUnitEEnum, StreamTimeUnit.MINUTE);
    addEEnumLiteral(streamTimeUnitEEnum, StreamTimeUnit.HOUR);

    initEEnum(dataTypeEEnum, DataType.class, "DataType");
    addEEnumLiteral(dataTypeEEnum, DataType.STR);
    addEEnumLiteral(dataTypeEEnum, DataType.INT);
    addEEnumLiteral(dataTypeEEnum, DataType.BO_OL);
    addEEnumLiteral(dataTypeEEnum, DataType.T);
    addEEnumLiteral(dataTypeEEnum, DataType.DT);
    addEEnumLiteral(dataTypeEEnum, DataType.DATE);
    addEEnumLiteral(dataTypeEEnum, DataType.DUB);
    addEEnumLiteral(dataTypeEEnum, DataType.LONG);

    // Create resource
    createResource(eNS_URI);
  }

} //XScriptPackageImpl
