/**
 * generated by Xtext 2.31.0
 */
package com.dunkware.xstream.xScript.impl;

import com.dunkware.xstream.xScript.HistoryTimeRange;
import com.dunkware.xstream.xScript.SignalCountHistory;
import com.dunkware.xstream.xScript.SignalType;
import com.dunkware.xstream.xScript.XScriptPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Signal Count History</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.dunkware.xstream.xScript.impl.SignalCountHistoryImpl#getSignal <em>Signal</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.SignalCountHistoryImpl#getTimeRange <em>Time Range</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SignalCountHistoryImpl extends ExpressionTypeImpl implements SignalCountHistory
{
  /**
   * The cached value of the '{@link #getSignal() <em>Signal</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSignal()
   * @generated
   * @ordered
   */
  protected SignalType signal;

  /**
   * The cached value of the '{@link #getTimeRange() <em>Time Range</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeRange()
   * @generated
   * @ordered
   */
  protected HistoryTimeRange timeRange;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SignalCountHistoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XScriptPackage.Literals.SIGNAL_COUNT_HISTORY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SignalType getSignal()
  {
    if (signal != null && signal.eIsProxy())
    {
      InternalEObject oldSignal = (InternalEObject)signal;
      signal = (SignalType)eResolveProxy(oldSignal);
      if (signal != oldSignal)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XScriptPackage.SIGNAL_COUNT_HISTORY__SIGNAL, oldSignal, signal));
      }
    }
    return signal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SignalType basicGetSignal()
  {
    return signal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSignal(SignalType newSignal)
  {
    SignalType oldSignal = signal;
    signal = newSignal;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.SIGNAL_COUNT_HISTORY__SIGNAL, oldSignal, signal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HistoryTimeRange getTimeRange()
  {
    return timeRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTimeRange(HistoryTimeRange newTimeRange, NotificationChain msgs)
  {
    HistoryTimeRange oldTimeRange = timeRange;
    timeRange = newTimeRange;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XScriptPackage.SIGNAL_COUNT_HISTORY__TIME_RANGE, oldTimeRange, newTimeRange);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTimeRange(HistoryTimeRange newTimeRange)
  {
    if (newTimeRange != timeRange)
    {
      NotificationChain msgs = null;
      if (timeRange != null)
        msgs = ((InternalEObject)timeRange).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.SIGNAL_COUNT_HISTORY__TIME_RANGE, null, msgs);
      if (newTimeRange != null)
        msgs = ((InternalEObject)newTimeRange).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.SIGNAL_COUNT_HISTORY__TIME_RANGE, null, msgs);
      msgs = basicSetTimeRange(newTimeRange, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.SIGNAL_COUNT_HISTORY__TIME_RANGE, newTimeRange, newTimeRange));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XScriptPackage.SIGNAL_COUNT_HISTORY__TIME_RANGE:
        return basicSetTimeRange(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XScriptPackage.SIGNAL_COUNT_HISTORY__SIGNAL:
        if (resolve) return getSignal();
        return basicGetSignal();
      case XScriptPackage.SIGNAL_COUNT_HISTORY__TIME_RANGE:
        return getTimeRange();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XScriptPackage.SIGNAL_COUNT_HISTORY__SIGNAL:
        setSignal((SignalType)newValue);
        return;
      case XScriptPackage.SIGNAL_COUNT_HISTORY__TIME_RANGE:
        setTimeRange((HistoryTimeRange)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.SIGNAL_COUNT_HISTORY__SIGNAL:
        setSignal((SignalType)null);
        return;
      case XScriptPackage.SIGNAL_COUNT_HISTORY__TIME_RANGE:
        setTimeRange((HistoryTimeRange)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.SIGNAL_COUNT_HISTORY__SIGNAL:
        return signal != null;
      case XScriptPackage.SIGNAL_COUNT_HISTORY__TIME_RANGE:
        return timeRange != null;
    }
    return super.eIsSet(featureID);
  }

} //SignalCountHistoryImpl
