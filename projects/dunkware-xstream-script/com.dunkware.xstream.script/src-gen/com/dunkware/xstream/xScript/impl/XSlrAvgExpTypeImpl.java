/**
 * generated by Xtext 2.21.0
 */
package com.dunkware.xstream.xScript.impl;

import com.dunkware.xstream.xScript.VarType;
import com.dunkware.xstream.xScript.XExpressionType;
import com.dunkware.xstream.xScript.XScriptPackage;
import com.dunkware.xstream.xScript.XSlrAvgExpType;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>XSlr Avg Exp Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XSlrAvgExpTypeImpl#getVar <em>Var</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XSlrAvgExpTypeImpl#getStartValue <em>Start Value</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XSlrAvgExpTypeImpl#getEndValue <em>End Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XSlrAvgExpTypeImpl extends XExpressionTypeImpl implements XSlrAvgExpType
{
  /**
   * The cached value of the '{@link #getVar() <em>Var</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar()
   * @generated
   * @ordered
   */
  protected VarType var;

  /**
   * The cached value of the '{@link #getStartValue() <em>Start Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartValue()
   * @generated
   * @ordered
   */
  protected XExpressionType startValue;

  /**
   * The cached value of the '{@link #getEndValue() <em>End Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndValue()
   * @generated
   * @ordered
   */
  protected XExpressionType endValue;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XSlrAvgExpTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XScriptPackage.Literals.XSLR_AVG_EXP_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarType getVar()
  {
    if (var != null && var.eIsProxy())
    {
      InternalEObject oldVar = (InternalEObject)var;
      var = (VarType)eResolveProxy(oldVar);
      if (var != oldVar)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XScriptPackage.XSLR_AVG_EXP_TYPE__VAR, oldVar, var));
      }
    }
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarType basicGetVar()
  {
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVar(VarType newVar)
  {
    VarType oldVar = var;
    var = newVar;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XSLR_AVG_EXP_TYPE__VAR, oldVar, var));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XExpressionType getStartValue()
  {
    return startValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStartValue(XExpressionType newStartValue, NotificationChain msgs)
  {
    XExpressionType oldStartValue = startValue;
    startValue = newStartValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XScriptPackage.XSLR_AVG_EXP_TYPE__START_VALUE, oldStartValue, newStartValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStartValue(XExpressionType newStartValue)
  {
    if (newStartValue != startValue)
    {
      NotificationChain msgs = null;
      if (startValue != null)
        msgs = ((InternalEObject)startValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XSLR_AVG_EXP_TYPE__START_VALUE, null, msgs);
      if (newStartValue != null)
        msgs = ((InternalEObject)newStartValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XSLR_AVG_EXP_TYPE__START_VALUE, null, msgs);
      msgs = basicSetStartValue(newStartValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XSLR_AVG_EXP_TYPE__START_VALUE, newStartValue, newStartValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XExpressionType getEndValue()
  {
    return endValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEndValue(XExpressionType newEndValue, NotificationChain msgs)
  {
    XExpressionType oldEndValue = endValue;
    endValue = newEndValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XScriptPackage.XSLR_AVG_EXP_TYPE__END_VALUE, oldEndValue, newEndValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEndValue(XExpressionType newEndValue)
  {
    if (newEndValue != endValue)
    {
      NotificationChain msgs = null;
      if (endValue != null)
        msgs = ((InternalEObject)endValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XSLR_AVG_EXP_TYPE__END_VALUE, null, msgs);
      if (newEndValue != null)
        msgs = ((InternalEObject)newEndValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XSLR_AVG_EXP_TYPE__END_VALUE, null, msgs);
      msgs = basicSetEndValue(newEndValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XSLR_AVG_EXP_TYPE__END_VALUE, newEndValue, newEndValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XScriptPackage.XSLR_AVG_EXP_TYPE__START_VALUE:
        return basicSetStartValue(null, msgs);
      case XScriptPackage.XSLR_AVG_EXP_TYPE__END_VALUE:
        return basicSetEndValue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XScriptPackage.XSLR_AVG_EXP_TYPE__VAR:
        if (resolve) return getVar();
        return basicGetVar();
      case XScriptPackage.XSLR_AVG_EXP_TYPE__START_VALUE:
        return getStartValue();
      case XScriptPackage.XSLR_AVG_EXP_TYPE__END_VALUE:
        return getEndValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XScriptPackage.XSLR_AVG_EXP_TYPE__VAR:
        setVar((VarType)newValue);
        return;
      case XScriptPackage.XSLR_AVG_EXP_TYPE__START_VALUE:
        setStartValue((XExpressionType)newValue);
        return;
      case XScriptPackage.XSLR_AVG_EXP_TYPE__END_VALUE:
        setEndValue((XExpressionType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XSLR_AVG_EXP_TYPE__VAR:
        setVar((VarType)null);
        return;
      case XScriptPackage.XSLR_AVG_EXP_TYPE__START_VALUE:
        setStartValue((XExpressionType)null);
        return;
      case XScriptPackage.XSLR_AVG_EXP_TYPE__END_VALUE:
        setEndValue((XExpressionType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XSLR_AVG_EXP_TYPE__VAR:
        return var != null;
      case XScriptPackage.XSLR_AVG_EXP_TYPE__START_VALUE:
        return startValue != null;
      case XScriptPackage.XSLR_AVG_EXP_TYPE__END_VALUE:
        return endValue != null;
    }
    return super.eIsSet(featureID);
  }

} //XSlrAvgExpTypeImpl
