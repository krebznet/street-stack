/**
 * generated by Xtext 2.31.0
 */
package com.dunkware.xstream.xScript.impl;

import com.dunkware.xstream.xScript.XFunctionCallType;
import com.dunkware.xstream.xScript.XFunctionType;
import com.dunkware.xstream.xScript.XScriptPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>XFunction Call Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XFunctionCallTypeImpl#getFunction <em>Function</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XFunctionCallTypeImpl#getParams <em>Params</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XFunctionCallTypeImpl extends XFunctionCoreElementTypeImpl implements XFunctionCallType
{
  /**
   * The cached value of the '{@link #getFunction() <em>Function</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunction()
   * @generated
   * @ordered
   */
  protected XFunctionType function;

  /**
   * The default value of the '{@link #getParams() <em>Params</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParams()
   * @generated
   * @ordered
   */
  protected static final String PARAMS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getParams() <em>Params</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParams()
   * @generated
   * @ordered
   */
  protected String params = PARAMS_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XFunctionCallTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XScriptPackage.Literals.XFUNCTION_CALL_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XFunctionType getFunction()
  {
    if (function != null && function.eIsProxy())
    {
      InternalEObject oldFunction = (InternalEObject)function;
      function = (XFunctionType)eResolveProxy(oldFunction);
      if (function != oldFunction)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XScriptPackage.XFUNCTION_CALL_TYPE__FUNCTION, oldFunction, function));
      }
    }
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XFunctionType basicGetFunction()
  {
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFunction(XFunctionType newFunction)
  {
    XFunctionType oldFunction = function;
    function = newFunction;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XFUNCTION_CALL_TYPE__FUNCTION, oldFunction, function));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getParams()
  {
    return params;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParams(String newParams)
  {
    String oldParams = params;
    params = newParams;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XFUNCTION_CALL_TYPE__PARAMS, oldParams, params));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XScriptPackage.XFUNCTION_CALL_TYPE__FUNCTION:
        if (resolve) return getFunction();
        return basicGetFunction();
      case XScriptPackage.XFUNCTION_CALL_TYPE__PARAMS:
        return getParams();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XScriptPackage.XFUNCTION_CALL_TYPE__FUNCTION:
        setFunction((XFunctionType)newValue);
        return;
      case XScriptPackage.XFUNCTION_CALL_TYPE__PARAMS:
        setParams((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XFUNCTION_CALL_TYPE__FUNCTION:
        setFunction((XFunctionType)null);
        return;
      case XScriptPackage.XFUNCTION_CALL_TYPE__PARAMS:
        setParams(PARAMS_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XFUNCTION_CALL_TYPE__FUNCTION:
        return function != null;
      case XScriptPackage.XFUNCTION_CALL_TYPE__PARAMS:
        return PARAMS_EDEFAULT == null ? params != null : !PARAMS_EDEFAULT.equals(params);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (params: ");
    result.append(params);
    result.append(')');
    return result.toString();
  }

} //XFunctionCallTypeImpl
