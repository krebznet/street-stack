/**
 * generated by Xtext 2.21.0
 */
package com.dunkware.xstream.xScript.impl;

import com.dunkware.xstream.xScript.SessionSignalExpressionType;
import com.dunkware.xstream.xScript.SignalType;
import com.dunkware.xstream.xScript.StreamTimeUnit;
import com.dunkware.xstream.xScript.XScriptPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Session Signal Expression Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.dunkware.xstream.xScript.impl.SessionSignalExpressionTypeImpl#getSignal <em>Signal</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.SessionSignalExpressionTypeImpl#getOp <em>Op</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.SessionSignalExpressionTypeImpl#getCount <em>Count</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.SessionSignalExpressionTypeImpl#getTime <em>Time</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.SessionSignalExpressionTypeImpl#getUnit <em>Unit</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SessionSignalExpressionTypeImpl extends ExpressionTypeImpl implements SessionSignalExpressionType
{
  /**
   * The cached value of the '{@link #getSignal() <em>Signal</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSignal()
   * @generated
   * @ordered
   */
  protected SignalType signal;

  /**
   * The default value of the '{@link #getOp() <em>Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp()
   * @generated
   * @ordered
   */
  protected static final String OP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOp() <em>Op</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOp()
   * @generated
   * @ordered
   */
  protected String op = OP_EDEFAULT;

  /**
   * The default value of the '{@link #getCount() <em>Count</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCount()
   * @generated
   * @ordered
   */
  protected static final int COUNT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getCount() <em>Count</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCount()
   * @generated
   * @ordered
   */
  protected int count = COUNT_EDEFAULT;

  /**
   * The default value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected static final int TIME_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected int time = TIME_EDEFAULT;

  /**
   * The default value of the '{@link #getUnit() <em>Unit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnit()
   * @generated
   * @ordered
   */
  protected static final StreamTimeUnit UNIT_EDEFAULT = StreamTimeUnit.SECOND;

  /**
   * The cached value of the '{@link #getUnit() <em>Unit</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnit()
   * @generated
   * @ordered
   */
  protected StreamTimeUnit unit = UNIT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SessionSignalExpressionTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XScriptPackage.Literals.SESSION_SIGNAL_EXPRESSION_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SignalType getSignal()
  {
    if (signal != null && signal.eIsProxy())
    {
      InternalEObject oldSignal = (InternalEObject)signal;
      signal = (SignalType)eResolveProxy(oldSignal);
      if (signal != oldSignal)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__SIGNAL, oldSignal, signal));
      }
    }
    return signal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SignalType basicGetSignal()
  {
    return signal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSignal(SignalType newSignal)
  {
    SignalType oldSignal = signal;
    signal = newSignal;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__SIGNAL, oldSignal, signal));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOp()
  {
    return op;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOp(String newOp)
  {
    String oldOp = op;
    op = newOp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__OP, oldOp, op));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getCount()
  {
    return count;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCount(int newCount)
  {
    int oldCount = count;
    count = newCount;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__COUNT, oldCount, count));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getTime()
  {
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTime(int newTime)
  {
    int oldTime = time;
    time = newTime;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__TIME, oldTime, time));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StreamTimeUnit getUnit()
  {
    return unit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUnit(StreamTimeUnit newUnit)
  {
    StreamTimeUnit oldUnit = unit;
    unit = newUnit == null ? UNIT_EDEFAULT : newUnit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__UNIT, oldUnit, unit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__SIGNAL:
        if (resolve) return getSignal();
        return basicGetSignal();
      case XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__OP:
        return getOp();
      case XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__COUNT:
        return getCount();
      case XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__TIME:
        return getTime();
      case XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__UNIT:
        return getUnit();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__SIGNAL:
        setSignal((SignalType)newValue);
        return;
      case XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__OP:
        setOp((String)newValue);
        return;
      case XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__COUNT:
        setCount((Integer)newValue);
        return;
      case XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__TIME:
        setTime((Integer)newValue);
        return;
      case XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__UNIT:
        setUnit((StreamTimeUnit)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__SIGNAL:
        setSignal((SignalType)null);
        return;
      case XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__OP:
        setOp(OP_EDEFAULT);
        return;
      case XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__COUNT:
        setCount(COUNT_EDEFAULT);
        return;
      case XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__TIME:
        setTime(TIME_EDEFAULT);
        return;
      case XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__UNIT:
        setUnit(UNIT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__SIGNAL:
        return signal != null;
      case XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__OP:
        return OP_EDEFAULT == null ? op != null : !OP_EDEFAULT.equals(op);
      case XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__COUNT:
        return count != COUNT_EDEFAULT;
      case XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__TIME:
        return time != TIME_EDEFAULT;
      case XScriptPackage.SESSION_SIGNAL_EXPRESSION_TYPE__UNIT:
        return unit != UNIT_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (op: ");
    result.append(op);
    result.append(", count: ");
    result.append(count);
    result.append(", time: ");
    result.append(time);
    result.append(", unit: ");
    result.append(unit);
    result.append(')');
    return result.toString();
  }

} //SessionSignalExpressionTypeImpl
