/**
 * generated by Xtext 2.21.0
 */
package com.dunkware.xstream.xScript.impl;

import com.dunkware.xstream.xScript.VarType;
import com.dunkware.xstream.xScript.XExpressionType;
import com.dunkware.xstream.xScript.XScriptPackage;
import com.dunkware.xstream.xScript.XVarianceAverageType;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>XVariance Average Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XVarianceAverageTypeImpl#getTarget <em>Target</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XVarianceAverageTypeImpl#getCompare <em>Compare</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XVarianceAverageTypeImpl#getStart <em>Start</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XVarianceAverageTypeImpl#getEnd <em>End</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XVarianceAverageTypeImpl extends XExpressionTypeImpl implements XVarianceAverageType
{
  /**
   * The cached value of the '{@link #getTarget() <em>Target</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected VarType target;

  /**
   * The cached value of the '{@link #getCompare() <em>Compare</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompare()
   * @generated
   * @ordered
   */
  protected VarType compare;

  /**
   * The cached value of the '{@link #getStart() <em>Start</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStart()
   * @generated
   * @ordered
   */
  protected XExpressionType start;

  /**
   * The cached value of the '{@link #getEnd() <em>End</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnd()
   * @generated
   * @ordered
   */
  protected XExpressionType end;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XVarianceAverageTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XScriptPackage.Literals.XVARIANCE_AVERAGE_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarType getTarget()
  {
    if (target != null && target.eIsProxy())
    {
      InternalEObject oldTarget = (InternalEObject)target;
      target = (VarType)eResolveProxy(oldTarget);
      if (target != oldTarget)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XScriptPackage.XVARIANCE_AVERAGE_TYPE__TARGET, oldTarget, target));
      }
    }
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarType basicGetTarget()
  {
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTarget(VarType newTarget)
  {
    VarType oldTarget = target;
    target = newTarget;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XVARIANCE_AVERAGE_TYPE__TARGET, oldTarget, target));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarType getCompare()
  {
    if (compare != null && compare.eIsProxy())
    {
      InternalEObject oldCompare = (InternalEObject)compare;
      compare = (VarType)eResolveProxy(oldCompare);
      if (compare != oldCompare)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XScriptPackage.XVARIANCE_AVERAGE_TYPE__COMPARE, oldCompare, compare));
      }
    }
    return compare;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarType basicGetCompare()
  {
    return compare;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCompare(VarType newCompare)
  {
    VarType oldCompare = compare;
    compare = newCompare;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XVARIANCE_AVERAGE_TYPE__COMPARE, oldCompare, compare));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XExpressionType getStart()
  {
    return start;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStart(XExpressionType newStart, NotificationChain msgs)
  {
    XExpressionType oldStart = start;
    start = newStart;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XScriptPackage.XVARIANCE_AVERAGE_TYPE__START, oldStart, newStart);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStart(XExpressionType newStart)
  {
    if (newStart != start)
    {
      NotificationChain msgs = null;
      if (start != null)
        msgs = ((InternalEObject)start).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XVARIANCE_AVERAGE_TYPE__START, null, msgs);
      if (newStart != null)
        msgs = ((InternalEObject)newStart).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XVARIANCE_AVERAGE_TYPE__START, null, msgs);
      msgs = basicSetStart(newStart, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XVARIANCE_AVERAGE_TYPE__START, newStart, newStart));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XExpressionType getEnd()
  {
    return end;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEnd(XExpressionType newEnd, NotificationChain msgs)
  {
    XExpressionType oldEnd = end;
    end = newEnd;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XScriptPackage.XVARIANCE_AVERAGE_TYPE__END, oldEnd, newEnd);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEnd(XExpressionType newEnd)
  {
    if (newEnd != end)
    {
      NotificationChain msgs = null;
      if (end != null)
        msgs = ((InternalEObject)end).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XVARIANCE_AVERAGE_TYPE__END, null, msgs);
      if (newEnd != null)
        msgs = ((InternalEObject)newEnd).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XVARIANCE_AVERAGE_TYPE__END, null, msgs);
      msgs = basicSetEnd(newEnd, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XVARIANCE_AVERAGE_TYPE__END, newEnd, newEnd));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XScriptPackage.XVARIANCE_AVERAGE_TYPE__START:
        return basicSetStart(null, msgs);
      case XScriptPackage.XVARIANCE_AVERAGE_TYPE__END:
        return basicSetEnd(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XScriptPackage.XVARIANCE_AVERAGE_TYPE__TARGET:
        if (resolve) return getTarget();
        return basicGetTarget();
      case XScriptPackage.XVARIANCE_AVERAGE_TYPE__COMPARE:
        if (resolve) return getCompare();
        return basicGetCompare();
      case XScriptPackage.XVARIANCE_AVERAGE_TYPE__START:
        return getStart();
      case XScriptPackage.XVARIANCE_AVERAGE_TYPE__END:
        return getEnd();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XScriptPackage.XVARIANCE_AVERAGE_TYPE__TARGET:
        setTarget((VarType)newValue);
        return;
      case XScriptPackage.XVARIANCE_AVERAGE_TYPE__COMPARE:
        setCompare((VarType)newValue);
        return;
      case XScriptPackage.XVARIANCE_AVERAGE_TYPE__START:
        setStart((XExpressionType)newValue);
        return;
      case XScriptPackage.XVARIANCE_AVERAGE_TYPE__END:
        setEnd((XExpressionType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XVARIANCE_AVERAGE_TYPE__TARGET:
        setTarget((VarType)null);
        return;
      case XScriptPackage.XVARIANCE_AVERAGE_TYPE__COMPARE:
        setCompare((VarType)null);
        return;
      case XScriptPackage.XVARIANCE_AVERAGE_TYPE__START:
        setStart((XExpressionType)null);
        return;
      case XScriptPackage.XVARIANCE_AVERAGE_TYPE__END:
        setEnd((XExpressionType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XVARIANCE_AVERAGE_TYPE__TARGET:
        return target != null;
      case XScriptPackage.XVARIANCE_AVERAGE_TYPE__COMPARE:
        return compare != null;
      case XScriptPackage.XVARIANCE_AVERAGE_TYPE__START:
        return start != null;
      case XScriptPackage.XVARIANCE_AVERAGE_TYPE__END:
        return end != null;
    }
    return super.eIsSet(featureID);
  }

} //XVarianceAverageTypeImpl
