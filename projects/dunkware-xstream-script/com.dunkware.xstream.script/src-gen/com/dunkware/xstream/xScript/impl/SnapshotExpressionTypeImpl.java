/**
 * generated by Xtext 2.31.0
 */
package com.dunkware.xstream.xScript.impl;

import com.dunkware.xstream.xScript.ExpressionType;
import com.dunkware.xstream.xScript.SnapshotExpressionType;
import com.dunkware.xstream.xScript.StreamTimeUnit;
import com.dunkware.xstream.xScript.XScriptPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Snapshot Expression Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.dunkware.xstream.xScript.impl.SnapshotExpressionTypeImpl#getTarget <em>Target</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.SnapshotExpressionTypeImpl#getInterval <em>Interval</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.SnapshotExpressionTypeImpl#getTime <em>Time</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SnapshotExpressionTypeImpl extends ExpressionTypeImpl implements SnapshotExpressionType
{
  /**
   * The cached value of the '{@link #getTarget() <em>Target</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected ExpressionType target;

  /**
   * The default value of the '{@link #getInterval() <em>Interval</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInterval()
   * @generated
   * @ordered
   */
  protected static final int INTERVAL_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getInterval() <em>Interval</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInterval()
   * @generated
   * @ordered
   */
  protected int interval = INTERVAL_EDEFAULT;

  /**
   * The default value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected static final StreamTimeUnit TIME_EDEFAULT = StreamTimeUnit.SECOND;

  /**
   * The cached value of the '{@link #getTime() <em>Time</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected StreamTimeUnit time = TIME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SnapshotExpressionTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XScriptPackage.Literals.SNAPSHOT_EXPRESSION_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionType getTarget()
  {
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTarget(ExpressionType newTarget, NotificationChain msgs)
  {
    ExpressionType oldTarget = target;
    target = newTarget;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XScriptPackage.SNAPSHOT_EXPRESSION_TYPE__TARGET, oldTarget, newTarget);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTarget(ExpressionType newTarget)
  {
    if (newTarget != target)
    {
      NotificationChain msgs = null;
      if (target != null)
        msgs = ((InternalEObject)target).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.SNAPSHOT_EXPRESSION_TYPE__TARGET, null, msgs);
      if (newTarget != null)
        msgs = ((InternalEObject)newTarget).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.SNAPSHOT_EXPRESSION_TYPE__TARGET, null, msgs);
      msgs = basicSetTarget(newTarget, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.SNAPSHOT_EXPRESSION_TYPE__TARGET, newTarget, newTarget));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getInterval()
  {
    return interval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInterval(int newInterval)
  {
    int oldInterval = interval;
    interval = newInterval;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.SNAPSHOT_EXPRESSION_TYPE__INTERVAL, oldInterval, interval));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StreamTimeUnit getTime()
  {
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTime(StreamTimeUnit newTime)
  {
    StreamTimeUnit oldTime = time;
    time = newTime == null ? TIME_EDEFAULT : newTime;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.SNAPSHOT_EXPRESSION_TYPE__TIME, oldTime, time));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XScriptPackage.SNAPSHOT_EXPRESSION_TYPE__TARGET:
        return basicSetTarget(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XScriptPackage.SNAPSHOT_EXPRESSION_TYPE__TARGET:
        return getTarget();
      case XScriptPackage.SNAPSHOT_EXPRESSION_TYPE__INTERVAL:
        return getInterval();
      case XScriptPackage.SNAPSHOT_EXPRESSION_TYPE__TIME:
        return getTime();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XScriptPackage.SNAPSHOT_EXPRESSION_TYPE__TARGET:
        setTarget((ExpressionType)newValue);
        return;
      case XScriptPackage.SNAPSHOT_EXPRESSION_TYPE__INTERVAL:
        setInterval((Integer)newValue);
        return;
      case XScriptPackage.SNAPSHOT_EXPRESSION_TYPE__TIME:
        setTime((StreamTimeUnit)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.SNAPSHOT_EXPRESSION_TYPE__TARGET:
        setTarget((ExpressionType)null);
        return;
      case XScriptPackage.SNAPSHOT_EXPRESSION_TYPE__INTERVAL:
        setInterval(INTERVAL_EDEFAULT);
        return;
      case XScriptPackage.SNAPSHOT_EXPRESSION_TYPE__TIME:
        setTime(TIME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.SNAPSHOT_EXPRESSION_TYPE__TARGET:
        return target != null;
      case XScriptPackage.SNAPSHOT_EXPRESSION_TYPE__INTERVAL:
        return interval != INTERVAL_EDEFAULT;
      case XScriptPackage.SNAPSHOT_EXPRESSION_TYPE__TIME:
        return time != TIME_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (interval: ");
    result.append(interval);
    result.append(", time: ");
    result.append(time);
    result.append(')');
    return result.toString();
  }

} //SnapshotExpressionTypeImpl
