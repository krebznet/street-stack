/**
 * generated by Xtext 2.28.0
 */
package com.dunkware.xstream.xScript.impl;

import com.dunkware.xstream.xScript.ExpressionType;
import com.dunkware.xstream.xScript.XScriptPackage;
import com.dunkware.xstream.xScript.XStreamWrapperExpType;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>XStream Wrapper Exp Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XStreamWrapperExpTypeImpl#getWrapperExp <em>Wrapper Exp</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XStreamWrapperExpTypeImpl extends XExpressionTypeImpl implements XStreamWrapperExpType
{
  /**
   * The cached value of the '{@link #getWrapperExp() <em>Wrapper Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWrapperExp()
   * @generated
   * @ordered
   */
  protected ExpressionType wrapperExp;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XStreamWrapperExpTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XScriptPackage.Literals.XSTREAM_WRAPPER_EXP_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionType getWrapperExp()
  {
    return wrapperExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWrapperExp(ExpressionType newWrapperExp, NotificationChain msgs)
  {
    ExpressionType oldWrapperExp = wrapperExp;
    wrapperExp = newWrapperExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XScriptPackage.XSTREAM_WRAPPER_EXP_TYPE__WRAPPER_EXP, oldWrapperExp, newWrapperExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWrapperExp(ExpressionType newWrapperExp)
  {
    if (newWrapperExp != wrapperExp)
    {
      NotificationChain msgs = null;
      if (wrapperExp != null)
        msgs = ((InternalEObject)wrapperExp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XSTREAM_WRAPPER_EXP_TYPE__WRAPPER_EXP, null, msgs);
      if (newWrapperExp != null)
        msgs = ((InternalEObject)newWrapperExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XSTREAM_WRAPPER_EXP_TYPE__WRAPPER_EXP, null, msgs);
      msgs = basicSetWrapperExp(newWrapperExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XSTREAM_WRAPPER_EXP_TYPE__WRAPPER_EXP, newWrapperExp, newWrapperExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XScriptPackage.XSTREAM_WRAPPER_EXP_TYPE__WRAPPER_EXP:
        return basicSetWrapperExp(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XScriptPackage.XSTREAM_WRAPPER_EXP_TYPE__WRAPPER_EXP:
        return getWrapperExp();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XScriptPackage.XSTREAM_WRAPPER_EXP_TYPE__WRAPPER_EXP:
        setWrapperExp((ExpressionType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XSTREAM_WRAPPER_EXP_TYPE__WRAPPER_EXP:
        setWrapperExp((ExpressionType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XSTREAM_WRAPPER_EXP_TYPE__WRAPPER_EXP:
        return wrapperExp != null;
    }
    return super.eIsSet(featureID);
  }

} //XStreamWrapperExpTypeImpl
