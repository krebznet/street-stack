/**
 * generated by Xtext 2.21.0
 */
package com.dunkware.xstream.xScript.impl;

import com.dunkware.xstream.xScript.XQueryFilterType;
import com.dunkware.xstream.xScript.XScriptPackage;
import com.dunkware.xstream.xScript.XStreamOperator;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>XQuery Filter Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XQueryFilterTypeImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XQueryFilterTypeImpl#getCriteria <em>Criteria</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XQueryFilterTypeImpl extends MinimalEObjectImpl.Container implements XQueryFilterType
{
  /**
   * The default value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected static final XStreamOperator OPERATOR_EDEFAULT = XStreamOperator.GT;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected XStreamOperator operator = OPERATOR_EDEFAULT;

  /**
   * The default value of the '{@link #getCriteria() <em>Criteria</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCriteria()
   * @generated
   * @ordered
   */
  protected static final String CRITERIA_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCriteria() <em>Criteria</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCriteria()
   * @generated
   * @ordered
   */
  protected String criteria = CRITERIA_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XQueryFilterTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XScriptPackage.Literals.XQUERY_FILTER_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XStreamOperator getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperator(XStreamOperator newOperator)
  {
    XStreamOperator oldOperator = operator;
    operator = newOperator == null ? OPERATOR_EDEFAULT : newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XQUERY_FILTER_TYPE__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCriteria()
  {
    return criteria;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCriteria(String newCriteria)
  {
    String oldCriteria = criteria;
    criteria = newCriteria;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XQUERY_FILTER_TYPE__CRITERIA, oldCriteria, criteria));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XScriptPackage.XQUERY_FILTER_TYPE__OPERATOR:
        return getOperator();
      case XScriptPackage.XQUERY_FILTER_TYPE__CRITERIA:
        return getCriteria();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XScriptPackage.XQUERY_FILTER_TYPE__OPERATOR:
        setOperator((XStreamOperator)newValue);
        return;
      case XScriptPackage.XQUERY_FILTER_TYPE__CRITERIA:
        setCriteria((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XQUERY_FILTER_TYPE__OPERATOR:
        setOperator(OPERATOR_EDEFAULT);
        return;
      case XScriptPackage.XQUERY_FILTER_TYPE__CRITERIA:
        setCriteria(CRITERIA_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XQUERY_FILTER_TYPE__OPERATOR:
        return operator != OPERATOR_EDEFAULT;
      case XScriptPackage.XQUERY_FILTER_TYPE__CRITERIA:
        return CRITERIA_EDEFAULT == null ? criteria != null : !CRITERIA_EDEFAULT.equals(criteria);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (operator: ");
    result.append(operator);
    result.append(", criteria: ");
    result.append(criteria);
    result.append(')');
    return result.toString();
  }

} //XQueryFilterTypeImpl
