/**
 * generated by Xtext 2.28.0
 */
package com.dunkware.xstream.xScript.util;

import com.dunkware.xstream.xScript.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see com.dunkware.xstream.xScript.XScriptPackage
 * @generated
 */
public class XScriptSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static XScriptPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public XScriptSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = XScriptPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case XScriptPackage.XSCRIPT:
      {
        XScript xScript = (XScript)theEObject;
        T result = caseXScript(xScript);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.SCRIPT_ELEMENT:
      {
        ScriptElement scriptElement = (ScriptElement)theEObject;
        T result = caseScriptElement(scriptElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.CORE_ABSTRACT_ELEMENT:
      {
        CoreAbstractElement coreAbstractElement = (CoreAbstractElement)theEObject;
        T result = caseCoreAbstractElement(coreAbstractElement);
        if (result == null) result = caseScriptElement(coreAbstractElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.VAR_TYPE:
      {
        VarType varType = (VarType)theEObject;
        T result = caseVarType(varType);
        if (result == null) result = caseCoreAbstractElement(varType);
        if (result == null) result = caseScriptElement(varType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.VAR_STORE_TYPE:
      {
        VarStoreType varStoreType = (VarStoreType)theEObject;
        T result = caseVarStoreType(varStoreType);
        if (result == null) result = caseVarType(varStoreType);
        if (result == null) result = caseCoreAbstractElement(varStoreType);
        if (result == null) result = caseScriptElement(varStoreType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.VAR_TRANS_TYPE:
      {
        VarTransType varTransType = (VarTransType)theEObject;
        T result = caseVarTransType(varTransType);
        if (result == null) result = caseVarType(varTransType);
        if (result == null) result = caseCoreAbstractElement(varTransType);
        if (result == null) result = caseScriptElement(varTransType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.EXPRESSION_TYPE:
      {
        ExpressionType expressionType = (ExpressionType)theEObject;
        T result = caseExpressionType(expressionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.VARIABLE_VALUE_RANGE_TYPE:
      {
        VariableValueRangeType variableValueRangeType = (VariableValueRangeType)theEObject;
        T result = caseVariableValueRangeType(variableValueRangeType);
        if (result == null) result = caseExpressionType(variableValueRangeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.VARIABLE_VALUE_TYPE:
      {
        VariableValueType variableValueType = (VariableValueType)theEObject;
        T result = caseVariableValueType(variableValueType);
        if (result == null) result = caseExpressionType(variableValueType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.VARIABLE_VALUE_EXP_TYPE:
      {
        VariableValueExpType variableValueExpType = (VariableValueExpType)theEObject;
        T result = caseVariableValueExpType(variableValueExpType);
        if (result == null) result = caseExpressionType(variableValueExpType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.SET_EXPRESSION_TYPE:
      {
        SetExpressionType setExpressionType = (SetExpressionType)theEObject;
        T result = caseSetExpressionType(setExpressionType);
        if (result == null) result = caseExpressionType(setExpressionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.SNAPSHOT_EXPRESSION_TYPE:
      {
        SnapshotExpressionType snapshotExpressionType = (SnapshotExpressionType)theEObject;
        T result = caseSnapshotExpressionType(snapshotExpressionType);
        if (result == null) result = caseExpressionType(snapshotExpressionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.ROC_EXPRESSION_TYPE:
      {
        RocExpressionType rocExpressionType = (RocExpressionType)theEObject;
        T result = caseRocExpressionType(rocExpressionType);
        if (result == null) result = caseExpressionType(rocExpressionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.AVG_EXPRESSION_TYPE:
      {
        AvgExpressionType avgExpressionType = (AvgExpressionType)theEObject;
        T result = caseAvgExpressionType(avgExpressionType);
        if (result == null) result = caseExpressionType(avgExpressionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.SUB_EXPRESSION_TYPE:
      {
        SubExpressionType subExpressionType = (SubExpressionType)theEObject;
        T result = caseSubExpressionType(subExpressionType);
        if (result == null) result = caseExpressionType(subExpressionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.HISTORY_TIME_RANGE:
      {
        HistoryTimeRange historyTimeRange = (HistoryTimeRange)theEObject;
        T result = caseHistoryTimeRange(historyTimeRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.SESSION_TIME_RANGE:
      {
        SessionTimeRange sessionTimeRange = (SessionTimeRange)theEObject;
        T result = caseSessionTimeRange(sessionTimeRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.RELATIVE_SESSION_TIME_RANGE:
      {
        RelativeSessionTimeRange relativeSessionTimeRange = (RelativeSessionTimeRange)theEObject;
        T result = caseRelativeSessionTimeRange(relativeSessionTimeRange);
        if (result == null) result = caseSessionTimeRange(relativeSessionTimeRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.TODAY_SESSION_TIME_RANGE:
      {
        TodaySessionTimeRange todaySessionTimeRange = (TodaySessionTimeRange)theEObject;
        T result = caseTodaySessionTimeRange(todaySessionTimeRange);
        if (result == null) result = caseSessionTimeRange(todaySessionTimeRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.VAR_AGG_SESSION_TYPE:
      {
        VarAggSessionType varAggSessionType = (VarAggSessionType)theEObject;
        T result = caseVarAggSessionType(varAggSessionType);
        if (result == null) result = caseExpressionType(varAggSessionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.VAR_AGG_HISTORY_TYPE:
      {
        VarAggHistoryType varAggHistoryType = (VarAggHistoryType)theEObject;
        T result = caseVarAggHistoryType(varAggHistoryType);
        if (result == null) result = caseExpressionType(varAggHistoryType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.SIGNAL_COUNT_SESSION:
      {
        SignalCountSession signalCountSession = (SignalCountSession)theEObject;
        T result = caseSignalCountSession(signalCountSession);
        if (result == null) result = caseExpressionType(signalCountSession);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.SIGNAL_COUNT_HISTORY:
      {
        SignalCountHistory signalCountHistory = (SignalCountHistory)theEObject;
        T result = caseSignalCountHistory(signalCountHistory);
        if (result == null) result = caseExpressionType(signalCountHistory);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.SIGNAL_TYPE:
      {
        SignalType signalType = (SignalType)theEObject;
        T result = caseSignalType(signalType);
        if (result == null) result = caseCoreAbstractElement(signalType);
        if (result == null) result = caseScriptElement(signalType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.ABSTRACT_ELEMENT:
      {
        AbstractElement abstractElement = (AbstractElement)theEObject;
        T result = caseAbstractElement(abstractElement);
        if (result == null) result = caseCoreAbstractElement(abstractElement);
        if (result == null) result = caseScriptElement(abstractElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XCLASS_ELEMENT_TYPE:
      {
        XClassElementType xClassElementType = (XClassElementType)theEObject;
        T result = caseXClassElementType(xClassElementType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XCLASS_CORE_ELEMENT_TYPE:
      {
        XClassCoreElementType xClassCoreElementType = (XClassCoreElementType)theEObject;
        T result = caseXClassCoreElementType(xClassCoreElementType);
        if (result == null) result = caseXClassElementType(xClassCoreElementType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XVAR_TYPE:
      {
        XVarType xVarType = (XVarType)theEObject;
        T result = caseXVarType(xVarType);
        if (result == null) result = caseXClassCoreElementType(xVarType);
        if (result == null) result = caseXFunctionCoreElementType(xVarType);
        if (result == null) result = caseXClassElementType(xVarType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XFUNCTION_TYPE:
      {
        XFunctionType xFunctionType = (XFunctionType)theEObject;
        T result = caseXFunctionType(xFunctionType);
        if (result == null) result = caseXClassCoreElementType(xFunctionType);
        if (result == null) result = caseXClassElementType(xFunctionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XFUNCTION_CORE_ELEMENT_TYPE:
      {
        XFunctionCoreElementType xFunctionCoreElementType = (XFunctionCoreElementType)theEObject;
        T result = caseXFunctionCoreElementType(xFunctionCoreElementType);
        if (result == null) result = caseXClassElementType(xFunctionCoreElementType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XFUNCTION_RETURN_TYPE:
      {
        XFunctionReturnType xFunctionReturnType = (XFunctionReturnType)theEObject;
        T result = caseXFunctionReturnType(xFunctionReturnType);
        if (result == null) result = caseXFunctionCoreElementType(xFunctionReturnType);
        if (result == null) result = caseXClassElementType(xFunctionReturnType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XFUNCTION_CALL_TYPE:
      {
        XFunctionCallType xFunctionCallType = (XFunctionCallType)theEObject;
        T result = caseXFunctionCallType(xFunctionCallType);
        if (result == null) result = caseXFunctionCoreElementType(xFunctionCallType);
        if (result == null) result = caseXClassElementType(xFunctionCallType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XSIGNAL_LISTENER_TYPE:
      {
        XSignalListenerType xSignalListenerType = (XSignalListenerType)theEObject;
        T result = caseXSignalListenerType(xSignalListenerType);
        if (result == null) result = caseXFunctionCoreElementType(xSignalListenerType);
        if (result == null) result = caseXClassElementType(xSignalListenerType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XSTREAM_VAR_LISTENER_TYPE:
      {
        XStreamVarListenerType xStreamVarListenerType = (XStreamVarListenerType)theEObject;
        T result = caseXStreamVarListenerType(xStreamVarListenerType);
        if (result == null) result = caseXFunctionCoreElementType(xStreamVarListenerType);
        if (result == null) result = caseXClassElementType(xStreamVarListenerType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XSIGNAL_TRIGGER_TYPE:
      {
        XSignalTriggerType xSignalTriggerType = (XSignalTriggerType)theEObject;
        T result = caseXSignalTriggerType(xSignalTriggerType);
        if (result == null) result = caseXFunctionCoreElementType(xSignalTriggerType);
        if (result == null) result = caseXClassElementType(xSignalTriggerType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XFUNCTION_START_TYPE:
      {
        XFunctionStartType xFunctionStartType = (XFunctionStartType)theEObject;
        T result = caseXFunctionStartType(xFunctionStartType);
        if (result == null) result = caseXFunctionCoreElementType(xFunctionStartType);
        if (result == null) result = caseXClassElementType(xFunctionStartType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XVAR_SETTER_TYPE:
      {
        XVarSetterType xVarSetterType = (XVarSetterType)theEObject;
        T result = caseXVarSetterType(xVarSetterType);
        if (result == null) result = caseXFunctionCoreElementType(xVarSetterType);
        if (result == null) result = caseXClassElementType(xVarSetterType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XVAR_INCREMENT_TYPE:
      {
        XVarIncrementType xVarIncrementType = (XVarIncrementType)theEObject;
        T result = caseXVarIncrementType(xVarIncrementType);
        if (result == null) result = caseXFunctionCoreElementType(xVarIncrementType);
        if (result == null) result = caseXClassElementType(xVarIncrementType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XVAR_DECREMENT_TYPE:
      {
        XVarDecrementType xVarDecrementType = (XVarDecrementType)theEObject;
        T result = caseXVarDecrementType(xVarDecrementType);
        if (result == null) result = caseXFunctionCoreElementType(xVarDecrementType);
        if (result == null) result = caseXClassElementType(xVarDecrementType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XSET_VAR_TYPE:
      {
        XSetVarType xSetVarType = (XSetVarType)theEObject;
        T result = caseXSetVarType(xSetVarType);
        if (result == null) result = caseXFunctionCoreElementType(xSetVarType);
        if (result == null) result = caseXClassElementType(xSetVarType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XDEBUG_TYPE:
      {
        XDebugType xDebugType = (XDebugType)theEObject;
        T result = caseXDebugType(xDebugType);
        if (result == null) result = caseXFunctionCoreElementType(xDebugType);
        if (result == null) result = caseXClassElementType(xDebugType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XIF_STATEMENT_TYPE:
      {
        XIfStatementType xIfStatementType = (XIfStatementType)theEObject;
        T result = caseXIfStatementType(xIfStatementType);
        if (result == null) result = caseXFunctionCoreElementType(xIfStatementType);
        if (result == null) result = caseXClassElementType(xIfStatementType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XELSE_IF_STATEMENT_TYPE:
      {
        XElseIfStatementType xElseIfStatementType = (XElseIfStatementType)theEObject;
        T result = caseXElseIfStatementType(xElseIfStatementType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XELSE_STATEMENT_TYPE:
      {
        XElseStatementType xElseStatementType = (XElseStatementType)theEObject;
        T result = caseXElseStatementType(xElseStatementType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XWHILE_TYPE:
      {
        XWhileType xWhileType = (XWhileType)theEObject;
        T result = caseXWhileType(xWhileType);
        if (result == null) result = caseXFunctionCoreElementType(xWhileType);
        if (result == null) result = caseXClassElementType(xWhileType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XWHILE_BREAK_TYPE:
      {
        XWhileBreakType xWhileBreakType = (XWhileBreakType)theEObject;
        T result = caseXWhileBreakType(xWhileBreakType);
        if (result == null) result = caseXClassElementType(xWhileBreakType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XSLEEP_TYPE:
      {
        XSleepType xSleepType = (XSleepType)theEObject;
        T result = caseXSleepType(xSleepType);
        if (result == null) result = caseXFunctionCoreElementType(xSleepType);
        if (result == null) result = caseXClassElementType(xSleepType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XEXPRESSION_TYPE:
      {
        XExpressionType xExpressionType = (XExpressionType)theEObject;
        T result = caseXExpressionType(xExpressionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XPERCENT_CHANGE_EXP_TYPE:
      {
        XPercentChangeExpType xPercentChangeExpType = (XPercentChangeExpType)theEObject;
        T result = caseXPercentChangeExpType(xPercentChangeExpType);
        if (result == null) result = caseXExpressionType(xPercentChangeExpType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XSUB_EXP_TYPE:
      {
        XSubExpType xSubExpType = (XSubExpType)theEObject;
        T result = caseXSubExpType(xSubExpType);
        if (result == null) result = caseXExpressionType(xSubExpType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XVAR_EXP_TYPE:
      {
        XVarExpType xVarExpType = (XVarExpType)theEObject;
        T result = caseXVarExpType(xVarExpType);
        if (result == null) result = caseXExpressionType(xVarExpType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XSTREAM_WRAPPER_EXP_TYPE:
      {
        XStreamWrapperExpType xStreamWrapperExpType = (XStreamWrapperExpType)theEObject;
        T result = caseXStreamWrapperExpType(xStreamWrapperExpType);
        if (result == null) result = caseXExpressionType(xStreamWrapperExpType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XSTREAM_VAR_VALUE_EXP_TYPE:
      {
        XStreamVarValueExpType xStreamVarValueExpType = (XStreamVarValueExpType)theEObject;
        T result = caseXStreamVarValueExpType(xStreamVarValueExpType);
        if (result == null) result = caseXExpressionType(xStreamVarValueExpType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XFUNCTION_CALL_EXP_TYPE:
      {
        XFunctionCallExpType xFunctionCallExpType = (XFunctionCallExpType)theEObject;
        T result = caseXFunctionCallExpType(xFunctionCallExpType);
        if (result == null) result = caseXExpressionType(xFunctionCallExpType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XVAR_STREAK_TYPE:
      {
        XVarStreakType xVarStreakType = (XVarStreakType)theEObject;
        T result = caseXVarStreakType(xVarStreakType);
        if (result == null) result = caseXExpressionType(xVarStreakType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XVAR_STREAK_COMPARE_TYPE:
      {
        XVarStreakCompareType xVarStreakCompareType = (XVarStreakCompareType)theEObject;
        T result = caseXVarStreakCompareType(xVarStreakCompareType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XVAR_STREAK_VALUE_TYPE:
      {
        XVarStreakValueType xVarStreakValueType = (XVarStreakValueType)theEObject;
        T result = caseXVarStreakValueType(xVarStreakValueType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XVAR_COMPARE_STREAK_TYPE:
      {
        XVarCompareStreakType xVarCompareStreakType = (XVarCompareStreakType)theEObject;
        T result = caseXVarCompareStreakType(xVarCompareStreakType);
        if (result == null) result = caseXExpressionType(xVarCompareStreakType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XSLR_AVG_EXP_TYPE:
      {
        XSlrAvgExpType xSlrAvgExpType = (XSlrAvgExpType)theEObject;
        T result = caseXSlrAvgExpType(xSlrAvgExpType);
        if (result == null) result = caseXExpressionType(xSlrAvgExpType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XLAST_SIGNAL_TRIGGER_TYPE:
      {
        XLastSignalTriggerType xLastSignalTriggerType = (XLastSignalTriggerType)theEObject;
        T result = caseXLastSignalTriggerType(xLastSignalTriggerType);
        if (result == null) result = caseXExpressionType(xLastSignalTriggerType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XSIGNAL_TRIGGER_COUNT_TYPE:
      {
        XSignalTriggerCountType xSignalTriggerCountType = (XSignalTriggerCountType)theEObject;
        T result = caseXSignalTriggerCountType(xSignalTriggerCountType);
        if (result == null) result = caseXExpressionType(xSignalTriggerCountType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XVARIANCE_AVERAGE_TYPE:
      {
        XVarianceAverageType xVarianceAverageType = (XVarianceAverageType)theEObject;
        T result = caseXVarianceAverageType(xVarianceAverageType);
        if (result == null) result = caseXExpressionType(xVarianceAverageType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XVARIANCE_MAX_TYPE:
      {
        XVarianceMaxType xVarianceMaxType = (XVarianceMaxType)theEObject;
        T result = caseXVarianceMaxType(xVarianceMaxType);
        if (result == null) result = caseXExpressionType(xVarianceMaxType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XROC_EXP_TYPE:
      {
        XRocExpType xRocExpType = (XRocExpType)theEObject;
        T result = caseXRocExpType(xRocExpType);
        if (result == null) result = caseXExpressionType(xRocExpType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.OR_TYPE:
      {
        OrType orType = (OrType)theEObject;
        T result = caseOrType(orType);
        if (result == null) result = caseExpressionType(orType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.AND_TYPE:
      {
        AndType andType = (AndType)theEObject;
        T result = caseAndType(andType);
        if (result == null) result = caseExpressionType(andType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.EQUALITY_TYPE:
      {
        EqualityType equalityType = (EqualityType)theEObject;
        T result = caseEqualityType(equalityType);
        if (result == null) result = caseExpressionType(equalityType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.COMPARISON_TYPE:
      {
        ComparisonType comparisonType = (ComparisonType)theEObject;
        T result = caseComparisonType(comparisonType);
        if (result == null) result = caseExpressionType(comparisonType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.PLUS_TYPE:
      {
        PlusType plusType = (PlusType)theEObject;
        T result = casePlusType(plusType);
        if (result == null) result = caseExpressionType(plusType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.MINUS_TYPE:
      {
        MinusType minusType = (MinusType)theEObject;
        T result = caseMinusType(minusType);
        if (result == null) result = caseExpressionType(minusType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.MUL_OR_DIV_TYPE:
      {
        MulOrDivType mulOrDivType = (MulOrDivType)theEObject;
        T result = caseMulOrDivType(mulOrDivType);
        if (result == null) result = caseExpressionType(mulOrDivType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.NOT_TYPE:
      {
        NotType notType = (NotType)theEObject;
        T result = caseNotType(notType);
        if (result == null) result = caseExpressionType(notType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.DOUBLE_CONSTANT_TYPE:
      {
        DoubleConstantType doubleConstantType = (DoubleConstantType)theEObject;
        T result = caseDoubleConstantType(doubleConstantType);
        if (result == null) result = caseExpressionType(doubleConstantType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.INT_CONSTANT_TYPE:
      {
        IntConstantType intConstantType = (IntConstantType)theEObject;
        T result = caseIntConstantType(intConstantType);
        if (result == null) result = caseExpressionType(intConstantType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.STRING_CONSTANT_TYPE:
      {
        StringConstantType stringConstantType = (StringConstantType)theEObject;
        T result = caseStringConstantType(stringConstantType);
        if (result == null) result = caseExpressionType(stringConstantType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.BOOL_CONSTANT_TYPE:
      {
        BoolConstantType boolConstantType = (BoolConstantType)theEObject;
        T result = caseBoolConstantType(boolConstantType);
        if (result == null) result = caseExpressionType(boolConstantType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.TICK_EXPRESSION_TYPE:
      {
        TickExpressionType tickExpressionType = (TickExpressionType)theEObject;
        T result = caseTickExpressionType(tickExpressionType);
        if (result == null) result = caseExpressionType(tickExpressionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XCLASS_TYPE:
      {
        XClassType xClassType = (XClassType)theEObject;
        T result = caseXClassType(xClassType);
        if (result == null) result = caseAbstractElement(xClassType);
        if (result == null) result = caseCoreAbstractElement(xClassType);
        if (result == null) result = caseScriptElement(xClassType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XOR_TYPE:
      {
        XOrType xOrType = (XOrType)theEObject;
        T result = caseXOrType(xOrType);
        if (result == null) result = caseXExpressionType(xOrType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XAND_TYPE:
      {
        XAndType xAndType = (XAndType)theEObject;
        T result = caseXAndType(xAndType);
        if (result == null) result = caseXExpressionType(xAndType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XEQUALITY_TYPE:
      {
        XEqualityType xEqualityType = (XEqualityType)theEObject;
        T result = caseXEqualityType(xEqualityType);
        if (result == null) result = caseXExpressionType(xEqualityType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XCOMPARISON_TYPE:
      {
        XComparisonType xComparisonType = (XComparisonType)theEObject;
        T result = caseXComparisonType(xComparisonType);
        if (result == null) result = caseXExpressionType(xComparisonType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XPLUS_TYPE:
      {
        XPlusType xPlusType = (XPlusType)theEObject;
        T result = caseXPlusType(xPlusType);
        if (result == null) result = caseXExpressionType(xPlusType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XMINUS_TYPE:
      {
        XMinusType xMinusType = (XMinusType)theEObject;
        T result = caseXMinusType(xMinusType);
        if (result == null) result = caseXExpressionType(xMinusType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XMUL_OR_DIV_TYPE:
      {
        XMulOrDivType xMulOrDivType = (XMulOrDivType)theEObject;
        T result = caseXMulOrDivType(xMulOrDivType);
        if (result == null) result = caseXExpressionType(xMulOrDivType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XNOT_TYPE:
      {
        XNotType xNotType = (XNotType)theEObject;
        T result = caseXNotType(xNotType);
        if (result == null) result = caseXExpressionType(xNotType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XDOUBLE_CONSTANT_TYPE:
      {
        XDoubleConstantType xDoubleConstantType = (XDoubleConstantType)theEObject;
        T result = caseXDoubleConstantType(xDoubleConstantType);
        if (result == null) result = caseXExpressionType(xDoubleConstantType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XINT_CONSTANT_TYPE:
      {
        XIntConstantType xIntConstantType = (XIntConstantType)theEObject;
        T result = caseXIntConstantType(xIntConstantType);
        if (result == null) result = caseXExpressionType(xIntConstantType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XSTRING_CONSTANT_TYPE:
      {
        XStringConstantType xStringConstantType = (XStringConstantType)theEObject;
        T result = caseXStringConstantType(xStringConstantType);
        if (result == null) result = caseXExpressionType(xStringConstantType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case XScriptPackage.XBOOL_CONSTANT_TYPE:
      {
        XBoolConstantType xBoolConstantType = (XBoolConstantType)theEObject;
        T result = caseXBoolConstantType(xBoolConstantType);
        if (result == null) result = caseXExpressionType(xBoolConstantType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XScript</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XScript</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXScript(XScript object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Script Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Script Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseScriptElement(ScriptElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Core Abstract Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Core Abstract Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCoreAbstractElement(CoreAbstractElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarType(VarType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Store Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Store Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarStoreType(VarStoreType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Trans Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Trans Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarTransType(VarTransType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionType(ExpressionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Value Range Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Value Range Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableValueRangeType(VariableValueRangeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Value Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Value Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableValueType(VariableValueType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Value Exp Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Value Exp Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableValueExpType(VariableValueExpType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Expression Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Expression Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetExpressionType(SetExpressionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Snapshot Expression Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Snapshot Expression Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSnapshotExpressionType(SnapshotExpressionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Roc Expression Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Roc Expression Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRocExpressionType(RocExpressionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Avg Expression Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Avg Expression Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAvgExpressionType(AvgExpressionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sub Expression Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sub Expression Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSubExpressionType(SubExpressionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>History Time Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>History Time Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHistoryTimeRange(HistoryTimeRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Session Time Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Session Time Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSessionTimeRange(SessionTimeRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Relative Session Time Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Relative Session Time Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRelativeSessionTimeRange(RelativeSessionTimeRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Today Session Time Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Today Session Time Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTodaySessionTimeRange(TodaySessionTimeRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Agg Session Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Agg Session Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarAggSessionType(VarAggSessionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Agg History Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Agg History Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarAggHistoryType(VarAggHistoryType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Signal Count Session</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Signal Count Session</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignalCountSession(SignalCountSession object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Signal Count History</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Signal Count History</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignalCountHistory(SignalCountHistory object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Signal Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Signal Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignalType(SignalType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractElement(AbstractElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XClass Element Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XClass Element Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXClassElementType(XClassElementType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XClass Core Element Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XClass Core Element Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXClassCoreElementType(XClassCoreElementType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XVar Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XVar Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXVarType(XVarType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XFunction Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XFunction Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXFunctionType(XFunctionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XFunction Core Element Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XFunction Core Element Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXFunctionCoreElementType(XFunctionCoreElementType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XFunction Return Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XFunction Return Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXFunctionReturnType(XFunctionReturnType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XFunction Call Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XFunction Call Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXFunctionCallType(XFunctionCallType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XSignal Listener Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XSignal Listener Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXSignalListenerType(XSignalListenerType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XStream Var Listener Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XStream Var Listener Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXStreamVarListenerType(XStreamVarListenerType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XSignal Trigger Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XSignal Trigger Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXSignalTriggerType(XSignalTriggerType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XFunction Start Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XFunction Start Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXFunctionStartType(XFunctionStartType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XVar Setter Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XVar Setter Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXVarSetterType(XVarSetterType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XVar Increment Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XVar Increment Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXVarIncrementType(XVarIncrementType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XVar Decrement Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XVar Decrement Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXVarDecrementType(XVarDecrementType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XSet Var Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XSet Var Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXSetVarType(XSetVarType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XDebug Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XDebug Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXDebugType(XDebugType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XIf Statement Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XIf Statement Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXIfStatementType(XIfStatementType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XElse If Statement Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XElse If Statement Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXElseIfStatementType(XElseIfStatementType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XElse Statement Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XElse Statement Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXElseStatementType(XElseStatementType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XWhile Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XWhile Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXWhileType(XWhileType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XWhile Break Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XWhile Break Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXWhileBreakType(XWhileBreakType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XSleep Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XSleep Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXSleepType(XSleepType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XExpression Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XExpression Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXExpressionType(XExpressionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XPercent Change Exp Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XPercent Change Exp Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXPercentChangeExpType(XPercentChangeExpType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XSub Exp Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XSub Exp Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXSubExpType(XSubExpType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XVar Exp Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XVar Exp Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXVarExpType(XVarExpType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XStream Wrapper Exp Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XStream Wrapper Exp Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXStreamWrapperExpType(XStreamWrapperExpType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XStream Var Value Exp Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XStream Var Value Exp Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXStreamVarValueExpType(XStreamVarValueExpType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XFunction Call Exp Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XFunction Call Exp Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXFunctionCallExpType(XFunctionCallExpType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XVar Streak Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XVar Streak Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXVarStreakType(XVarStreakType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XVar Streak Compare Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XVar Streak Compare Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXVarStreakCompareType(XVarStreakCompareType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XVar Streak Value Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XVar Streak Value Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXVarStreakValueType(XVarStreakValueType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XVar Compare Streak Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XVar Compare Streak Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXVarCompareStreakType(XVarCompareStreakType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XSlr Avg Exp Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XSlr Avg Exp Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXSlrAvgExpType(XSlrAvgExpType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XLast Signal Trigger Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XLast Signal Trigger Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXLastSignalTriggerType(XLastSignalTriggerType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XSignal Trigger Count Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XSignal Trigger Count Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXSignalTriggerCountType(XSignalTriggerCountType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XVariance Average Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XVariance Average Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXVarianceAverageType(XVarianceAverageType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XVariance Max Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XVariance Max Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXVarianceMaxType(XVarianceMaxType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XRoc Exp Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XRoc Exp Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXRocExpType(XRocExpType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Or Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Or Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOrType(OrType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAndType(AndType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equality Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equality Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEqualityType(EqualityType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comparison Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comparison Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComparisonType(ComparisonType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Plus Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Plus Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlusType(PlusType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Minus Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Minus Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMinusType(MinusType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mul Or Div Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mul Or Div Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMulOrDivType(MulOrDivType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Not Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Not Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNotType(NotType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Double Constant Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Double Constant Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDoubleConstantType(DoubleConstantType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Int Constant Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Int Constant Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntConstantType(IntConstantType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Constant Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Constant Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringConstantType(StringConstantType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bool Constant Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bool Constant Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoolConstantType(BoolConstantType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tick Expression Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tick Expression Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTickExpressionType(TickExpressionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XClass Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XClass Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXClassType(XClassType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XOr Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XOr Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXOrType(XOrType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XAnd Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XAnd Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXAndType(XAndType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XEquality Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XEquality Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXEqualityType(XEqualityType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XComparison Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XComparison Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXComparisonType(XComparisonType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XPlus Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XPlus Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXPlusType(XPlusType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XMinus Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XMinus Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXMinusType(XMinusType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XMul Or Div Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XMul Or Div Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXMulOrDivType(XMulOrDivType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XNot Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XNot Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXNotType(XNotType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XDouble Constant Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XDouble Constant Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXDoubleConstantType(XDoubleConstantType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XInt Constant Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XInt Constant Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXIntConstantType(XIntConstantType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XString Constant Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XString Constant Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXStringConstantType(XStringConstantType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>XBool Constant Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>XBool Constant Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseXBoolConstantType(XBoolConstantType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //XScriptSwitch
