/**
 * generated by Xtext 2.31.0
 */
package com.dunkware.xstream.xScript.impl;

import com.dunkware.xstream.xScript.VarType;
import com.dunkware.xstream.xScript.XExpressionType;
import com.dunkware.xstream.xScript.XScriptPackage;
import com.dunkware.xstream.xScript.XVarStreakCompareType;
import com.dunkware.xstream.xScript.XVarStreakType;
import com.dunkware.xstream.xScript.XVarStreakValueType;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>XVar Streak Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XVarStreakTypeImpl#getVar <em>Var</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XVarStreakTypeImpl#getDirection <em>Direction</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XVarStreakTypeImpl#getStartIndexExp <em>Start Index Exp</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XVarStreakTypeImpl#getCompare <em>Compare</em>}</li>
 *   <li>{@link com.dunkware.xstream.xScript.impl.XVarStreakTypeImpl#getValue <em>Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class XVarStreakTypeImpl extends XExpressionTypeImpl implements XVarStreakType
{
  /**
   * The cached value of the '{@link #getVar() <em>Var</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVar()
   * @generated
   * @ordered
   */
  protected VarType var;

  /**
   * The default value of the '{@link #getDirection() <em>Direction</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDirection()
   * @generated
   * @ordered
   */
  protected static final String DIRECTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDirection() <em>Direction</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDirection()
   * @generated
   * @ordered
   */
  protected String direction = DIRECTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getStartIndexExp() <em>Start Index Exp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartIndexExp()
   * @generated
   * @ordered
   */
  protected XExpressionType startIndexExp;

  /**
   * The cached value of the '{@link #getCompare() <em>Compare</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCompare()
   * @generated
   * @ordered
   */
  protected XVarStreakCompareType compare;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected XVarStreakValueType value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected XVarStreakTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return XScriptPackage.Literals.XVAR_STREAK_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarType getVar()
  {
    if (var != null && var.eIsProxy())
    {
      InternalEObject oldVar = (InternalEObject)var;
      var = (VarType)eResolveProxy(oldVar);
      if (var != oldVar)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, XScriptPackage.XVAR_STREAK_TYPE__VAR, oldVar, var));
      }
    }
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarType basicGetVar()
  {
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVar(VarType newVar)
  {
    VarType oldVar = var;
    var = newVar;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XVAR_STREAK_TYPE__VAR, oldVar, var));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDirection()
  {
    return direction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDirection(String newDirection)
  {
    String oldDirection = direction;
    direction = newDirection;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XVAR_STREAK_TYPE__DIRECTION, oldDirection, direction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XExpressionType getStartIndexExp()
  {
    return startIndexExp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStartIndexExp(XExpressionType newStartIndexExp, NotificationChain msgs)
  {
    XExpressionType oldStartIndexExp = startIndexExp;
    startIndexExp = newStartIndexExp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XScriptPackage.XVAR_STREAK_TYPE__START_INDEX_EXP, oldStartIndexExp, newStartIndexExp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStartIndexExp(XExpressionType newStartIndexExp)
  {
    if (newStartIndexExp != startIndexExp)
    {
      NotificationChain msgs = null;
      if (startIndexExp != null)
        msgs = ((InternalEObject)startIndexExp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XVAR_STREAK_TYPE__START_INDEX_EXP, null, msgs);
      if (newStartIndexExp != null)
        msgs = ((InternalEObject)newStartIndexExp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XVAR_STREAK_TYPE__START_INDEX_EXP, null, msgs);
      msgs = basicSetStartIndexExp(newStartIndexExp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XVAR_STREAK_TYPE__START_INDEX_EXP, newStartIndexExp, newStartIndexExp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XVarStreakCompareType getCompare()
  {
    return compare;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCompare(XVarStreakCompareType newCompare, NotificationChain msgs)
  {
    XVarStreakCompareType oldCompare = compare;
    compare = newCompare;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XScriptPackage.XVAR_STREAK_TYPE__COMPARE, oldCompare, newCompare);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCompare(XVarStreakCompareType newCompare)
  {
    if (newCompare != compare)
    {
      NotificationChain msgs = null;
      if (compare != null)
        msgs = ((InternalEObject)compare).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XVAR_STREAK_TYPE__COMPARE, null, msgs);
      if (newCompare != null)
        msgs = ((InternalEObject)newCompare).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XVAR_STREAK_TYPE__COMPARE, null, msgs);
      msgs = basicSetCompare(newCompare, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XVAR_STREAK_TYPE__COMPARE, newCompare, newCompare));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public XVarStreakValueType getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetValue(XVarStreakValueType newValue, NotificationChain msgs)
  {
    XVarStreakValueType oldValue = value;
    value = newValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, XScriptPackage.XVAR_STREAK_TYPE__VALUE, oldValue, newValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValue(XVarStreakValueType newValue)
  {
    if (newValue != value)
    {
      NotificationChain msgs = null;
      if (value != null)
        msgs = ((InternalEObject)value).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XVAR_STREAK_TYPE__VALUE, null, msgs);
      if (newValue != null)
        msgs = ((InternalEObject)newValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - XScriptPackage.XVAR_STREAK_TYPE__VALUE, null, msgs);
      msgs = basicSetValue(newValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, XScriptPackage.XVAR_STREAK_TYPE__VALUE, newValue, newValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case XScriptPackage.XVAR_STREAK_TYPE__START_INDEX_EXP:
        return basicSetStartIndexExp(null, msgs);
      case XScriptPackage.XVAR_STREAK_TYPE__COMPARE:
        return basicSetCompare(null, msgs);
      case XScriptPackage.XVAR_STREAK_TYPE__VALUE:
        return basicSetValue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case XScriptPackage.XVAR_STREAK_TYPE__VAR:
        if (resolve) return getVar();
        return basicGetVar();
      case XScriptPackage.XVAR_STREAK_TYPE__DIRECTION:
        return getDirection();
      case XScriptPackage.XVAR_STREAK_TYPE__START_INDEX_EXP:
        return getStartIndexExp();
      case XScriptPackage.XVAR_STREAK_TYPE__COMPARE:
        return getCompare();
      case XScriptPackage.XVAR_STREAK_TYPE__VALUE:
        return getValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case XScriptPackage.XVAR_STREAK_TYPE__VAR:
        setVar((VarType)newValue);
        return;
      case XScriptPackage.XVAR_STREAK_TYPE__DIRECTION:
        setDirection((String)newValue);
        return;
      case XScriptPackage.XVAR_STREAK_TYPE__START_INDEX_EXP:
        setStartIndexExp((XExpressionType)newValue);
        return;
      case XScriptPackage.XVAR_STREAK_TYPE__COMPARE:
        setCompare((XVarStreakCompareType)newValue);
        return;
      case XScriptPackage.XVAR_STREAK_TYPE__VALUE:
        setValue((XVarStreakValueType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XVAR_STREAK_TYPE__VAR:
        setVar((VarType)null);
        return;
      case XScriptPackage.XVAR_STREAK_TYPE__DIRECTION:
        setDirection(DIRECTION_EDEFAULT);
        return;
      case XScriptPackage.XVAR_STREAK_TYPE__START_INDEX_EXP:
        setStartIndexExp((XExpressionType)null);
        return;
      case XScriptPackage.XVAR_STREAK_TYPE__COMPARE:
        setCompare((XVarStreakCompareType)null);
        return;
      case XScriptPackage.XVAR_STREAK_TYPE__VALUE:
        setValue((XVarStreakValueType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case XScriptPackage.XVAR_STREAK_TYPE__VAR:
        return var != null;
      case XScriptPackage.XVAR_STREAK_TYPE__DIRECTION:
        return DIRECTION_EDEFAULT == null ? direction != null : !DIRECTION_EDEFAULT.equals(direction);
      case XScriptPackage.XVAR_STREAK_TYPE__START_INDEX_EXP:
        return startIndexExp != null;
      case XScriptPackage.XVAR_STREAK_TYPE__COMPARE:
        return compare != null;
      case XScriptPackage.XVAR_STREAK_TYPE__VALUE:
        return value != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (direction: ");
    result.append(direction);
    result.append(')');
    return result.toString();
  }

} //XVarStreakTypeImpl
