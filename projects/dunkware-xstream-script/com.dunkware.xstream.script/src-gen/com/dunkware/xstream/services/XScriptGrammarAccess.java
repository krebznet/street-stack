/*
 * generated by Xtext 2.21.0
 */
package com.dunkware.xstream.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XScriptGrammarAccess extends AbstractGrammarElementFinder {
	
	public class XScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XScript");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsScriptElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//XScript:
		//	elements+=ScriptElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=ScriptElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//ScriptElement
		public RuleCall getElementsScriptElementParserRuleCall_0() { return cElementsScriptElementParserRuleCall_0; }
	}
	public class ScriptElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.ScriptElement");
		private final RuleCall cCoreAbstractElementParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ScriptElement:
		//	CoreAbstractElement;
		@Override public ParserRule getRule() { return rule; }
		
		//CoreAbstractElement
		public RuleCall getCoreAbstractElementParserRuleCall() { return cCoreAbstractElementParserRuleCall; }
	}
	public class CoreAbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.CoreAbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXClassTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSignalTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXQueryTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//CoreAbstractElement:
		//	VarType | XClassType | SignalType | XQueryType;
		@Override public ParserRule getRule() { return rule; }
		
		//VarType | XClassType | SignalType | XQueryType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VarType
		public RuleCall getVarTypeParserRuleCall_0() { return cVarTypeParserRuleCall_0; }
		
		//XClassType
		public RuleCall getXClassTypeParserRuleCall_1() { return cXClassTypeParserRuleCall_1; }
		
		//SignalType
		public RuleCall getSignalTypeParserRuleCall_2() { return cSignalTypeParserRuleCall_2; }
		
		//XQueryType
		public RuleCall getXQueryTypeParserRuleCall_3() { return cXQueryTypeParserRuleCall_3; }
	}
	public class VarTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.VarType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSvarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCodeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCodeINTTerminalRuleCall_3_0 = (RuleCall)cCodeAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeDataTypeEnumRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cExpressionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cExpressionExpressionTypeParserRuleCall_8_0 = (RuleCall)cExpressionAssignment_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//VarType:
		//	"svar" name=ID '(' code=INT ',' type=DataType ')' '=' expression=ExpressionType ';';
		@Override public ParserRule getRule() { return rule; }
		
		//"svar" name=ID '(' code=INT ',' type=DataType ')' '=' expression=ExpressionType ';'
		public Group getGroup() { return cGroup; }
		
		//"svar"
		public Keyword getSvarKeyword_0() { return cSvarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//code=INT
		public Assignment getCodeAssignment_3() { return cCodeAssignment_3; }
		
		//INT
		public RuleCall getCodeINTTerminalRuleCall_3_0() { return cCodeINTTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//type=DataType
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_5_0() { return cTypeDataTypeEnumRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//expression=ExpressionType
		public Assignment getExpressionAssignment_8() { return cExpressionAssignment_8; }
		
		//ExpressionType
		public RuleCall getExpressionExpressionTypeParserRuleCall_8_0() { return cExpressionExpressionTypeParserRuleCall_8_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class ExpressionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.ExpressionType");
		private final RuleCall cOrTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ExpressionType:
		//	OrType;
		@Override public ParserRule getRule() { return rule; }
		
		//OrType
		public RuleCall getOrTypeParserRuleCall() { return cOrTypeParserRuleCall; }
	}
	public class OrTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.OrType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrTypeLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndTypeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrType ExpressionType:
		//	AndType ({OrType.left=current} "||" right=AndType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndType ({OrType.left=current} "||" right=AndType)*
		public Group getGroup() { return cGroup; }
		
		//AndType
		public RuleCall getAndTypeParserRuleCall_0() { return cAndTypeParserRuleCall_0; }
		
		//({OrType.left=current} "||" right=AndType)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrType.left=current}
		public Action getOrTypeLeftAction_1_0() { return cOrTypeLeftAction_1_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=AndType
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndType
		public RuleCall getRightAndTypeParserRuleCall_1_2_0() { return cRightAndTypeParserRuleCall_1_2_0; }
	}
	public class AndTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.AndType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndTypeLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityTypeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndType ExpressionType:
		//	EqualityType ({AndType.left=current} "&&" right=EqualityType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualityType ({AndType.left=current} "&&" right=EqualityType)*
		public Group getGroup() { return cGroup; }
		
		//EqualityType
		public RuleCall getEqualityTypeParserRuleCall_0() { return cEqualityTypeParserRuleCall_0; }
		
		//({AndType.left=current} "&&" right=EqualityType)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndType.left=current}
		public Action getAndTypeLeftAction_1_0() { return cAndTypeLeftAction_1_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//right=EqualityType
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//EqualityType
		public RuleCall getRightEqualityTypeParserRuleCall_1_2_0() { return cRightEqualityTypeParserRuleCall_1_2_0; }
	}
	public class EqualityTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.EqualityType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityTypeLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonTypeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EqualityType ExpressionType:
		//	ComparisonType ({EqualityType.left=current} op=("==" | "!=") right=ComparisonType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ComparisonType ({EqualityType.left=current} op=("==" | "!=") right=ComparisonType)*
		public Group getGroup() { return cGroup; }
		
		//ComparisonType
		public RuleCall getComparisonTypeParserRuleCall_0() { return cComparisonTypeParserRuleCall_0; }
		
		//({EqualityType.left=current} op=("==" | "!=") right=ComparisonType)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EqualityType.left=current}
		public Action getEqualityTypeLeftAction_1_0() { return cEqualityTypeLeftAction_1_0; }
		
		//op=("==" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//("==" | "!=")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=ComparisonType
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ComparisonType
		public RuleCall getRightComparisonTypeParserRuleCall_1_2_0() { return cRightComparisonTypeParserRuleCall_1_2_0; }
	}
	public class ComparisonTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.ComparisonType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonTypeLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusTypeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ComparisonType ExpressionType:
		//	PlusOrMinusType ({ComparisonType.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinusType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinusType ({ComparisonType.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinusType)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinusType
		public RuleCall getPlusOrMinusTypeParserRuleCall_0() { return cPlusOrMinusTypeParserRuleCall_0; }
		
		//({ComparisonType.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinusType)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComparisonType.left=current}
		public Action getComparisonTypeLeftAction_1_0() { return cComparisonTypeLeftAction_1_0; }
		
		//op=(">=" | "<=" | ">" | "<")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(">=" | "<=" | ">" | "<")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }
		
		//right=PlusOrMinusType
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinusType
		public RuleCall getRightPlusOrMinusTypeParserRuleCall_1_2_0() { return cRightPlusOrMinusTypeParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.PlusOrMinusType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusTypeLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusTypeLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivTypeParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinusType ExpressionType:
		//	MulOrDivType (({PlusType.left=current} '+' | {MinusType.left=current} '-') right=MulOrDivType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDivType (({PlusType.left=current} '+' | {MinusType.left=current} '-') right=MulOrDivType)*
		public Group getGroup() { return cGroup; }
		
		//MulOrDivType
		public RuleCall getMulOrDivTypeParserRuleCall_0() { return cMulOrDivTypeParserRuleCall_0; }
		
		//(({PlusType.left=current} '+' | {MinusType.left=current} '-') right=MulOrDivType)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({PlusType.left=current} '+' | {MinusType.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{PlusType.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{PlusType.left=current}
		public Action getPlusTypeLeftAction_1_0_0_0() { return cPlusTypeLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{MinusType.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{MinusType.left=current}
		public Action getMinusTypeLeftAction_1_0_1_0() { return cMinusTypeLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=MulOrDivType
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulOrDivType
		public RuleCall getRightMulOrDivTypeParserRuleCall_1_1_0() { return cRightMulOrDivTypeParserRuleCall_1_1_0; }
	}
	public class MulOrDivTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.MulOrDivType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulOrDivTypeLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryTypeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulOrDivType ExpressionType:
		//	PrimaryType ({MulOrDivType.left=current} op=('*' | '/') right=PrimaryType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryType ({MulOrDivType.left=current} op=('*' | '/') right=PrimaryType)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryType
		public RuleCall getPrimaryTypeParserRuleCall_0() { return cPrimaryTypeParserRuleCall_0; }
		
		//({MulOrDivType.left=current} op=('*' | '/') right=PrimaryType)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulOrDivType.left=current}
		public Action getMulOrDivTypeLeftAction_1_0() { return cMulOrDivTypeLeftAction_1_0; }
		
		//op=('*' | '/')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//right=PrimaryType
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PrimaryType
		public RuleCall getRightPrimaryTypeParserRuleCall_1_2_0() { return cRightPrimaryTypeParserRuleCall_1_2_0; }
	}
	public class PrimaryTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.PrimaryType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionTypeParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryTypeParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//PrimaryType ExpressionType:
		//	'(' ExpressionType ')' | {NotType} "!" expression=PrimaryType | AtomicType;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' ExpressionType ')' | {NotType} "!" expression=PrimaryType | AtomicType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' ExpressionType ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//ExpressionType
		public RuleCall getExpressionTypeParserRuleCall_0_1() { return cExpressionTypeParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{NotType} "!" expression=PrimaryType
		public Group getGroup_1() { return cGroup_1; }
		
		//{NotType}
		public Action getNotTypeAction_1_0() { return cNotTypeAction_1_0; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//expression=PrimaryType
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//PrimaryType
		public RuleCall getExpressionPrimaryTypeParserRuleCall_1_2_0() { return cExpressionPrimaryTypeParserRuleCall_1_2_0; }
		
		//AtomicType
		public RuleCall getAtomicTypeParserRuleCall_2() { return cAtomicTypeParserRuleCall_2; }
	}
	public class AtomicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.AtomicType");
		private final RuleCall cAtomicBaseTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AtomicType ExpressionType:
		//	AtomicBaseType;
		@Override public ParserRule getRule() { return rule; }
		
		//AtomicBaseType
		public RuleCall getAtomicBaseTypeParserRuleCall() { return cAtomicBaseTypeParserRuleCall; }
	}
	public class AtomicBaseTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.AtomicBaseType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDoubleConstantTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntConstantTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringConstantTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBoolConstantTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cValueAlternatives_3_1_0 = (Alternatives)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_3_1_0_0 = (Keyword)cValueAlternatives_3_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_3_1_0_1 = (Keyword)cValueAlternatives_3_1_0.eContents().get(1);
		private final RuleCall cTickExpressionTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSnapshotExpressionTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSetExpressionTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cRocExpressionTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cAvgExpressionTypeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cVariableValueExpTypeParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cVariableValueRangeTypeParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cVariableValueTypeParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cSubExpressionTypeParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cSessionSignalExpressionTypeParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		
		//AtomicBaseType ExpressionType:
		//	{DoubleConstantType} value=DOUBLE | {IntConstantType} value=INT | {StringConstantType} value=STRING |
		//	{BoolConstantType} value=('true' | 'false') | TickExpressionType | SnapshotExpressionType | SetExpressionType |
		//	RocExpressionType | AvgExpressionType | VariableValueExpType
		//	| VariableValueRangeType | VariableValueType | SubExpressionType | SessionSignalExpressionType;
		@Override public ParserRule getRule() { return rule; }
		
		//{DoubleConstantType} value=DOUBLE | {IntConstantType} value=INT | {StringConstantType} value=STRING | {BoolConstantType}
		//value=('true' | 'false') | TickExpressionType | SnapshotExpressionType | SetExpressionType | RocExpressionType |
		//AvgExpressionType | VariableValueExpType | VariableValueRangeType | VariableValueType | SubExpressionType |
		//SessionSignalExpressionType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{DoubleConstantType} value=DOUBLE
		public Group getGroup_0() { return cGroup_0; }
		
		//{DoubleConstantType}
		public Action getDoubleConstantTypeAction_0_0() { return cDoubleConstantTypeAction_0_0; }
		
		//value=DOUBLE
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_0_1_0() { return cValueDOUBLETerminalRuleCall_0_1_0; }
		
		//{IntConstantType} value=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//{IntConstantType}
		public Action getIntConstantTypeAction_1_0() { return cIntConstantTypeAction_1_0; }
		
		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }
		
		//{StringConstantType} value=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//{StringConstantType}
		public Action getStringConstantTypeAction_2_0() { return cStringConstantTypeAction_2_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
		
		//{BoolConstantType} value=('true' | 'false')
		public Group getGroup_3() { return cGroup_3; }
		
		//{BoolConstantType}
		public Action getBoolConstantTypeAction_3_0() { return cBoolConstantTypeAction_3_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_3_1_0() { return cValueAlternatives_3_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_3_1_0_0() { return cValueTrueKeyword_3_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_3_1_0_1() { return cValueFalseKeyword_3_1_0_1; }
		
		//TickExpressionType
		public RuleCall getTickExpressionTypeParserRuleCall_4() { return cTickExpressionTypeParserRuleCall_4; }
		
		//SnapshotExpressionType
		public RuleCall getSnapshotExpressionTypeParserRuleCall_5() { return cSnapshotExpressionTypeParserRuleCall_5; }
		
		//SetExpressionType
		public RuleCall getSetExpressionTypeParserRuleCall_6() { return cSetExpressionTypeParserRuleCall_6; }
		
		//RocExpressionType
		public RuleCall getRocExpressionTypeParserRuleCall_7() { return cRocExpressionTypeParserRuleCall_7; }
		
		//AvgExpressionType
		public RuleCall getAvgExpressionTypeParserRuleCall_8() { return cAvgExpressionTypeParserRuleCall_8; }
		
		//VariableValueExpType
		public RuleCall getVariableValueExpTypeParserRuleCall_9() { return cVariableValueExpTypeParserRuleCall_9; }
		
		//VariableValueRangeType
		public RuleCall getVariableValueRangeTypeParserRuleCall_10() { return cVariableValueRangeTypeParserRuleCall_10; }
		
		//VariableValueType
		public RuleCall getVariableValueTypeParserRuleCall_11() { return cVariableValueTypeParserRuleCall_11; }
		
		//SubExpressionType
		public RuleCall getSubExpressionTypeParserRuleCall_12() { return cSubExpressionTypeParserRuleCall_12; }
		
		//SessionSignalExpressionType
		public RuleCall getSessionSignalExpressionTypeParserRuleCall_13() { return cSessionSignalExpressionTypeParserRuleCall_13; }
	}
	public class TickExpressionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.TickExpressionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTickExpressionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTickKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeINTTerminalRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFieldAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFieldINTTerminalRuleCall_5_0 = (RuleCall)cFieldAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDataTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDataTypeDataTypeEnumRuleCall_7_0 = (RuleCall)cDataTypeAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		///****************************
		// * Input Expression Types 
		// ****************************/ TickExpressionType ExpressionType:
		//	{TickExpressionType} 'tick' '(' type=INT ',' field=INT ',' dataType=DataType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{TickExpressionType} 'tick' '(' type=INT ',' field=INT ',' dataType=DataType ')'
		public Group getGroup() { return cGroup; }
		
		//{TickExpressionType}
		public Action getTickExpressionTypeAction_0() { return cTickExpressionTypeAction_0; }
		
		//'tick'
		public Keyword getTickKeyword_1() { return cTickKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//type=INT
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//INT
		public RuleCall getTypeINTTerminalRuleCall_3_0() { return cTypeINTTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//field=INT
		public Assignment getFieldAssignment_5() { return cFieldAssignment_5; }
		
		//INT
		public RuleCall getFieldINTTerminalRuleCall_5_0() { return cFieldINTTerminalRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//dataType=DataType
		public Assignment getDataTypeAssignment_7() { return cDataTypeAssignment_7; }
		
		//DataType
		public RuleCall getDataTypeDataTypeEnumRuleCall_7_0() { return cDataTypeDataTypeEnumRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class VariableValueRangeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.VariableValueRangeType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableValueRangeTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTargetVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetVarVarTypeCrossReference_1_0 = (CrossReference)cTargetVarAssignment_1.eContents().get(0);
		private final RuleCall cTargetVarVarTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetVarVarTypeCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStartIndexAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStartIndexINTTerminalRuleCall_3_0 = (RuleCall)cStartIndexAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEndIndexAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEndIndexINTTerminalRuleCall_5_0 = (RuleCall)cEndIndexAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///****************************
		// * Variable Value Expression Types 
		// ****************************/ VariableValueRangeType:
		//	{VariableValueRangeType} targetVar=[VarType] '[' startIndex=INT ',' endIndex=INT ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableValueRangeType} targetVar=[VarType] '[' startIndex=INT ',' endIndex=INT ']'
		public Group getGroup() { return cGroup; }
		
		//{VariableValueRangeType}
		public Action getVariableValueRangeTypeAction_0() { return cVariableValueRangeTypeAction_0; }
		
		//targetVar=[VarType]
		public Assignment getTargetVarAssignment_1() { return cTargetVarAssignment_1; }
		
		//[VarType]
		public CrossReference getTargetVarVarTypeCrossReference_1_0() { return cTargetVarVarTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetVarVarTypeIDTerminalRuleCall_1_0_1() { return cTargetVarVarTypeIDTerminalRuleCall_1_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//startIndex=INT
		public Assignment getStartIndexAssignment_3() { return cStartIndexAssignment_3; }
		
		//INT
		public RuleCall getStartIndexINTTerminalRuleCall_3_0() { return cStartIndexINTTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//endIndex=INT
		public Assignment getEndIndexAssignment_5() { return cEndIndexAssignment_5; }
		
		//INT
		public RuleCall getEndIndexINTTerminalRuleCall_5_0() { return cEndIndexINTTerminalRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}
	public class VariableValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.VariableValueType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableValueTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableVarTypeCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableVarTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cVariableVarTypeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cIndexIntAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cIndexIntINTTerminalRuleCall_2_1_0_0 = (RuleCall)cIndexIntAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final Keyword cExpKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Assignment cExpTypeAssignment_2_1_1_2 = (Assignment)cGroup_2_1_1.eContents().get(2);
		private final RuleCall cExpTypeExpressionTypeParserRuleCall_2_1_1_2_0 = (RuleCall)cExpTypeAssignment_2_1_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_1_3 = (Keyword)cGroup_2_1_1.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//VariableValueType:
		//	{VariableValueType} variable=[VarType] ('[' (indexInt=INT | 'exp' '(' expType=ExpressionType ')') ']');
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableValueType} variable=[VarType] ('[' (indexInt=INT | 'exp' '(' expType=ExpressionType ')') ']')
		public Group getGroup() { return cGroup; }
		
		//{VariableValueType}
		public Action getVariableValueTypeAction_0() { return cVariableValueTypeAction_0; }
		
		//variable=[VarType]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[VarType]
		public CrossReference getVariableVarTypeCrossReference_1_0() { return cVariableVarTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getVariableVarTypeIDTerminalRuleCall_1_0_1() { return cVariableVarTypeIDTerminalRuleCall_1_0_1; }
		
		//('[' (indexInt=INT | 'exp' '(' expType=ExpressionType ')') ']')
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//(indexInt=INT | 'exp' '(' expType=ExpressionType ')')
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//indexInt=INT
		public Assignment getIndexIntAssignment_2_1_0() { return cIndexIntAssignment_2_1_0; }
		
		//INT
		public RuleCall getIndexIntINTTerminalRuleCall_2_1_0_0() { return cIndexIntINTTerminalRuleCall_2_1_0_0; }
		
		//'exp' '(' expType=ExpressionType ')'
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//'exp'
		public Keyword getExpKeyword_2_1_1_0() { return cExpKeyword_2_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_1_1() { return cLeftParenthesisKeyword_2_1_1_1; }
		
		//expType=ExpressionType
		public Assignment getExpTypeAssignment_2_1_1_2() { return cExpTypeAssignment_2_1_1_2; }
		
		//ExpressionType
		public RuleCall getExpTypeExpressionTypeParserRuleCall_2_1_1_2_0() { return cExpTypeExpressionTypeParserRuleCall_2_1_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_1_3() { return cRightParenthesisKeyword_2_1_1_3; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}
	public class VariableValueExpTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.VariableValueExpType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableValueExpTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpTypeExpressionTypeParserRuleCall_3_0 = (RuleCall)cExpTypeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VariableValueExpType:
		//	{VariableValueExpType} 'exp' '(' expType=ExpressionType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableValueExpType} 'exp' '(' expType=ExpressionType ')'
		public Group getGroup() { return cGroup; }
		
		//{VariableValueExpType}
		public Action getVariableValueExpTypeAction_0() { return cVariableValueExpTypeAction_0; }
		
		//'exp'
		public Keyword getExpKeyword_1() { return cExpKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//expType=ExpressionType
		public Assignment getExpTypeAssignment_3() { return cExpTypeAssignment_3; }
		
		//ExpressionType
		public RuleCall getExpTypeExpressionTypeParserRuleCall_3_0() { return cExpTypeExpressionTypeParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class SetExpressionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.SetExpressionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetExpressionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsExpressionTypeParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsExpressionTypeParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetExpressionType:
		//	{SetExpressionType} '{' (args+=ExpressionType (',' args+=ExpressionType)*)? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SetExpressionType} '{' (args+=ExpressionType (',' args+=ExpressionType)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{SetExpressionType}
		public Action getSetExpressionTypeAction_0() { return cSetExpressionTypeAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(args+=ExpressionType (',' args+=ExpressionType)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=ExpressionType
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//ExpressionType
		public RuleCall getArgsExpressionTypeParserRuleCall_2_0_0() { return cArgsExpressionTypeParserRuleCall_2_0_0; }
		
		//(',' args+=ExpressionType)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//args+=ExpressionType
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//ExpressionType
		public RuleCall getArgsExpressionTypeParserRuleCall_2_1_1_0() { return cArgsExpressionTypeParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class SnapshotExpressionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.SnapshotExpressionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSnapshotExpressionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSnapshotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetExpressionTypeParserRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIntervalAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIntervalINTTerminalRuleCall_5_0 = (RuleCall)cIntervalAssignment_5.eContents().get(0);
		private final Assignment cTimeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTimeStreamTimeUnitEnumRuleCall_6_0 = (RuleCall)cTimeAssignment_6.eContents().get(0);
		
		///**********************************
		// * Scheduled Update Expression Types 
		// *********************************/ SnapshotExpressionType:
		//	{SnapshotExpressionType} "snapshot" '(' target=ExpressionType ')' interval=INT time=StreamTimeUnit;
		@Override public ParserRule getRule() { return rule; }
		
		//{SnapshotExpressionType} "snapshot" '(' target=ExpressionType ')' interval=INT time=StreamTimeUnit
		public Group getGroup() { return cGroup; }
		
		//{SnapshotExpressionType}
		public Action getSnapshotExpressionTypeAction_0() { return cSnapshotExpressionTypeAction_0; }
		
		//"snapshot"
		public Keyword getSnapshotKeyword_1() { return cSnapshotKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//target=ExpressionType
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//ExpressionType
		public RuleCall getTargetExpressionTypeParserRuleCall_3_0() { return cTargetExpressionTypeParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//interval=INT
		public Assignment getIntervalAssignment_5() { return cIntervalAssignment_5; }
		
		//INT
		public RuleCall getIntervalINTTerminalRuleCall_5_0() { return cIntervalINTTerminalRuleCall_5_0; }
		
		//time=StreamTimeUnit
		public Assignment getTimeAssignment_6() { return cTimeAssignment_6; }
		
		//StreamTimeUnit
		public RuleCall getTimeStreamTimeUnitEnumRuleCall_6_0() { return cTimeStreamTimeUnitEnumRuleCall_6_0; }
	}
	public class RocExpressionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.RocExpressionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRocExpressionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRocKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetExpressionTypeParserRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCompareAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCompareExpressionTypeParserRuleCall_5_0 = (RuleCall)cCompareAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///*******************************
		// * Math Exrepssion Types 
		// *******************************/ RocExpressionType:
		//	{RocExpressionType} "roc" '(' target=ExpressionType ',' compare=ExpressionType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{RocExpressionType} "roc" '(' target=ExpressionType ',' compare=ExpressionType ')'
		public Group getGroup() { return cGroup; }
		
		//{RocExpressionType}
		public Action getRocExpressionTypeAction_0() { return cRocExpressionTypeAction_0; }
		
		//"roc"
		public Keyword getRocKeyword_1() { return cRocKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//target=ExpressionType
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//ExpressionType
		public RuleCall getTargetExpressionTypeParserRuleCall_3_0() { return cTargetExpressionTypeParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//compare=ExpressionType
		public Assignment getCompareAssignment_5() { return cCompareAssignment_5; }
		
		//ExpressionType
		public RuleCall getCompareExpressionTypeParserRuleCall_5_0() { return cCompareExpressionTypeParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class AvgExpressionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.AvgExpressionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAvgExpressionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAvgKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetSetExpressionTypeParserRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AvgExpressionType:
		//	{AvgExpressionType} "avg" '(' target=SetExpressionType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{AvgExpressionType} "avg" '(' target=SetExpressionType ')'
		public Group getGroup() { return cGroup; }
		
		//{AvgExpressionType}
		public Action getAvgExpressionTypeAction_0() { return cAvgExpressionTypeAction_0; }
		
		//"avg"
		public Keyword getAvgKeyword_1() { return cAvgKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//target=SetExpressionType
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//SetExpressionType
		public RuleCall getTargetSetExpressionTypeParserRuleCall_3_0() { return cTargetSetExpressionTypeParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class SubExpressionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.SubExpressionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubExpressionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSubKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetVariableValueTypeParserRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCompareAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCompareVariableValueTypeParserRuleCall_5_0 = (RuleCall)cCompareAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SubExpressionType:
		//	{SubExpressionType} "sub" '(' target=VariableValueType ',' compare=VariableValueType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{SubExpressionType} "sub" '(' target=VariableValueType ',' compare=VariableValueType ')'
		public Group getGroup() { return cGroup; }
		
		//{SubExpressionType}
		public Action getSubExpressionTypeAction_0() { return cSubExpressionTypeAction_0; }
		
		//"sub"
		public Keyword getSubKeyword_1() { return cSubKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//target=VariableValueType
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//VariableValueType
		public RuleCall getTargetVariableValueTypeParserRuleCall_3_0() { return cTargetVariableValueTypeParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//compare=VariableValueType
		public Assignment getCompareAssignment_5() { return cCompareAssignment_5; }
		
		//VariableValueType
		public RuleCall getCompareVariableValueTypeParserRuleCall_5_0() { return cCompareVariableValueTypeParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class SessionSignalExpressionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.SessionSignalExpressionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSessionSignalExpressionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSscKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSignalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSignalSignalTypeCrossReference_3_0 = (CrossReference)cSignalAssignment_3.eContents().get(0);
		private final RuleCall cSignalSignalTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cSignalSignalTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cOpAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cOpAlternatives_4_0 = (Alternatives)cOpAssignment_4.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_4_0_0 = (Keyword)cOpAlternatives_4_0.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_4_0_1 = (Keyword)cOpAlternatives_4_0.eContents().get(1);
		private final Keyword cOpEqualsSignKeyword_4_0_2 = (Keyword)cOpAlternatives_4_0.eContents().get(2);
		private final Assignment cCountAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCountINTTerminalRuleCall_5_0 = (RuleCall)cCountAssignment_5.eContents().get(0);
		private final Keyword cInLastKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTimeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTimeINTTerminalRuleCall_7_0 = (RuleCall)cTimeAssignment_7.eContents().get(0);
		private final Assignment cUnitAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cUnitStreamTimeUnitEnumRuleCall_8_0 = (RuleCall)cUnitAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		///** Signal Expression Types */ SessionSignalExpressionType:
		//	{SessionSignalExpressionType} 'ssc' '(' signal=[SignalType] op=(">" | "<" | "=") count=INT 'in last' time=INT
		//	unit=StreamTimeUnit ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{SessionSignalExpressionType} 'ssc' '(' signal=[SignalType] op=(">" | "<" | "=") count=INT 'in last' time=INT
		//unit=StreamTimeUnit ')'
		public Group getGroup() { return cGroup; }
		
		//{SessionSignalExpressionType}
		public Action getSessionSignalExpressionTypeAction_0() { return cSessionSignalExpressionTypeAction_0; }
		
		//'ssc'
		public Keyword getSscKeyword_1() { return cSscKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//signal=[SignalType]
		public Assignment getSignalAssignment_3() { return cSignalAssignment_3; }
		
		//[SignalType]
		public CrossReference getSignalSignalTypeCrossReference_3_0() { return cSignalSignalTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getSignalSignalTypeIDTerminalRuleCall_3_0_1() { return cSignalSignalTypeIDTerminalRuleCall_3_0_1; }
		
		//op=(">" | "<" | "=")
		public Assignment getOpAssignment_4() { return cOpAssignment_4; }
		
		//(">" | "<" | "=")
		public Alternatives getOpAlternatives_4_0() { return cOpAlternatives_4_0; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_4_0_0() { return cOpGreaterThanSignKeyword_4_0_0; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_4_0_1() { return cOpLessThanSignKeyword_4_0_1; }
		
		//"="
		public Keyword getOpEqualsSignKeyword_4_0_2() { return cOpEqualsSignKeyword_4_0_2; }
		
		//count=INT
		public Assignment getCountAssignment_5() { return cCountAssignment_5; }
		
		//INT
		public RuleCall getCountINTTerminalRuleCall_5_0() { return cCountINTTerminalRuleCall_5_0; }
		
		//'in last'
		public Keyword getInLastKeyword_6() { return cInLastKeyword_6; }
		
		//time=INT
		public Assignment getTimeAssignment_7() { return cTimeAssignment_7; }
		
		//INT
		public RuleCall getTimeINTTerminalRuleCall_7_0() { return cTimeINTTerminalRuleCall_7_0; }
		
		//unit=StreamTimeUnit
		public Assignment getUnitAssignment_8() { return cUnitAssignment_8; }
		
		//StreamTimeUnit
		public RuleCall getUnitStreamTimeUnitEnumRuleCall_8_0() { return cUnitStreamTimeUnitEnumRuleCall_8_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class SignalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.SignalType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSignalTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSignalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdINTTerminalRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///*******************************
		// * XScript Signals
		// *******************************/ SignalType:
		//	{SignalType} 'signal' name=ID '(' id=INT ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{SignalType} 'signal' name=ID '(' id=INT ')' ';'
		public Group getGroup() { return cGroup; }
		
		//{SignalType}
		public Action getSignalTypeAction_0() { return cSignalTypeAction_0; }
		
		//'signal'
		public Keyword getSignalKeyword_1() { return cSignalKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//id=INT
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_4_0() { return cIdINTTerminalRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class XClassTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XClassType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXClassTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSymbolFilterAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSymbolFilterSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cSymbolFilterAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementsXClassElementTypeParserRuleCall_5_0 = (RuleCall)cElementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///*******************************
		// * XClass Start
		// *******************************/ XClassType AbstractElement:
		//	{XClassType} 'class' name=ID ('(' symbolFilter=STRING ')')? '{'
		//	elements+=XClassElementType*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{XClassType} 'class' name=ID ('(' symbolFilter=STRING ')')? '{' elements+=XClassElementType* '}'
		public Group getGroup() { return cGroup; }
		
		//{XClassType}
		public Action getXClassTypeAction_0() { return cXClassTypeAction_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('(' symbolFilter=STRING ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//symbolFilter=STRING
		public Assignment getSymbolFilterAssignment_3_1() { return cSymbolFilterAssignment_3_1; }
		
		//STRING
		public RuleCall getSymbolFilterSTRINGTerminalRuleCall_3_1_0() { return cSymbolFilterSTRINGTerminalRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//elements+=XClassElementType*
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }
		
		//XClassElementType
		public RuleCall getElementsXClassElementTypeParserRuleCall_5_0() { return cElementsXClassElementTypeParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class XClassElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XClassElementType");
		private final RuleCall cXClassCoreElementTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//XClassElementType:
		//	XClassCoreElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//XClassCoreElementType
		public RuleCall getXClassCoreElementTypeParserRuleCall() { return cXClassCoreElementTypeParserRuleCall; }
	}
	public class XClassCoreElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XClassCoreElementType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXFunctionTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXVarTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XClassCoreElementType:
		//	XFunctionType | XVarType;
		@Override public ParserRule getRule() { return rule; }
		
		//XFunctionType | XVarType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XFunctionType
		public RuleCall getXFunctionTypeParserRuleCall_0() { return cXFunctionTypeParserRuleCall_0; }
		
		//XVarType
		public RuleCall getXVarTypeParserRuleCall_1() { return cXVarTypeParserRuleCall_1; }
	}
	public class XVarTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XVarType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXVarTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpXExpressionTypeParserRuleCall_3_1_0 = (RuleCall)cExpAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///****************************
		// * Global Element Types 
		// *************************/ XVarType:
		//	{XVarType} 'var' name=ID ('=' exp=XExpressionType)? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{XVarType} 'var' name=ID ('=' exp=XExpressionType)? ';'
		public Group getGroup() { return cGroup; }
		
		//{XVarType}
		public Action getXVarTypeAction_0() { return cXVarTypeAction_0; }
		
		//'var'
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('=' exp=XExpressionType)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//exp=XExpressionType
		public Assignment getExpAssignment_3_1() { return cExpAssignment_3_1; }
		
		//XExpressionType
		public RuleCall getExpXExpressionTypeParserRuleCall_3_1_0() { return cExpXExpressionTypeParserRuleCall_3_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class XFunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XFunctionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXFunctionTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cParamsXVarTypeCrossReference_4_0 = (CrossReference)cParamsAssignment_4.eContents().get(0);
		private final RuleCall cParamsXVarTypeIDTerminalRuleCall_4_0_1 = (RuleCall)cParamsXVarTypeCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cElementsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElementsXClassFunctionElementTypeParserRuleCall_7_0 = (RuleCall)cElementsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//XFunctionType:
		//	{XFunctionType} 'function' name=ID '(' params+=[XVarType]* ')' '{'
		//	elements+=XClassFunctionElementType*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{XFunctionType} 'function' name=ID '(' params+=[XVarType]* ')' '{' elements+=XClassFunctionElementType* '}'
		public Group getGroup() { return cGroup; }
		
		//{XFunctionType}
		public Action getXFunctionTypeAction_0() { return cXFunctionTypeAction_0; }
		
		//'function'
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//params+=[XVarType]*
		public Assignment getParamsAssignment_4() { return cParamsAssignment_4; }
		
		//[XVarType]
		public CrossReference getParamsXVarTypeCrossReference_4_0() { return cParamsXVarTypeCrossReference_4_0; }
		
		//ID
		public RuleCall getParamsXVarTypeIDTerminalRuleCall_4_0_1() { return cParamsXVarTypeIDTerminalRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//elements+=XClassFunctionElementType*
		public Assignment getElementsAssignment_7() { return cElementsAssignment_7; }
		
		//XClassFunctionElementType
		public RuleCall getElementsXClassFunctionElementTypeParserRuleCall_7_0() { return cElementsXClassFunctionElementTypeParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class XClassFunctionElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XClassFunctionElementType");
		private final RuleCall cXFunctionCoreElementTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///***************************
		// * Function Element Types
		// *************************/ XClassFunctionElementType XClassElementType:
		//	XFunctionCoreElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//XFunctionCoreElementType
		public RuleCall getXFunctionCoreElementTypeParserRuleCall() { return cXFunctionCoreElementTypeParserRuleCall; }
	}
	public class XFunctionCoreElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XFunctionCoreElementType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXFunctionReturnTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXVarTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXIfStatementTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXSignalListenerTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXStreamVarListenerTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXFunctionStartTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXFunctionCallTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXVarSetterTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXSignalTriggerTypeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXVarDecrementTypeParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cXSetVarTypeParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cXVarIncrementTypeParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cXDebugTypeParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cXSleepTypeParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cXWhileTypeParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//XFunctionCoreElementType:
		//	XFunctionReturnType | XVarType | XIfStatementType | XSignalListenerType | XStreamVarListenerType
		//	| XFunctionStartType | XFunctionCallType | XVarSetterType | XSignalTriggerType | XVarDecrementType
		//	| XSetVarType | XVarIncrementType | XDebugType | XSleepType | XWhileType;
		@Override public ParserRule getRule() { return rule; }
		
		//XFunctionReturnType | XVarType | XIfStatementType | XSignalListenerType | XStreamVarListenerType | XFunctionStartType |
		//XFunctionCallType | XVarSetterType | XSignalTriggerType | XVarDecrementType | XSetVarType | XVarIncrementType |
		//XDebugType | XSleepType | XWhileType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XFunctionReturnType
		public RuleCall getXFunctionReturnTypeParserRuleCall_0() { return cXFunctionReturnTypeParserRuleCall_0; }
		
		//XVarType
		public RuleCall getXVarTypeParserRuleCall_1() { return cXVarTypeParserRuleCall_1; }
		
		//XIfStatementType
		public RuleCall getXIfStatementTypeParserRuleCall_2() { return cXIfStatementTypeParserRuleCall_2; }
		
		//XSignalListenerType
		public RuleCall getXSignalListenerTypeParserRuleCall_3() { return cXSignalListenerTypeParserRuleCall_3; }
		
		//XStreamVarListenerType
		public RuleCall getXStreamVarListenerTypeParserRuleCall_4() { return cXStreamVarListenerTypeParserRuleCall_4; }
		
		//XFunctionStartType
		public RuleCall getXFunctionStartTypeParserRuleCall_5() { return cXFunctionStartTypeParserRuleCall_5; }
		
		//XFunctionCallType
		public RuleCall getXFunctionCallTypeParserRuleCall_6() { return cXFunctionCallTypeParserRuleCall_6; }
		
		//XVarSetterType
		public RuleCall getXVarSetterTypeParserRuleCall_7() { return cXVarSetterTypeParserRuleCall_7; }
		
		//XSignalTriggerType
		public RuleCall getXSignalTriggerTypeParserRuleCall_8() { return cXSignalTriggerTypeParserRuleCall_8; }
		
		//XVarDecrementType
		public RuleCall getXVarDecrementTypeParserRuleCall_9() { return cXVarDecrementTypeParserRuleCall_9; }
		
		//XSetVarType
		public RuleCall getXSetVarTypeParserRuleCall_10() { return cXSetVarTypeParserRuleCall_10; }
		
		//XVarIncrementType
		public RuleCall getXVarIncrementTypeParserRuleCall_11() { return cXVarIncrementTypeParserRuleCall_11; }
		
		//XDebugType
		public RuleCall getXDebugTypeParserRuleCall_12() { return cXDebugTypeParserRuleCall_12; }
		
		//XSleepType
		public RuleCall getXSleepTypeParserRuleCall_13() { return cXSleepTypeParserRuleCall_13; }
		
		//XWhileType
		public RuleCall getXWhileTypeParserRuleCall_14() { return cXWhileTypeParserRuleCall_14; }
	}
	public class XFunctionReturnTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XFunctionReturnType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXFunctionReturnTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReturnValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReturnValueXExpressionTypeParserRuleCall_2_0 = (RuleCall)cReturnValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XFunctionReturnType:
		//	{XFunctionReturnType} 'return' returnValue=XExpressionType? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{XFunctionReturnType} 'return' returnValue=XExpressionType? ';'
		public Group getGroup() { return cGroup; }
		
		//{XFunctionReturnType}
		public Action getXFunctionReturnTypeAction_0() { return cXFunctionReturnTypeAction_0; }
		
		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }
		
		//returnValue=XExpressionType?
		public Assignment getReturnValueAssignment_2() { return cReturnValueAssignment_2; }
		
		//XExpressionType
		public RuleCall getReturnValueXExpressionTypeParserRuleCall_2_0() { return cReturnValueXExpressionTypeParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class XFunctionCallTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XFunctionCallType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXFunctionCallTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFunctionXFunctionTypeCrossReference_1_0 = (CrossReference)cFunctionAssignment_1.eContents().get(0);
		private final RuleCall cFunctionXFunctionTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cFunctionXFunctionTypeCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamsSTRINGTerminalRuleCall_3_0 = (RuleCall)cParamsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XFunctionCallType:
		//	{XFunctionCallType} function=[XFunctionType] '(' params=STRING? ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{XFunctionCallType} function=[XFunctionType] '(' params=STRING? ')' ';'
		public Group getGroup() { return cGroup; }
		
		//{XFunctionCallType}
		public Action getXFunctionCallTypeAction_0() { return cXFunctionCallTypeAction_0; }
		
		//function=[XFunctionType]
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//[XFunctionType]
		public CrossReference getFunctionXFunctionTypeCrossReference_1_0() { return cFunctionXFunctionTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getFunctionXFunctionTypeIDTerminalRuleCall_1_0_1() { return cFunctionXFunctionTypeIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//params=STRING?
		public Assignment getParamsAssignment_3() { return cParamsAssignment_3; }
		
		//STRING
		public RuleCall getParamsSTRINGTerminalRuleCall_3_0() { return cParamsSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class XSignalListenerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XSignalListenerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXSignalListenerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSignalListenerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSignalTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSignalTypeSignalTypeCrossReference_3_0 = (CrossReference)cSignalTypeAssignment_3.eContents().get(0);
		private final RuleCall cSignalTypeSignalTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cSignalTypeSignalTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFunctionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cFunctionXFunctionTypeCrossReference_5_0 = (CrossReference)cFunctionAssignment_5.eContents().get(0);
		private final RuleCall cFunctionXFunctionTypeIDTerminalRuleCall_5_0_1 = (RuleCall)cFunctionXFunctionTypeCrossReference_5_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//XSignalListenerType:
		//	{XSignalListenerType} 'signalListener' '(' signalType=[SignalType] ',' function=[XFunctionType] ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{XSignalListenerType} 'signalListener' '(' signalType=[SignalType] ',' function=[XFunctionType] ')' ';'
		public Group getGroup() { return cGroup; }
		
		//{XSignalListenerType}
		public Action getXSignalListenerTypeAction_0() { return cXSignalListenerTypeAction_0; }
		
		//'signalListener'
		public Keyword getSignalListenerKeyword_1() { return cSignalListenerKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//signalType=[SignalType]
		public Assignment getSignalTypeAssignment_3() { return cSignalTypeAssignment_3; }
		
		//[SignalType]
		public CrossReference getSignalTypeSignalTypeCrossReference_3_0() { return cSignalTypeSignalTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getSignalTypeSignalTypeIDTerminalRuleCall_3_0_1() { return cSignalTypeSignalTypeIDTerminalRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//function=[XFunctionType]
		public Assignment getFunctionAssignment_5() { return cFunctionAssignment_5; }
		
		//[XFunctionType]
		public CrossReference getFunctionXFunctionTypeCrossReference_5_0() { return cFunctionXFunctionTypeCrossReference_5_0; }
		
		//ID
		public RuleCall getFunctionXFunctionTypeIDTerminalRuleCall_5_0_1() { return cFunctionXFunctionTypeIDTerminalRuleCall_5_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class XStreamVarListenerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XStreamVarListenerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXStreamVarListenerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStreamVarListenerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cColumnVarTypeCrossReference_3_0 = (CrossReference)cColumnAssignment_3.eContents().get(0);
		private final RuleCall cColumnVarTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cColumnVarTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFunctionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cFunctionXFunctionTypeCrossReference_5_0 = (CrossReference)cFunctionAssignment_5.eContents().get(0);
		private final RuleCall cFunctionXFunctionTypeIDTerminalRuleCall_5_0_1 = (RuleCall)cFunctionXFunctionTypeCrossReference_5_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//XStreamVarListenerType:
		//	{XStreamVarListenerType} 'streamVarListener' '(' column=[VarType] ',' function=[XFunctionType] ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{XStreamVarListenerType} 'streamVarListener' '(' column=[VarType] ',' function=[XFunctionType] ')' ';'
		public Group getGroup() { return cGroup; }
		
		//{XStreamVarListenerType}
		public Action getXStreamVarListenerTypeAction_0() { return cXStreamVarListenerTypeAction_0; }
		
		//'streamVarListener'
		public Keyword getStreamVarListenerKeyword_1() { return cStreamVarListenerKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//column=[VarType]
		public Assignment getColumnAssignment_3() { return cColumnAssignment_3; }
		
		//[VarType]
		public CrossReference getColumnVarTypeCrossReference_3_0() { return cColumnVarTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getColumnVarTypeIDTerminalRuleCall_3_0_1() { return cColumnVarTypeIDTerminalRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//function=[XFunctionType]
		public Assignment getFunctionAssignment_5() { return cFunctionAssignment_5; }
		
		//[XFunctionType]
		public CrossReference getFunctionXFunctionTypeCrossReference_5_0() { return cFunctionXFunctionTypeCrossReference_5_0; }
		
		//ID
		public RuleCall getFunctionXFunctionTypeIDTerminalRuleCall_5_0_1() { return cFunctionXFunctionTypeIDTerminalRuleCall_5_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class XSignalTriggerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XSignalTriggerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXSignalTriggerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSignalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSignalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSignalSignalTypeCrossReference_3_0 = (CrossReference)cSignalAssignment_3.eContents().get(0);
		private final RuleCall cSignalSignalTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cSignalSignalTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XSignalTriggerType:
		//	{XSignalTriggerType} 'signal' '(' signal=[SignalType] ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{XSignalTriggerType} 'signal' '(' signal=[SignalType] ')' ';'
		public Group getGroup() { return cGroup; }
		
		//{XSignalTriggerType}
		public Action getXSignalTriggerTypeAction_0() { return cXSignalTriggerTypeAction_0; }
		
		//'signal'
		public Keyword getSignalKeyword_1() { return cSignalKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//signal=[SignalType]
		public Assignment getSignalAssignment_3() { return cSignalAssignment_3; }
		
		//[SignalType]
		public CrossReference getSignalSignalTypeCrossReference_3_0() { return cSignalSignalTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getSignalSignalTypeIDTerminalRuleCall_3_0_1() { return cSignalSignalTypeIDTerminalRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class XFunctionStartTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XFunctionStartType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXFunctionStartTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionRunnerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFunctionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFunctionXFunctionTypeCrossReference_3_0 = (CrossReference)cFunctionAssignment_3.eContents().get(0);
		private final RuleCall cFunctionXFunctionTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cFunctionXFunctionTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIntervalAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIntervalINTTerminalRuleCall_5_0 = (RuleCall)cIntervalAssignment_5.eContents().get(0);
		private final Assignment cTimeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTimeStreamTimeUnitEnumRuleCall_6_0 = (RuleCall)cTimeAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//XFunctionStartType:
		//	{XFunctionStartType} 'functionRunner' '(' function=[XFunctionType] ',' interval=INT time=StreamTimeUnit ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{XFunctionStartType} 'functionRunner' '(' function=[XFunctionType] ',' interval=INT time=StreamTimeUnit ')' ';'
		public Group getGroup() { return cGroup; }
		
		//{XFunctionStartType}
		public Action getXFunctionStartTypeAction_0() { return cXFunctionStartTypeAction_0; }
		
		//'functionRunner'
		public Keyword getFunctionRunnerKeyword_1() { return cFunctionRunnerKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//function=[XFunctionType]
		public Assignment getFunctionAssignment_3() { return cFunctionAssignment_3; }
		
		//[XFunctionType]
		public CrossReference getFunctionXFunctionTypeCrossReference_3_0() { return cFunctionXFunctionTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getFunctionXFunctionTypeIDTerminalRuleCall_3_0_1() { return cFunctionXFunctionTypeIDTerminalRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//interval=INT
		public Assignment getIntervalAssignment_5() { return cIntervalAssignment_5; }
		
		//INT
		public RuleCall getIntervalINTTerminalRuleCall_5_0() { return cIntervalINTTerminalRuleCall_5_0; }
		
		//time=StreamTimeUnit
		public Assignment getTimeAssignment_6() { return cTimeAssignment_6; }
		
		//StreamTimeUnit
		public RuleCall getTimeStreamTimeUnitEnumRuleCall_6_0() { return cTimeStreamTimeUnitEnumRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class XVarSetterTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XVarSetterType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXVarSetterTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVarXVarTypeCrossReference_1_0 = (CrossReference)cVarAssignment_1.eContents().get(0);
		private final RuleCall cVarXVarTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cVarXVarTypeCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpXExpressionTypeParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//XVarSetterType:
		//	{XVarSetterType} var=[XVarType] '=' exp=XExpressionType ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{XVarSetterType} var=[XVarType] '=' exp=XExpressionType ';'
		public Group getGroup() { return cGroup; }
		
		//{XVarSetterType}
		public Action getXVarSetterTypeAction_0() { return cXVarSetterTypeAction_0; }
		
		//var=[XVarType]
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//[XVarType]
		public CrossReference getVarXVarTypeCrossReference_1_0() { return cVarXVarTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getVarXVarTypeIDTerminalRuleCall_1_0_1() { return cVarXVarTypeIDTerminalRuleCall_1_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//exp=XExpressionType
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }
		
		//XExpressionType
		public RuleCall getExpXExpressionTypeParserRuleCall_3_0() { return cExpXExpressionTypeParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class XVarIncrementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XVarIncrementType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXVarIncrementTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVarXVarTypeCrossReference_1_0 = (CrossReference)cVarAssignment_1.eContents().get(0);
		private final RuleCall cVarXVarTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cVarXVarTypeCrossReference_1_0.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XVarIncrementType:
		//	{XVarIncrementType} var=[XVarType] '++' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{XVarIncrementType} var=[XVarType] '++' ';'
		public Group getGroup() { return cGroup; }
		
		//{XVarIncrementType}
		public Action getXVarIncrementTypeAction_0() { return cXVarIncrementTypeAction_0; }
		
		//var=[XVarType]
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//[XVarType]
		public CrossReference getVarXVarTypeCrossReference_1_0() { return cVarXVarTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getVarXVarTypeIDTerminalRuleCall_1_0_1() { return cVarXVarTypeIDTerminalRuleCall_1_0_1; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_2() { return cPlusSignPlusSignKeyword_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class XVarDecrementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XVarDecrementType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXVarDecrementTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVarXVarTypeCrossReference_1_0 = (CrossReference)cVarAssignment_1.eContents().get(0);
		private final RuleCall cVarXVarTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cVarXVarTypeCrossReference_1_0.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XVarDecrementType:
		//	{XVarDecrementType} var=[XVarType] '--' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{XVarDecrementType} var=[XVarType] '--' ';'
		public Group getGroup() { return cGroup; }
		
		//{XVarDecrementType}
		public Action getXVarDecrementTypeAction_0() { return cXVarDecrementTypeAction_0; }
		
		//var=[XVarType]
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//[XVarType]
		public CrossReference getVarXVarTypeCrossReference_1_0() { return cVarXVarTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getVarXVarTypeIDTerminalRuleCall_1_0_1() { return cVarXVarTypeIDTerminalRuleCall_1_0_1; }
		
		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_2() { return cHyphenMinusHyphenMinusKeyword_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class XSetVarTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XSetVarType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXSetVarTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSetStreamVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cVarVarTypeCrossReference_3_0 = (CrossReference)cVarAssignment_3.eContents().get(0);
		private final RuleCall cVarVarTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cVarVarTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueXExpressionTypeParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//XSetVarType:
		//	{XSetVarType} 'setStreamVar' '(' var=[VarType] ',' value=XExpressionType ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{XSetVarType} 'setStreamVar' '(' var=[VarType] ',' value=XExpressionType ')' ';'
		public Group getGroup() { return cGroup; }
		
		//{XSetVarType}
		public Action getXSetVarTypeAction_0() { return cXSetVarTypeAction_0; }
		
		//'setStreamVar'
		public Keyword getSetStreamVarKeyword_1() { return cSetStreamVarKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//var=[VarType]
		public Assignment getVarAssignment_3() { return cVarAssignment_3; }
		
		//[VarType]
		public CrossReference getVarVarTypeCrossReference_3_0() { return cVarVarTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getVarVarTypeIDTerminalRuleCall_3_0_1() { return cVarVarTypeIDTerminalRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//value=XExpressionType
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//XExpressionType
		public RuleCall getValueXExpressionTypeParserRuleCall_5_0() { return cValueXExpressionTypeParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class XDebugTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XDebugType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXDebugTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDebugKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsXExpressionTypeParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsXExpressionTypeParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XDebugType:
		//	{XDebugType} 'debug' '(' (args+=XExpressionType (',' args+=XExpressionType)*)? ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{XDebugType} 'debug' '(' (args+=XExpressionType (',' args+=XExpressionType)*)? ')' ';'
		public Group getGroup() { return cGroup; }
		
		//{XDebugType}
		public Action getXDebugTypeAction_0() { return cXDebugTypeAction_0; }
		
		//'debug'
		public Keyword getDebugKeyword_1() { return cDebugKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(args+=XExpressionType (',' args+=XExpressionType)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//args+=XExpressionType
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }
		
		//XExpressionType
		public RuleCall getArgsXExpressionTypeParserRuleCall_3_0_0() { return cArgsXExpressionTypeParserRuleCall_3_0_0; }
		
		//(',' args+=XExpressionType)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//args+=XExpressionType
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }
		
		//XExpressionType
		public RuleCall getArgsXExpressionTypeParserRuleCall_3_1_1_0() { return cArgsXExpressionTypeParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class XIfStatementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XIfStatementType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXIfStatementTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionXExpressionTypeParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementsXClassFunctionElementTypeParserRuleCall_6_0 = (RuleCall)cElementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cElseIfElementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cElseIfElementsXElseIfStatementTypeParserRuleCall_8_0 = (RuleCall)cElseIfElementsAssignment_8.eContents().get(0);
		private final Assignment cElseElementAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cElseElementXElseStatementTypeParserRuleCall_9_0 = (RuleCall)cElseElementAssignment_9.eContents().get(0);
		
		//XIfStatementType:
		//	{XIfStatementType} 'if' '(' expression=XExpressionType ')' '{'
		//	elements+=XClassFunctionElementType*
		//	'}'
		//	elseIfElements+=XElseIfStatementType* elseElement=XElseStatementType?;
		@Override public ParserRule getRule() { return rule; }
		
		//{XIfStatementType} 'if' '(' expression=XExpressionType ')' '{' elements+=XClassFunctionElementType* '}'
		//elseIfElements+=XElseIfStatementType* elseElement=XElseStatementType?
		public Group getGroup() { return cGroup; }
		
		//{XIfStatementType}
		public Action getXIfStatementTypeAction_0() { return cXIfStatementTypeAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//expression=XExpressionType
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//XExpressionType
		public RuleCall getExpressionXExpressionTypeParserRuleCall_3_0() { return cExpressionXExpressionTypeParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//elements+=XClassFunctionElementType*
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }
		
		//XClassFunctionElementType
		public RuleCall getElementsXClassFunctionElementTypeParserRuleCall_6_0() { return cElementsXClassFunctionElementTypeParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//elseIfElements+=XElseIfStatementType*
		public Assignment getElseIfElementsAssignment_8() { return cElseIfElementsAssignment_8; }
		
		//XElseIfStatementType
		public RuleCall getElseIfElementsXElseIfStatementTypeParserRuleCall_8_0() { return cElseIfElementsXElseIfStatementTypeParserRuleCall_8_0; }
		
		//elseElement=XElseStatementType?
		public Assignment getElseElementAssignment_9() { return cElseElementAssignment_9; }
		
		//XElseStatementType
		public RuleCall getElseElementXElseStatementTypeParserRuleCall_9_0() { return cElseElementXElseStatementTypeParserRuleCall_9_0; }
	}
	public class XElseIfStatementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XElseIfStatementType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXElseIfStatementTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cElseifKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionXExpressionTypeParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cElementsAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cElementsXClassFunctionElementTypeParserRuleCall_1_5_0 = (RuleCall)cElementsAssignment_1_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		
		//XElseIfStatementType:
		//	{XElseIfStatementType} ('elseif' '(' expression=XExpressionType ')' '{'
		//	elements+=XClassFunctionElementType*
		//	'}');
		@Override public ParserRule getRule() { return rule; }
		
		//{XElseIfStatementType} ('elseif' '(' expression=XExpressionType ')' '{' elements+=XClassFunctionElementType* '}')
		public Group getGroup() { return cGroup; }
		
		//{XElseIfStatementType}
		public Action getXElseIfStatementTypeAction_0() { return cXElseIfStatementTypeAction_0; }
		
		//('elseif' '(' expression=XExpressionType ')' '{' elements+=XClassFunctionElementType* '}')
		public Group getGroup_1() { return cGroup_1; }
		
		//'elseif'
		public Keyword getElseifKeyword_1_0() { return cElseifKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//expression=XExpressionType
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//XExpressionType
		public RuleCall getExpressionXExpressionTypeParserRuleCall_1_2_0() { return cExpressionXExpressionTypeParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_4() { return cLeftCurlyBracketKeyword_1_4; }
		
		//elements+=XClassFunctionElementType*
		public Assignment getElementsAssignment_1_5() { return cElementsAssignment_1_5; }
		
		//XClassFunctionElementType
		public RuleCall getElementsXClassFunctionElementTypeParserRuleCall_1_5_0() { return cElementsXClassFunctionElementTypeParserRuleCall_1_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_6() { return cRightCurlyBracketKeyword_1_6; }
	}
	public class XElseStatementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XElseStatementType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXElseStatementTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cElseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsXClassFunctionElementTypeParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//XElseStatementType:
		//	{XElseStatementType} 'else' '{'
		//	elements+=XClassFunctionElementType*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{XElseStatementType} 'else' '{' elements+=XClassFunctionElementType* '}'
		public Group getGroup() { return cGroup; }
		
		//{XElseStatementType}
		public Action getXElseStatementTypeAction_0() { return cXElseStatementTypeAction_0; }
		
		//'else'
		public Keyword getElseKeyword_1() { return cElseKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=XClassFunctionElementType*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//XClassFunctionElementType
		public RuleCall getElementsXClassFunctionElementTypeParserRuleCall_3_0() { return cElementsXClassFunctionElementTypeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class XWhileTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XWhileType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXWhileTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhilstKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionXExpressionTypeParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementsXWhileElementTypeParserRuleCall_6_0 = (RuleCall)cElementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//XWhileType:
		//	{XWhileType} 'whilst' '(' expression=XExpressionType ')' '{'
		//	elements+=XWhileElementType*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{XWhileType} 'whilst' '(' expression=XExpressionType ')' '{' elements+=XWhileElementType* '}'
		public Group getGroup() { return cGroup; }
		
		//{XWhileType}
		public Action getXWhileTypeAction_0() { return cXWhileTypeAction_0; }
		
		//'whilst'
		public Keyword getWhilstKeyword_1() { return cWhilstKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//expression=XExpressionType
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//XExpressionType
		public RuleCall getExpressionXExpressionTypeParserRuleCall_3_0() { return cExpressionXExpressionTypeParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//elements+=XWhileElementType*
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }
		
		//XWhileElementType
		public RuleCall getElementsXWhileElementTypeParserRuleCall_6_0() { return cElementsXWhileElementTypeParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class XWhileElementTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XWhileElementType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXWhileBreakTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXClassFunctionElementTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XWhileElementType XClassElementType:
		//	XWhileBreakType | XClassFunctionElementType;
		@Override public ParserRule getRule() { return rule; }
		
		//XWhileBreakType | XClassFunctionElementType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XWhileBreakType
		public RuleCall getXWhileBreakTypeParserRuleCall_0() { return cXWhileBreakTypeParserRuleCall_0; }
		
		//XClassFunctionElementType
		public RuleCall getXClassFunctionElementTypeParserRuleCall_1() { return cXClassFunctionElementTypeParserRuleCall_1; }
	}
	public class XWhileBreakTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XWhileBreakType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXWhileBreakTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XWhileBreakType:
		//	{XWhileBreakType} 'break' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{XWhileBreakType} 'break' ';'
		public Group getGroup() { return cGroup; }
		
		//{XWhileBreakType}
		public Action getXWhileBreakTypeAction_0() { return cXWhileBreakTypeAction_0; }
		
		//'break'
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class XSleepTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XSleepType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXSleepTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSleepKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIntervalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIntervalINTTerminalRuleCall_3_0 = (RuleCall)cIntervalAssignment_3.eContents().get(0);
		private final Assignment cUnitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnitStreamTimeUnitEnumRuleCall_4_0 = (RuleCall)cUnitAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XSleepType:
		//	{XSleepType} 'sleep' '(' interval=INT unit=StreamTimeUnit ')' ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{XSleepType} 'sleep' '(' interval=INT unit=StreamTimeUnit ')' ';'
		public Group getGroup() { return cGroup; }
		
		//{XSleepType}
		public Action getXSleepTypeAction_0() { return cXSleepTypeAction_0; }
		
		//'sleep'
		public Keyword getSleepKeyword_1() { return cSleepKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//interval=INT
		public Assignment getIntervalAssignment_3() { return cIntervalAssignment_3; }
		
		//INT
		public RuleCall getIntervalINTTerminalRuleCall_3_0() { return cIntervalINTTerminalRuleCall_3_0; }
		
		//unit=StreamTimeUnit
		public Assignment getUnitAssignment_4() { return cUnitAssignment_4; }
		
		//StreamTimeUnit
		public RuleCall getUnitStreamTimeUnitEnumRuleCall_4_0() { return cUnitStreamTimeUnitEnumRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}
	public class XExpressionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XExpressionType");
		private final RuleCall cXOrTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///*******************
		// * Core XExpression Types 
		// ********************/ XExpressionType:
		//	XOrType;
		@Override public ParserRule getRule() { return rule; }
		
		//XOrType
		public RuleCall getXOrTypeParserRuleCall() { return cXOrTypeParserRuleCall; }
	}
	public class XOrTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XOrType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXAndTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXOrTypeLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightXAndTypeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//XOrType XExpressionType:
		//	XAndType ({XOrType.left=current} "||" right=XAndType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XAndType ({XOrType.left=current} "||" right=XAndType)*
		public Group getGroup() { return cGroup; }
		
		//XAndType
		public RuleCall getXAndTypeParserRuleCall_0() { return cXAndTypeParserRuleCall_0; }
		
		//({XOrType.left=current} "||" right=XAndType)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{XOrType.left=current}
		public Action getXOrTypeLeftAction_1_0() { return cXOrTypeLeftAction_1_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=XAndType
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//XAndType
		public RuleCall getRightXAndTypeParserRuleCall_1_2_0() { return cRightXAndTypeParserRuleCall_1_2_0; }
	}
	public class XAndTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XAndType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXEqualityTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXAndTypeLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightXEqualityTypeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//XAndType XExpressionType:
		//	XEqualityType ({XAndType.left=current} "&&" right=XEqualityType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XEqualityType ({XAndType.left=current} "&&" right=XEqualityType)*
		public Group getGroup() { return cGroup; }
		
		//XEqualityType
		public RuleCall getXEqualityTypeParserRuleCall_0() { return cXEqualityTypeParserRuleCall_0; }
		
		//({XAndType.left=current} "&&" right=XEqualityType)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{XAndType.left=current}
		public Action getXAndTypeLeftAction_1_0() { return cXAndTypeLeftAction_1_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//right=XEqualityType
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//XEqualityType
		public RuleCall getRightXEqualityTypeParserRuleCall_1_2_0() { return cRightXEqualityTypeParserRuleCall_1_2_0; }
	}
	public class XEqualityTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XEqualityType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXComparisonTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXEqualityTypeLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightXComparisonTypeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//XEqualityType XExpressionType:
		//	XComparisonType ({XEqualityType.left=current} op=("==" | "!=") right=XComparisonType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XComparisonType ({XEqualityType.left=current} op=("==" | "!=") right=XComparisonType)*
		public Group getGroup() { return cGroup; }
		
		//XComparisonType
		public RuleCall getXComparisonTypeParserRuleCall_0() { return cXComparisonTypeParserRuleCall_0; }
		
		//({XEqualityType.left=current} op=("==" | "!=") right=XComparisonType)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{XEqualityType.left=current}
		public Action getXEqualityTypeLeftAction_1_0() { return cXEqualityTypeLeftAction_1_0; }
		
		//op=("==" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//("==" | "!=")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=XComparisonType
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//XComparisonType
		public RuleCall getRightXComparisonTypeParserRuleCall_1_2_0() { return cRightXComparisonTypeParserRuleCall_1_2_0; }
	}
	public class XComparisonTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XComparisonType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXPlusOrMinusTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXComparisonTypeLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightXPlusOrMinusTypeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//XComparisonType XExpressionType:
		//	XPlusOrMinusType ({XComparisonType.left=current} op=(">=" | "<=" | ">" | "<") right=XPlusOrMinusType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XPlusOrMinusType ({XComparisonType.left=current} op=(">=" | "<=" | ">" | "<") right=XPlusOrMinusType)*
		public Group getGroup() { return cGroup; }
		
		//XPlusOrMinusType
		public RuleCall getXPlusOrMinusTypeParserRuleCall_0() { return cXPlusOrMinusTypeParserRuleCall_0; }
		
		//({XComparisonType.left=current} op=(">=" | "<=" | ">" | "<") right=XPlusOrMinusType)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{XComparisonType.left=current}
		public Action getXComparisonTypeLeftAction_1_0() { return cXComparisonTypeLeftAction_1_0; }
		
		//op=(">=" | "<=" | ">" | "<")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(">=" | "<=" | ">" | "<")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }
		
		//right=XPlusOrMinusType
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//XPlusOrMinusType
		public RuleCall getRightXPlusOrMinusTypeParserRuleCall_1_2_0() { return cRightXPlusOrMinusTypeParserRuleCall_1_2_0; }
	}
	public class XPlusOrMinusTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XPlusOrMinusType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXMulOrDivTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cXPlusTypeLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cXMinusTypeLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightXMulOrDivTypeParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//XPlusOrMinusType XExpressionType:
		//	XMulOrDivType (({XPlusType.left=current} '+' | {XMinusType.left=current} '-') right=XMulOrDivType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XMulOrDivType (({XPlusType.left=current} '+' | {XMinusType.left=current} '-') right=XMulOrDivType)*
		public Group getGroup() { return cGroup; }
		
		//XMulOrDivType
		public RuleCall getXMulOrDivTypeParserRuleCall_0() { return cXMulOrDivTypeParserRuleCall_0; }
		
		//(({XPlusType.left=current} '+' | {XMinusType.left=current} '-') right=XMulOrDivType)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({XPlusType.left=current} '+' | {XMinusType.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{XPlusType.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{XPlusType.left=current}
		public Action getXPlusTypeLeftAction_1_0_0_0() { return cXPlusTypeLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{XMinusType.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{XMinusType.left=current}
		public Action getXMinusTypeLeftAction_1_0_1_0() { return cXMinusTypeLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=XMulOrDivType
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//XMulOrDivType
		public RuleCall getRightXMulOrDivTypeParserRuleCall_1_1_0() { return cRightXMulOrDivTypeParserRuleCall_1_1_0; }
	}
	public class XMulOrDivTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XMulOrDivType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXPrimaryTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXMulOrDivTypeLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightXPrimaryTypeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//XMulOrDivType XExpressionType:
		//	XPrimaryType ({XMulOrDivType.left=current} op=('*' | '/') right=XPrimaryType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XPrimaryType ({XMulOrDivType.left=current} op=('*' | '/') right=XPrimaryType)*
		public Group getGroup() { return cGroup; }
		
		//XPrimaryType
		public RuleCall getXPrimaryTypeParserRuleCall_0() { return cXPrimaryTypeParserRuleCall_0; }
		
		//({XMulOrDivType.left=current} op=('*' | '/') right=XPrimaryType)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{XMulOrDivType.left=current}
		public Action getXMulOrDivTypeLeftAction_1_0() { return cXMulOrDivTypeLeftAction_1_0; }
		
		//op=('*' | '/')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//right=XPrimaryType
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//XPrimaryType
		public RuleCall getRightXPrimaryTypeParserRuleCall_1_2_0() { return cRightXPrimaryTypeParserRuleCall_1_2_0; }
	}
	public class XPrimaryTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XPrimaryType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cXExpressionTypeParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cXNotTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionXPrimaryTypeParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cXAtomicTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XPrimaryType XExpressionType:
		//	'(' XExpressionType ')' | {XNotType} "!" expression=XPrimaryType | XAtomicType;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' XExpressionType ')' | {XNotType} "!" expression=XPrimaryType | XAtomicType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' XExpressionType ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//XExpressionType
		public RuleCall getXExpressionTypeParserRuleCall_0_1() { return cXExpressionTypeParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{XNotType} "!" expression=XPrimaryType
		public Group getGroup_1() { return cGroup_1; }
		
		//{XNotType}
		public Action getXNotTypeAction_1_0() { return cXNotTypeAction_1_0; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }
		
		//expression=XPrimaryType
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//XPrimaryType
		public RuleCall getExpressionXPrimaryTypeParserRuleCall_1_2_0() { return cExpressionXPrimaryTypeParserRuleCall_1_2_0; }
		
		//XAtomicType
		public RuleCall getXAtomicTypeParserRuleCall_2() { return cXAtomicTypeParserRuleCall_2; }
	}
	public class XAtomicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XAtomicType");
		private final RuleCall cXAtomicBaseTypeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//XAtomicType XExpressionType:
		//	XAtomicBaseType;
		@Override public ParserRule getRule() { return rule; }
		
		//XAtomicBaseType
		public RuleCall getXAtomicBaseTypeParserRuleCall() { return cXAtomicBaseTypeParserRuleCall; }
	}
	public class XAtomicBaseTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XAtomicBaseType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cXDoubleConstantTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cXIntConstantTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cXStringConstantTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cXBoolConstantTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Alternatives cValueAlternatives_3_1_0 = (Alternatives)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_3_1_0_0 = (Keyword)cValueAlternatives_3_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_3_1_0_1 = (Keyword)cValueAlternatives_3_1_0.eContents().get(1);
		private final RuleCall cXPercentChangeExpTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXSubExpTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXVarExpTypeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXStreamWrapperExpTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXStreamVarValueExpTypeParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXFunctionCallExpTypeParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cXVarStreakTypeParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cXVarCompareStreakTypeParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cXSlrAvgExpTypeParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cXLastSignalTriggerTypeParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cXSignalTriggerCountTypeParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cXVarianceAverageTypeParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cXRocExpTypeParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		private final RuleCall cXVarianceMaxTypeParserRuleCall_17 = (RuleCall)cAlternatives.eContents().get(17);
		
		///********************************
		// * XClass Expression Types -- added to XBooleanConstantType
		// ************************************/ XAtomicBaseType XExpressionType:
		//	{XDoubleConstantType} value=DOUBLE | {XIntConstantType} value=INT | {XStringConstantType} value=STRING |
		//	{XBoolConstantType} value=('true' | 'false') | XPercentChangeExpType | XSubExpType | XVarExpType |
		//	XStreamWrapperExpType | XStreamVarValueExpType | XFunctionCallExpType | XVarStreakType | XVarCompareStreakType |
		//	XSlrAvgExpType | XLastSignalTriggerType | XSignalTriggerCountType | XVarianceAverageType | XRocExpType |
		//	XVarianceMaxType;
		@Override public ParserRule getRule() { return rule; }
		
		//{XDoubleConstantType} value=DOUBLE | {XIntConstantType} value=INT | {XStringConstantType} value=STRING |
		//{XBoolConstantType} value=('true' | 'false') | XPercentChangeExpType | XSubExpType | XVarExpType |
		//XStreamWrapperExpType | XStreamVarValueExpType | XFunctionCallExpType | XVarStreakType | XVarCompareStreakType |
		//XSlrAvgExpType | XLastSignalTriggerType | XSignalTriggerCountType | XVarianceAverageType | XRocExpType |
		//XVarianceMaxType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{XDoubleConstantType} value=DOUBLE
		public Group getGroup_0() { return cGroup_0; }
		
		//{XDoubleConstantType}
		public Action getXDoubleConstantTypeAction_0_0() { return cXDoubleConstantTypeAction_0_0; }
		
		//value=DOUBLE
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_0_1_0() { return cValueDOUBLETerminalRuleCall_0_1_0; }
		
		//{XIntConstantType} value=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//{XIntConstantType}
		public Action getXIntConstantTypeAction_1_0() { return cXIntConstantTypeAction_1_0; }
		
		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }
		
		//{XStringConstantType} value=STRING
		public Group getGroup_2() { return cGroup_2; }
		
		//{XStringConstantType}
		public Action getXStringConstantTypeAction_2_0() { return cXStringConstantTypeAction_2_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
		
		//{XBoolConstantType} value=('true' | 'false')
		public Group getGroup_3() { return cGroup_3; }
		
		//{XBoolConstantType}
		public Action getXBoolConstantTypeAction_3_0() { return cXBoolConstantTypeAction_3_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_3_1_0() { return cValueAlternatives_3_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_3_1_0_0() { return cValueTrueKeyword_3_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_3_1_0_1() { return cValueFalseKeyword_3_1_0_1; }
		
		//XPercentChangeExpType
		public RuleCall getXPercentChangeExpTypeParserRuleCall_4() { return cXPercentChangeExpTypeParserRuleCall_4; }
		
		//XSubExpType
		public RuleCall getXSubExpTypeParserRuleCall_5() { return cXSubExpTypeParserRuleCall_5; }
		
		//XVarExpType
		public RuleCall getXVarExpTypeParserRuleCall_6() { return cXVarExpTypeParserRuleCall_6; }
		
		//XStreamWrapperExpType
		public RuleCall getXStreamWrapperExpTypeParserRuleCall_7() { return cXStreamWrapperExpTypeParserRuleCall_7; }
		
		//XStreamVarValueExpType
		public RuleCall getXStreamVarValueExpTypeParserRuleCall_8() { return cXStreamVarValueExpTypeParserRuleCall_8; }
		
		//XFunctionCallExpType
		public RuleCall getXFunctionCallExpTypeParserRuleCall_9() { return cXFunctionCallExpTypeParserRuleCall_9; }
		
		//XVarStreakType
		public RuleCall getXVarStreakTypeParserRuleCall_10() { return cXVarStreakTypeParserRuleCall_10; }
		
		//XVarCompareStreakType
		public RuleCall getXVarCompareStreakTypeParserRuleCall_11() { return cXVarCompareStreakTypeParserRuleCall_11; }
		
		//XSlrAvgExpType
		public RuleCall getXSlrAvgExpTypeParserRuleCall_12() { return cXSlrAvgExpTypeParserRuleCall_12; }
		
		//XLastSignalTriggerType
		public RuleCall getXLastSignalTriggerTypeParserRuleCall_13() { return cXLastSignalTriggerTypeParserRuleCall_13; }
		
		//XSignalTriggerCountType
		public RuleCall getXSignalTriggerCountTypeParserRuleCall_14() { return cXSignalTriggerCountTypeParserRuleCall_14; }
		
		//XVarianceAverageType
		public RuleCall getXVarianceAverageTypeParserRuleCall_15() { return cXVarianceAverageTypeParserRuleCall_15; }
		
		//XRocExpType
		public RuleCall getXRocExpTypeParserRuleCall_16() { return cXRocExpTypeParserRuleCall_16; }
		
		//XVarianceMaxType
		public RuleCall getXVarianceMaxTypeParserRuleCall_17() { return cXVarianceMaxTypeParserRuleCall_17; }
	}
	public class XPercentChangeExpTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XPercentChangeExpType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXPercentChangeExpTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPercentChangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValue1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValue1XExpressionTypeParserRuleCall_3_0 = (RuleCall)cValue1Assignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValue2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValue2XExpressionTypeParserRuleCall_5_0 = (RuleCall)cValue2Assignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XPercentChangeExpType:
		//	{XPercentChangeExpType} 'percentChange' '(' value1=XExpressionType "," value2=XExpressionType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{XPercentChangeExpType} 'percentChange' '(' value1=XExpressionType "," value2=XExpressionType ')'
		public Group getGroup() { return cGroup; }
		
		//{XPercentChangeExpType}
		public Action getXPercentChangeExpTypeAction_0() { return cXPercentChangeExpTypeAction_0; }
		
		//'percentChange'
		public Keyword getPercentChangeKeyword_1() { return cPercentChangeKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//value1=XExpressionType
		public Assignment getValue1Assignment_3() { return cValue1Assignment_3; }
		
		//XExpressionType
		public RuleCall getValue1XExpressionTypeParserRuleCall_3_0() { return cValue1XExpressionTypeParserRuleCall_3_0; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//value2=XExpressionType
		public Assignment getValue2Assignment_5() { return cValue2Assignment_5; }
		
		//XExpressionType
		public RuleCall getValue2XExpressionTypeParserRuleCall_5_0() { return cValue2XExpressionTypeParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class XSubExpTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XSubExpType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXSubExpTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSubKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValue1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValue1XExpressionTypeParserRuleCall_3_0 = (RuleCall)cValue1Assignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValue2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValue2XExpressionTypeParserRuleCall_5_0 = (RuleCall)cValue2Assignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XSubExpType:
		//	{XSubExpType} 'sub' '(' value1=XExpressionType "," value2=XExpressionType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{XSubExpType} 'sub' '(' value1=XExpressionType "," value2=XExpressionType ')'
		public Group getGroup() { return cGroup; }
		
		//{XSubExpType}
		public Action getXSubExpTypeAction_0() { return cXSubExpTypeAction_0; }
		
		//'sub'
		public Keyword getSubKeyword_1() { return cSubKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//value1=XExpressionType
		public Assignment getValue1Assignment_3() { return cValue1Assignment_3; }
		
		//XExpressionType
		public RuleCall getValue1XExpressionTypeParserRuleCall_3_0() { return cValue1XExpressionTypeParserRuleCall_3_0; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//value2=XExpressionType
		public Assignment getValue2Assignment_5() { return cValue2Assignment_5; }
		
		//XExpressionType
		public RuleCall getValue2XExpressionTypeParserRuleCall_5_0() { return cValue2XExpressionTypeParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class XVarExpTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XVarExpType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXVarExpTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cExpVarXVarTypeCrossReference_1_0 = (CrossReference)cExpVarAssignment_1.eContents().get(0);
		private final RuleCall cExpVarXVarTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cExpVarXVarTypeCrossReference_1_0.eContents().get(1);
		
		//// Returns the value of the referenced XVar
		//XVarExpType:
		//	{XVarExpType} expVar=[XVarType];
		@Override public ParserRule getRule() { return rule; }
		
		//{XVarExpType} expVar=[XVarType]
		public Group getGroup() { return cGroup; }
		
		//{XVarExpType}
		public Action getXVarExpTypeAction_0() { return cXVarExpTypeAction_0; }
		
		//expVar=[XVarType]
		public Assignment getExpVarAssignment_1() { return cExpVarAssignment_1; }
		
		//[XVarType]
		public CrossReference getExpVarXVarTypeCrossReference_1_0() { return cExpVarXVarTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getExpVarXVarTypeIDTerminalRuleCall_1_0_1() { return cExpVarXVarTypeIDTerminalRuleCall_1_0_1; }
	}
	public class XStreamWrapperExpTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XStreamWrapperExpType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXStreamWrapperExpTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cExpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cWrapperExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cWrapperExpExpressionTypeParserRuleCall_3_0 = (RuleCall)cWrapperExpAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// Element for using XStream Expression type
		//XStreamWrapperExpType:
		//	{XStreamWrapperExpType} 'exp' '(' wrapperExp=ExpressionType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{XStreamWrapperExpType} 'exp' '(' wrapperExp=ExpressionType ')'
		public Group getGroup() { return cGroup; }
		
		//{XStreamWrapperExpType}
		public Action getXStreamWrapperExpTypeAction_0() { return cXStreamWrapperExpTypeAction_0; }
		
		//'exp'
		public Keyword getExpKeyword_1() { return cExpKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//wrapperExp=ExpressionType
		public Assignment getWrapperExpAssignment_3() { return cWrapperExpAssignment_3; }
		
		//ExpressionType
		public RuleCall getWrapperExpExpressionTypeParserRuleCall_3_0() { return cWrapperExpExpressionTypeParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class XStreamVarValueExpTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XStreamVarValueExpType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXStreamVarValueExpTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVarVarTypeCrossReference_1_0 = (CrossReference)cVarAssignment_1.eContents().get(0);
		private final RuleCall cVarVarTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cVarVarTypeCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionValueXExpressionTypeParserRuleCall_2_1_0 = (RuleCall)cExpressionValueAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Element for using XClass expressions for setting the index of XStremVar to return
		//XStreamVarValueExpType:
		//	{XStreamVarValueExpType} var=[VarType] ('[' expressionValue=XExpressionType) ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{XStreamVarValueExpType} var=[VarType] ('[' expressionValue=XExpressionType) ']'
		public Group getGroup() { return cGroup; }
		
		//{XStreamVarValueExpType}
		public Action getXStreamVarValueExpTypeAction_0() { return cXStreamVarValueExpTypeAction_0; }
		
		//var=[VarType]
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }
		
		//[VarType]
		public CrossReference getVarVarTypeCrossReference_1_0() { return cVarVarTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getVarVarTypeIDTerminalRuleCall_1_0_1() { return cVarVarTypeIDTerminalRuleCall_1_0_1; }
		
		//('[' expressionValue=XExpressionType)
		public Group getGroup_2() { return cGroup_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }
		
		//expressionValue=XExpressionType
		public Assignment getExpressionValueAssignment_2_1() { return cExpressionValueAssignment_2_1; }
		
		//XExpressionType
		public RuleCall getExpressionValueXExpressionTypeParserRuleCall_2_1_0() { return cExpressionValueXExpressionTypeParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class XFunctionCallExpTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XFunctionCallExpType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXFunctionCallExpTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFunctionXFunctionTypeCrossReference_1_0 = (CrossReference)cFunctionAssignment_1.eContents().get(0);
		private final RuleCall cFunctionXFunctionTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cFunctionXFunctionTypeCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParmsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParmsSTRINGTerminalRuleCall_3_0 = (RuleCall)cParmsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//XFunctionCallExpType:
		//	{XFunctionCallExpType} function=[XFunctionType] '(' parms=STRING? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{XFunctionCallExpType} function=[XFunctionType] '(' parms=STRING? ')'
		public Group getGroup() { return cGroup; }
		
		//{XFunctionCallExpType}
		public Action getXFunctionCallExpTypeAction_0() { return cXFunctionCallExpTypeAction_0; }
		
		//function=[XFunctionType]
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//[XFunctionType]
		public CrossReference getFunctionXFunctionTypeCrossReference_1_0() { return cFunctionXFunctionTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getFunctionXFunctionTypeIDTerminalRuleCall_1_0_1() { return cFunctionXFunctionTypeIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//parms=STRING?
		public Assignment getParmsAssignment_3() { return cParmsAssignment_3; }
		
		//STRING
		public RuleCall getParmsSTRINGTerminalRuleCall_3_0() { return cParmsSTRINGTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class XVarStreakTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XVarStreakType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXVarStreakTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColumnStrkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cVarVarTypeCrossReference_3_0 = (CrossReference)cVarAssignment_3.eContents().get(0);
		private final RuleCall cVarVarTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cVarVarTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDirectionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cDirectionAlternatives_5_0 = (Alternatives)cDirectionAssignment_5.eContents().get(0);
		private final Keyword cDirectionBwdKeyword_5_0_0 = (Keyword)cDirectionAlternatives_5_0.eContents().get(0);
		private final Keyword cDirectionFwdKeyword_5_0_1 = (Keyword)cDirectionAlternatives_5_0.eContents().get(1);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStartIndexExpAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStartIndexExpXExpressionTypeParserRuleCall_7_0 = (RuleCall)cStartIndexExpAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final Assignment cCompareAssignment_9_0 = (Assignment)cAlternatives_9.eContents().get(0);
		private final RuleCall cCompareXVarStreakCompareTypeParserRuleCall_9_0_0 = (RuleCall)cCompareAssignment_9_0.eContents().get(0);
		private final Assignment cValueAssignment_9_1 = (Assignment)cAlternatives_9.eContents().get(1);
		private final RuleCall cValueXVarStreakValueTypeParserRuleCall_9_1_0 = (RuleCall)cValueAssignment_9_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//XVarStreakType:
		//	{XVarStreakType} 'columnStrk' '(' var=[VarType] ',' direction=("bwd" | "fwd") ',' startIndexExp=XExpressionType ','
		//	(compare=XVarStreakCompareType | value=XVarStreakValueType) ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{XVarStreakType} 'columnStrk' '(' var=[VarType] ',' direction=("bwd" | "fwd") ',' startIndexExp=XExpressionType ','
		//(compare=XVarStreakCompareType | value=XVarStreakValueType) ')'
		public Group getGroup() { return cGroup; }
		
		//{XVarStreakType}
		public Action getXVarStreakTypeAction_0() { return cXVarStreakTypeAction_0; }
		
		//'columnStrk'
		public Keyword getColumnStrkKeyword_1() { return cColumnStrkKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//var=[VarType]
		public Assignment getVarAssignment_3() { return cVarAssignment_3; }
		
		//[VarType]
		public CrossReference getVarVarTypeCrossReference_3_0() { return cVarVarTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getVarVarTypeIDTerminalRuleCall_3_0_1() { return cVarVarTypeIDTerminalRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//direction=("bwd" | "fwd")
		public Assignment getDirectionAssignment_5() { return cDirectionAssignment_5; }
		
		//("bwd" | "fwd")
		public Alternatives getDirectionAlternatives_5_0() { return cDirectionAlternatives_5_0; }
		
		//"bwd"
		public Keyword getDirectionBwdKeyword_5_0_0() { return cDirectionBwdKeyword_5_0_0; }
		
		//"fwd"
		public Keyword getDirectionFwdKeyword_5_0_1() { return cDirectionFwdKeyword_5_0_1; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//startIndexExp=XExpressionType
		public Assignment getStartIndexExpAssignment_7() { return cStartIndexExpAssignment_7; }
		
		//XExpressionType
		public RuleCall getStartIndexExpXExpressionTypeParserRuleCall_7_0() { return cStartIndexExpXExpressionTypeParserRuleCall_7_0; }
		
		//','
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//(compare=XVarStreakCompareType | value=XVarStreakValueType)
		public Alternatives getAlternatives_9() { return cAlternatives_9; }
		
		//compare=XVarStreakCompareType
		public Assignment getCompareAssignment_9_0() { return cCompareAssignment_9_0; }
		
		//XVarStreakCompareType
		public RuleCall getCompareXVarStreakCompareTypeParserRuleCall_9_0_0() { return cCompareXVarStreakCompareTypeParserRuleCall_9_0_0; }
		
		//value=XVarStreakValueType
		public Assignment getValueAssignment_9_1() { return cValueAssignment_9_1; }
		
		//XVarStreakValueType
		public RuleCall getValueXVarStreakValueTypeParserRuleCall_9_1_0() { return cValueXVarStreakValueTypeParserRuleCall_9_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
	}
	public class XVarStreakCompareTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XVarStreakCompareType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXVarStreakCompareTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cFunctionAlternatives_1_0 = (Alternatives)cFunctionAssignment_1.eContents().get(0);
		private final Keyword cFunctionSumKeyword_1_0_0 = (Keyword)cFunctionAlternatives_1_0.eContents().get(0);
		private final Keyword cFunctionDiffKeyword_1_0_1 = (Keyword)cFunctionAlternatives_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOffsetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOffsetINTTerminalRuleCall_3_0 = (RuleCall)cOffsetAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cOpAlternatives_5_0 = (Alternatives)cOpAssignment_5.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_5_0_0 = (Keyword)cOpAlternatives_5_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_5_0_1 = (Keyword)cOpAlternatives_5_0.eContents().get(1);
		private final Keyword cOpEqualsSignKeyword_5_0_2 = (Keyword)cOpAlternatives_5_0.eContents().get(2);
		private final Assignment cTestAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTestDOUBLETerminalRuleCall_6_0 = (RuleCall)cTestAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//XVarStreakCompareType:
		//	{XVarStreakCompareType} function=("sum" | "diff") '(' offset=INT ')' op=("<" | ">" | "=") test=DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{XVarStreakCompareType} function=("sum" | "diff") '(' offset=INT ')' op=("<" | ">" | "=") test=DOUBLE ')'
		public Group getGroup() { return cGroup; }
		
		//{XVarStreakCompareType}
		public Action getXVarStreakCompareTypeAction_0() { return cXVarStreakCompareTypeAction_0; }
		
		//function=("sum" | "diff")
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//("sum" | "diff")
		public Alternatives getFunctionAlternatives_1_0() { return cFunctionAlternatives_1_0; }
		
		//"sum"
		public Keyword getFunctionSumKeyword_1_0_0() { return cFunctionSumKeyword_1_0_0; }
		
		//"diff"
		public Keyword getFunctionDiffKeyword_1_0_1() { return cFunctionDiffKeyword_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//offset=INT
		public Assignment getOffsetAssignment_3() { return cOffsetAssignment_3; }
		
		//INT
		public RuleCall getOffsetINTTerminalRuleCall_3_0() { return cOffsetINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//op=("<" | ">" | "=")
		public Assignment getOpAssignment_5() { return cOpAssignment_5; }
		
		//("<" | ">" | "=")
		public Alternatives getOpAlternatives_5_0() { return cOpAlternatives_5_0; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_5_0_0() { return cOpLessThanSignKeyword_5_0_0; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_5_0_1() { return cOpGreaterThanSignKeyword_5_0_1; }
		
		//"="
		public Keyword getOpEqualsSignKeyword_5_0_2() { return cOpEqualsSignKeyword_5_0_2; }
		
		//test=DOUBLE
		public Assignment getTestAssignment_6() { return cTestAssignment_6; }
		
		//DOUBLE
		public RuleCall getTestDOUBLETerminalRuleCall_6_0() { return cTestDOUBLETerminalRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class XVarStreakValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XVarStreakValueType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXVarStreakValueTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cOpAlternatives_2_0 = (Alternatives)cOpAssignment_2.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_2_0_0 = (Keyword)cOpAlternatives_2_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_2_0_1 = (Keyword)cOpAlternatives_2_0.eContents().get(1);
		private final Keyword cOpEqualsSignKeyword_2_0_2 = (Keyword)cOpAlternatives_2_0.eContents().get(2);
		private final Assignment cTestAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTestDOUBLETerminalRuleCall_3_0 = (RuleCall)cTestAssignment_3.eContents().get(0);
		
		//XVarStreakValueType:
		//	{XVarStreakValueType} 'value' op=("<" | ">" | "=") test=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//{XVarStreakValueType} 'value' op=("<" | ">" | "=") test=DOUBLE
		public Group getGroup() { return cGroup; }
		
		//{XVarStreakValueType}
		public Action getXVarStreakValueTypeAction_0() { return cXVarStreakValueTypeAction_0; }
		
		//'value'
		public Keyword getValueKeyword_1() { return cValueKeyword_1; }
		
		//op=("<" | ">" | "=")
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }
		
		//("<" | ">" | "=")
		public Alternatives getOpAlternatives_2_0() { return cOpAlternatives_2_0; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_2_0_0() { return cOpLessThanSignKeyword_2_0_0; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_2_0_1() { return cOpGreaterThanSignKeyword_2_0_1; }
		
		//"="
		public Keyword getOpEqualsSignKeyword_2_0_2() { return cOpEqualsSignKeyword_2_0_2; }
		
		//test=DOUBLE
		public Assignment getTestAssignment_3() { return cTestAssignment_3; }
		
		//DOUBLE
		public RuleCall getTestDOUBLETerminalRuleCall_3_0() { return cTestDOUBLETerminalRuleCall_3_0; }
	}
	public class XVarCompareStreakTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XVarCompareStreakType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXVarCompareStreakTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColumnPairStrkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetVarVarTypeCrossReference_3_0 = (CrossReference)cTargetVarAssignment_3.eContents().get(0);
		private final RuleCall cTargetVarVarTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetVarVarTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCompareVarAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cCompareVarVarTypeCrossReference_5_0 = (CrossReference)cCompareVarAssignment_5.eContents().get(0);
		private final RuleCall cCompareVarVarTypeIDTerminalRuleCall_5_0_1 = (RuleCall)cCompareVarVarTypeCrossReference_5_0.eContents().get(1);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDirectionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Alternatives cDirectionAlternatives_7_0 = (Alternatives)cDirectionAssignment_7.eContents().get(0);
		private final Keyword cDirectionBwdKeyword_7_0_0 = (Keyword)cDirectionAlternatives_7_0.eContents().get(0);
		private final Keyword cDirectionFwdKeyword_7_0_1 = (Keyword)cDirectionAlternatives_7_0.eContents().get(1);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cStartIndexExpAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStartIndexExpXExpressionTypeParserRuleCall_9_0 = (RuleCall)cStartIndexExpAssignment_9.eContents().get(0);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cFunctionAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final Alternatives cFunctionAlternatives_11_0 = (Alternatives)cFunctionAssignment_11.eContents().get(0);
		private final Keyword cFunctionSumKeyword_11_0_0 = (Keyword)cFunctionAlternatives_11_0.eContents().get(0);
		private final Keyword cFunctionDiffKeyword_11_0_1 = (Keyword)cFunctionAlternatives_11_0.eContents().get(1);
		private final Keyword cFunctionValueKeyword_11_0_2 = (Keyword)cFunctionAlternatives_11_0.eContents().get(2);
		private final Keyword cFunctionVarianceKeyword_11_0_3 = (Keyword)cFunctionAlternatives_11_0.eContents().get(3);
		private final Assignment cOpAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final Alternatives cOpAlternatives_12_0 = (Alternatives)cOpAssignment_12.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_12_0_0 = (Keyword)cOpAlternatives_12_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignKeyword_12_0_1 = (Keyword)cOpAlternatives_12_0.eContents().get(1);
		private final Keyword cOpEqualsSignKeyword_12_0_2 = (Keyword)cOpAlternatives_12_0.eContents().get(2);
		private final Assignment cTestAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cTestDOUBLETerminalRuleCall_13_0 = (RuleCall)cTestAssignment_13.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//XVarCompareStreakType:
		//	{XVarCompareStreakType} 'columnPairStrk' '(' targetVar=[VarType] "," compareVar=[VarType] "," direction=("bwd" |
		//	"fwd") ',' startIndexExp=XExpressionType "," function=("sum" | "diff" | "value" | "variance") op=("<" | ">" | "=")
		//	test=DOUBLE ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{XVarCompareStreakType} 'columnPairStrk' '(' targetVar=[VarType] "," compareVar=[VarType] "," direction=("bwd" | "fwd")
		//',' startIndexExp=XExpressionType "," function=("sum" | "diff" | "value" | "variance") op=("<" | ">" | "=") test=DOUBLE
		//')'
		public Group getGroup() { return cGroup; }
		
		//{XVarCompareStreakType}
		public Action getXVarCompareStreakTypeAction_0() { return cXVarCompareStreakTypeAction_0; }
		
		//'columnPairStrk'
		public Keyword getColumnPairStrkKeyword_1() { return cColumnPairStrkKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//targetVar=[VarType]
		public Assignment getTargetVarAssignment_3() { return cTargetVarAssignment_3; }
		
		//[VarType]
		public CrossReference getTargetVarVarTypeCrossReference_3_0() { return cTargetVarVarTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getTargetVarVarTypeIDTerminalRuleCall_3_0_1() { return cTargetVarVarTypeIDTerminalRuleCall_3_0_1; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//compareVar=[VarType]
		public Assignment getCompareVarAssignment_5() { return cCompareVarAssignment_5; }
		
		//[VarType]
		public CrossReference getCompareVarVarTypeCrossReference_5_0() { return cCompareVarVarTypeCrossReference_5_0; }
		
		//ID
		public RuleCall getCompareVarVarTypeIDTerminalRuleCall_5_0_1() { return cCompareVarVarTypeIDTerminalRuleCall_5_0_1; }
		
		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//direction=("bwd" | "fwd")
		public Assignment getDirectionAssignment_7() { return cDirectionAssignment_7; }
		
		//("bwd" | "fwd")
		public Alternatives getDirectionAlternatives_7_0() { return cDirectionAlternatives_7_0; }
		
		//"bwd"
		public Keyword getDirectionBwdKeyword_7_0_0() { return cDirectionBwdKeyword_7_0_0; }
		
		//"fwd"
		public Keyword getDirectionFwdKeyword_7_0_1() { return cDirectionFwdKeyword_7_0_1; }
		
		//','
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//startIndexExp=XExpressionType
		public Assignment getStartIndexExpAssignment_9() { return cStartIndexExpAssignment_9; }
		
		//XExpressionType
		public RuleCall getStartIndexExpXExpressionTypeParserRuleCall_9_0() { return cStartIndexExpXExpressionTypeParserRuleCall_9_0; }
		
		//","
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }
		
		//function=("sum" | "diff" | "value" | "variance")
		public Assignment getFunctionAssignment_11() { return cFunctionAssignment_11; }
		
		//("sum" | "diff" | "value" | "variance")
		public Alternatives getFunctionAlternatives_11_0() { return cFunctionAlternatives_11_0; }
		
		//"sum"
		public Keyword getFunctionSumKeyword_11_0_0() { return cFunctionSumKeyword_11_0_0; }
		
		//"diff"
		public Keyword getFunctionDiffKeyword_11_0_1() { return cFunctionDiffKeyword_11_0_1; }
		
		//"value"
		public Keyword getFunctionValueKeyword_11_0_2() { return cFunctionValueKeyword_11_0_2; }
		
		//"variance"
		public Keyword getFunctionVarianceKeyword_11_0_3() { return cFunctionVarianceKeyword_11_0_3; }
		
		//op=("<" | ">" | "=")
		public Assignment getOpAssignment_12() { return cOpAssignment_12; }
		
		//("<" | ">" | "=")
		public Alternatives getOpAlternatives_12_0() { return cOpAlternatives_12_0; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_12_0_0() { return cOpLessThanSignKeyword_12_0_0; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_12_0_1() { return cOpGreaterThanSignKeyword_12_0_1; }
		
		//"="
		public Keyword getOpEqualsSignKeyword_12_0_2() { return cOpEqualsSignKeyword_12_0_2; }
		
		//test=DOUBLE
		public Assignment getTestAssignment_13() { return cTestAssignment_13; }
		
		//DOUBLE
		public RuleCall getTestDOUBLETerminalRuleCall_13_0() { return cTestDOUBLETerminalRuleCall_13_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_14() { return cRightParenthesisKeyword_14; }
	}
	public class XSlrAvgExpTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XSlrAvgExpType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXSlrAvgExpTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSlrAvgKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cVarVarTypeCrossReference_3_0 = (CrossReference)cVarAssignment_3.eContents().get(0);
		private final RuleCall cVarVarTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cVarVarTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStartValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStartValueXExpressionTypeParserRuleCall_5_0 = (RuleCall)cStartValueAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cEndValueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEndValueXExpressionTypeParserRuleCall_7_0 = (RuleCall)cEndValueAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//XSlrAvgExpType:
		//	{XSlrAvgExpType} 'slrAvg' '(' var=[VarType] ',' startValue=XExpressionType "," endValue=XExpressionType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{XSlrAvgExpType} 'slrAvg' '(' var=[VarType] ',' startValue=XExpressionType "," endValue=XExpressionType ')'
		public Group getGroup() { return cGroup; }
		
		//{XSlrAvgExpType}
		public Action getXSlrAvgExpTypeAction_0() { return cXSlrAvgExpTypeAction_0; }
		
		//'slrAvg'
		public Keyword getSlrAvgKeyword_1() { return cSlrAvgKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//var=[VarType]
		public Assignment getVarAssignment_3() { return cVarAssignment_3; }
		
		//[VarType]
		public CrossReference getVarVarTypeCrossReference_3_0() { return cVarVarTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getVarVarTypeIDTerminalRuleCall_3_0_1() { return cVarVarTypeIDTerminalRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//startValue=XExpressionType
		public Assignment getStartValueAssignment_5() { return cStartValueAssignment_5; }
		
		//XExpressionType
		public RuleCall getStartValueXExpressionTypeParserRuleCall_5_0() { return cStartValueXExpressionTypeParserRuleCall_5_0; }
		
		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//endValue=XExpressionType
		public Assignment getEndValueAssignment_7() { return cEndValueAssignment_7; }
		
		//XExpressionType
		public RuleCall getEndValueXExpressionTypeParserRuleCall_7_0() { return cEndValueXExpressionTypeParserRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class XLastSignalTriggerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XLastSignalTriggerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXLastSignalTriggerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLstKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSignalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSignalSignalTypeCrossReference_3_0 = (CrossReference)cSignalAssignment_3.eContents().get(0);
		private final RuleCall cSignalSignalTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cSignalSignalTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//XLastSignalTriggerType:
		//	{XLastSignalTriggerType} 'lst' '(' signal=[SignalType] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{XLastSignalTriggerType} 'lst' '(' signal=[SignalType] ')'
		public Group getGroup() { return cGroup; }
		
		//{XLastSignalTriggerType}
		public Action getXLastSignalTriggerTypeAction_0() { return cXLastSignalTriggerTypeAction_0; }
		
		//'lst'
		public Keyword getLstKeyword_1() { return cLstKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//signal=[SignalType]
		public Assignment getSignalAssignment_3() { return cSignalAssignment_3; }
		
		//[SignalType]
		public CrossReference getSignalSignalTypeCrossReference_3_0() { return cSignalSignalTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getSignalSignalTypeIDTerminalRuleCall_3_0_1() { return cSignalSignalTypeIDTerminalRuleCall_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class XSignalTriggerCountTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XSignalTriggerCountType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXSignalTriggerCountTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStcKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSignalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSignalSignalTypeCrossReference_3_0 = (CrossReference)cSignalAssignment_3.eContents().get(0);
		private final RuleCall cSignalSignalTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cSignalSignalTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLookbackAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLookbackINTTerminalRuleCall_5_0 = (RuleCall)cLookbackAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XSignalTriggerCountType:
		//	{XSignalTriggerCountType} 'stc' '(' signal=[SignalType] "," lookback=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{XSignalTriggerCountType} 'stc' '(' signal=[SignalType] "," lookback=INT ')'
		public Group getGroup() { return cGroup; }
		
		//{XSignalTriggerCountType}
		public Action getXSignalTriggerCountTypeAction_0() { return cXSignalTriggerCountTypeAction_0; }
		
		//'stc'
		public Keyword getStcKeyword_1() { return cStcKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//signal=[SignalType]
		public Assignment getSignalAssignment_3() { return cSignalAssignment_3; }
		
		//[SignalType]
		public CrossReference getSignalSignalTypeCrossReference_3_0() { return cSignalSignalTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getSignalSignalTypeIDTerminalRuleCall_3_0_1() { return cSignalSignalTypeIDTerminalRuleCall_3_0_1; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//lookback=INT
		public Assignment getLookbackAssignment_5() { return cLookbackAssignment_5; }
		
		//INT
		public RuleCall getLookbackINTTerminalRuleCall_5_0() { return cLookbackINTTerminalRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class XVarianceAverageTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XVarianceAverageType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXVarianceAverageTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarAvgKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetVarTypeCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetVarTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetVarTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCompareAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cCompareVarTypeCrossReference_5_0 = (CrossReference)cCompareAssignment_5.eContents().get(0);
		private final RuleCall cCompareVarTypeIDTerminalRuleCall_5_0_1 = (RuleCall)cCompareVarTypeCrossReference_5_0.eContents().get(1);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStartAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStartXExpressionTypeParserRuleCall_7_0 = (RuleCall)cStartAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cEndAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cEndXExpressionTypeParserRuleCall_9_0 = (RuleCall)cEndAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//XVarianceAverageType:
		//	{XVarianceAverageType} 'varAvg' '(' target=[VarType] ',' compare=[VarType] ',' start=XExpressionType ","
		//	end=XExpressionType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{XVarianceAverageType} 'varAvg' '(' target=[VarType] ',' compare=[VarType] ',' start=XExpressionType ","
		//end=XExpressionType ')'
		public Group getGroup() { return cGroup; }
		
		//{XVarianceAverageType}
		public Action getXVarianceAverageTypeAction_0() { return cXVarianceAverageTypeAction_0; }
		
		//'varAvg'
		public Keyword getVarAvgKeyword_1() { return cVarAvgKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//target=[VarType]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//[VarType]
		public CrossReference getTargetVarTypeCrossReference_3_0() { return cTargetVarTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getTargetVarTypeIDTerminalRuleCall_3_0_1() { return cTargetVarTypeIDTerminalRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//compare=[VarType]
		public Assignment getCompareAssignment_5() { return cCompareAssignment_5; }
		
		//[VarType]
		public CrossReference getCompareVarTypeCrossReference_5_0() { return cCompareVarTypeCrossReference_5_0; }
		
		//ID
		public RuleCall getCompareVarTypeIDTerminalRuleCall_5_0_1() { return cCompareVarTypeIDTerminalRuleCall_5_0_1; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//start=XExpressionType
		public Assignment getStartAssignment_7() { return cStartAssignment_7; }
		
		//XExpressionType
		public RuleCall getStartXExpressionTypeParserRuleCall_7_0() { return cStartXExpressionTypeParserRuleCall_7_0; }
		
		//","
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//end=XExpressionType
		public Assignment getEndAssignment_9() { return cEndAssignment_9; }
		
		//XExpressionType
		public RuleCall getEndXExpressionTypeParserRuleCall_9_0() { return cEndXExpressionTypeParserRuleCall_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
	}
	public class XVarianceMaxTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XVarianceMaxType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXVarianceMaxTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarMaxKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetVarTypeCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetVarTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetVarTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCompareAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cCompareVarTypeCrossReference_5_0 = (CrossReference)cCompareAssignment_5.eContents().get(0);
		private final RuleCall cCompareVarTypeIDTerminalRuleCall_5_0_1 = (RuleCall)cCompareVarTypeCrossReference_5_0.eContents().get(1);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStartAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStartXExpressionTypeParserRuleCall_7_0 = (RuleCall)cStartAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cEndAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cEndXExpressionTypeParserRuleCall_9_0 = (RuleCall)cEndAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//XVarianceMaxType:
		//	{XVarianceMaxType} 'varMax' '(' target=[VarType] ',' compare=[VarType] ',' start=XExpressionType ","
		//	end=XExpressionType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{XVarianceMaxType} 'varMax' '(' target=[VarType] ',' compare=[VarType] ',' start=XExpressionType "," end=XExpressionType
		//')'
		public Group getGroup() { return cGroup; }
		
		//{XVarianceMaxType}
		public Action getXVarianceMaxTypeAction_0() { return cXVarianceMaxTypeAction_0; }
		
		//'varMax'
		public Keyword getVarMaxKeyword_1() { return cVarMaxKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//target=[VarType]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//[VarType]
		public CrossReference getTargetVarTypeCrossReference_3_0() { return cTargetVarTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getTargetVarTypeIDTerminalRuleCall_3_0_1() { return cTargetVarTypeIDTerminalRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//compare=[VarType]
		public Assignment getCompareAssignment_5() { return cCompareAssignment_5; }
		
		//[VarType]
		public CrossReference getCompareVarTypeCrossReference_5_0() { return cCompareVarTypeCrossReference_5_0; }
		
		//ID
		public RuleCall getCompareVarTypeIDTerminalRuleCall_5_0_1() { return cCompareVarTypeIDTerminalRuleCall_5_0_1; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//start=XExpressionType
		public Assignment getStartAssignment_7() { return cStartAssignment_7; }
		
		//XExpressionType
		public RuleCall getStartXExpressionTypeParserRuleCall_7_0() { return cStartXExpressionTypeParserRuleCall_7_0; }
		
		//","
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//end=XExpressionType
		public Assignment getEndAssignment_9() { return cEndAssignment_9; }
		
		//XExpressionType
		public RuleCall getEndXExpressionTypeParserRuleCall_9_0() { return cEndXExpressionTypeParserRuleCall_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
	}
	public class XRocExpTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XRocExpType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXRocExpTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRoxKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValue1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValue1XExpressionTypeParserRuleCall_3_0 = (RuleCall)cValue1Assignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValue2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValue2XExpressionTypeParserRuleCall_5_0 = (RuleCall)cValue2Assignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XRocExpType:
		//	{XRocExpType} 'rox' '(' value1=XExpressionType "," value2=XExpressionType ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{XRocExpType} 'rox' '(' value1=XExpressionType "," value2=XExpressionType ')'
		public Group getGroup() { return cGroup; }
		
		//{XRocExpType}
		public Action getXRocExpTypeAction_0() { return cXRocExpTypeAction_0; }
		
		//'rox'
		public Keyword getRoxKeyword_1() { return cRoxKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//value1=XExpressionType
		public Assignment getValue1Assignment_3() { return cValue1Assignment_3; }
		
		//XExpressionType
		public RuleCall getValue1XExpressionTypeParserRuleCall_3_0() { return cValue1XExpressionTypeParserRuleCall_3_0; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//value2=XExpressionType
		public Assignment getValue2Assignment_5() { return cValue2Assignment_5; }
		
		//XExpressionType
		public RuleCall getValue2XExpressionTypeParserRuleCall_5_0() { return cValue2XExpressionTypeParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class XTimeRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XTimeRange");
		private final RuleCall cXTimeRangeRelativeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///*******************************
		// * XClass End
		// *******************************/ /*******************************
		// * XValue Start
		// *******************************/ XTimeRange:
		//	XTimeRangeRelative;
		@Override public ParserRule getRule() { return rule; }
		
		//XTimeRangeRelative
		public RuleCall getXTimeRangeRelativeParserRuleCall() { return cXTimeRangeRelativeParserRuleCall; }
	}
	public class XTimeRangeRelativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XTimeRangeRelative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXTimeRangeRelativeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRelativeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUnitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUnitStreamTimeUnitEnumRuleCall_3_0 = (RuleCall)cUnitAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueINTTerminalRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XTimeRangeRelative:
		//	{XTimeRangeRelative} 'relative' '(' unit=StreamTimeUnit ',' value=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{XTimeRangeRelative} 'relative' '(' unit=StreamTimeUnit ',' value=INT ')'
		public Group getGroup() { return cGroup; }
		
		//{XTimeRangeRelative}
		public Action getXTimeRangeRelativeAction_0() { return cXTimeRangeRelativeAction_0; }
		
		//'relative'
		public Keyword getRelativeKeyword_1() { return cRelativeKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//unit=StreamTimeUnit
		public Assignment getUnitAssignment_3() { return cUnitAssignment_3; }
		
		//StreamTimeUnit
		public RuleCall getUnitStreamTimeUnitEnumRuleCall_3_0() { return cUnitStreamTimeUnitEnumRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//value=INT
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_5_0() { return cValueINTTerminalRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class XValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXValueSessionVarValueTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXValueSessionVarAggTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXValueSessionSignalCountTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXValueHistoricalSignalCountTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//XValueType:
		//	XValueSessionVarValueType | XValueSessionVarAggType | XValueSessionSignalCountType | XValueHistoricalSignalCountType;
		@Override public ParserRule getRule() { return rule; }
		
		//XValueSessionVarValueType | XValueSessionVarAggType | XValueSessionSignalCountType | XValueHistoricalSignalCountType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XValueSessionVarValueType
		public RuleCall getXValueSessionVarValueTypeParserRuleCall_0() { return cXValueSessionVarValueTypeParserRuleCall_0; }
		
		//XValueSessionVarAggType
		public RuleCall getXValueSessionVarAggTypeParserRuleCall_1() { return cXValueSessionVarAggTypeParserRuleCall_1; }
		
		//XValueSessionSignalCountType
		public RuleCall getXValueSessionSignalCountTypeParserRuleCall_2() { return cXValueSessionSignalCountTypeParserRuleCall_2; }
		
		//XValueHistoricalSignalCountType
		public RuleCall getXValueHistoricalSignalCountTypeParserRuleCall_3() { return cXValueHistoricalSignalCountTypeParserRuleCall_3; }
	}
	public class XValueSessionVarValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XValueSessionVarValueType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXValueSessionVarValueTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSessionVarValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cVarVarTypeCrossReference_3_0 = (CrossReference)cVarAssignment_3.eContents().get(0);
		private final RuleCall cVarVarTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cVarVarTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cIndexAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cIndexINTTerminalRuleCall_5_0 = (RuleCall)cIndexAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XValueSessionVarValueType:
		//	{XValueSessionVarValueType} 'sessionVarValue' '(' var=[VarType] ',' index=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{XValueSessionVarValueType} 'sessionVarValue' '(' var=[VarType] ',' index=INT ')'
		public Group getGroup() { return cGroup; }
		
		//{XValueSessionVarValueType}
		public Action getXValueSessionVarValueTypeAction_0() { return cXValueSessionVarValueTypeAction_0; }
		
		//'sessionVarValue'
		public Keyword getSessionVarValueKeyword_1() { return cSessionVarValueKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//var=[VarType]
		public Assignment getVarAssignment_3() { return cVarAssignment_3; }
		
		//[VarType]
		public CrossReference getVarVarTypeCrossReference_3_0() { return cVarVarTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getVarVarTypeIDTerminalRuleCall_3_0_1() { return cVarVarTypeIDTerminalRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//index=INT
		public Assignment getIndexAssignment_5() { return cIndexAssignment_5; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_5_0() { return cIndexINTTerminalRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class XValueSessionVarAggTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XValueSessionVarAggType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXValueSessionVarAggTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSessionVarAggKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cVarVarTypeCrossReference_3_0 = (CrossReference)cVarAssignment_3.eContents().get(0);
		private final RuleCall cVarVarTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cVarVarTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFunctionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFunctionXValueVarSessionAggFunctionEnumRuleCall_5_0 = (RuleCall)cFunctionAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRangeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRangeXTimeRangeParserRuleCall_7_0 = (RuleCall)cRangeAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//XValueSessionVarAggType:
		//	{XValueSessionVarAggType} 'sessionVarAgg' '(' var=[VarType] ',' function=XValueVarSessionAggFunction ','
		//	range=XTimeRange ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{XValueSessionVarAggType} 'sessionVarAgg' '(' var=[VarType] ',' function=XValueVarSessionAggFunction ','
		//range=XTimeRange ')'
		public Group getGroup() { return cGroup; }
		
		//{XValueSessionVarAggType}
		public Action getXValueSessionVarAggTypeAction_0() { return cXValueSessionVarAggTypeAction_0; }
		
		//'sessionVarAgg'
		public Keyword getSessionVarAggKeyword_1() { return cSessionVarAggKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//var=[VarType]
		public Assignment getVarAssignment_3() { return cVarAssignment_3; }
		
		//[VarType]
		public CrossReference getVarVarTypeCrossReference_3_0() { return cVarVarTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getVarVarTypeIDTerminalRuleCall_3_0_1() { return cVarVarTypeIDTerminalRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//function=XValueVarSessionAggFunction
		public Assignment getFunctionAssignment_5() { return cFunctionAssignment_5; }
		
		//XValueVarSessionAggFunction
		public RuleCall getFunctionXValueVarSessionAggFunctionEnumRuleCall_5_0() { return cFunctionXValueVarSessionAggFunctionEnumRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//range=XTimeRange
		public Assignment getRangeAssignment_7() { return cRangeAssignment_7; }
		
		//XTimeRange
		public RuleCall getRangeXTimeRangeParserRuleCall_7_0() { return cRangeXTimeRangeParserRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class XValueSessionSignalCountTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XValueSessionSignalCountType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXValueSessionSignalCountTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSessionSignalCountKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSignalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSignalSignalTypeCrossReference_3_0 = (CrossReference)cSignalAssignment_3.eContents().get(0);
		private final RuleCall cSignalSignalTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cSignalSignalTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTimeRangeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTimeRangeXTimeRangeParserRuleCall_5_0 = (RuleCall)cTimeRangeAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cValueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cValueINTTerminalRuleCall_7_0 = (RuleCall)cValueAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//XValueSessionSignalCountType:
		//	{XValueSessionSignalCountType} 'sessionSignalCount' '(' signal=[SignalType] ','
		//	timeRange=XTimeRange ','
		//	value=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{XValueSessionSignalCountType} 'sessionSignalCount' '(' signal=[SignalType] ',' timeRange=XTimeRange ',' value=INT ')'
		public Group getGroup() { return cGroup; }
		
		//{XValueSessionSignalCountType}
		public Action getXValueSessionSignalCountTypeAction_0() { return cXValueSessionSignalCountTypeAction_0; }
		
		//'sessionSignalCount'
		public Keyword getSessionSignalCountKeyword_1() { return cSessionSignalCountKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//signal=[SignalType]
		public Assignment getSignalAssignment_3() { return cSignalAssignment_3; }
		
		//[SignalType]
		public CrossReference getSignalSignalTypeCrossReference_3_0() { return cSignalSignalTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getSignalSignalTypeIDTerminalRuleCall_3_0_1() { return cSignalSignalTypeIDTerminalRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//timeRange=XTimeRange
		public Assignment getTimeRangeAssignment_5() { return cTimeRangeAssignment_5; }
		
		//XTimeRange
		public RuleCall getTimeRangeXTimeRangeParserRuleCall_5_0() { return cTimeRangeXTimeRangeParserRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//value=INT
		public Assignment getValueAssignment_7() { return cValueAssignment_7; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_7_0() { return cValueINTTerminalRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class XValueHistoricalVarAggTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XValueHistoricalVarAggType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHistoricalVarAggKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVarVarTypeCrossReference_2_0 = (CrossReference)cVarAssignment_2.eContents().get(0);
		private final RuleCall cVarVarTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cVarVarTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFunctionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFunctionXValueVarHistoricalAggFunctionEnumRuleCall_4_0 = (RuleCall)cFunctionAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDaysAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDaysINTTerminalRuleCall_6_0 = (RuleCall)cDaysAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//XValueHistoricalVarAggType:
		//	'historicalVarAgg' '(' var=[VarType] ',' function=XValueVarHistoricalAggFunction ',' days=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'historicalVarAgg' '(' var=[VarType] ',' function=XValueVarHistoricalAggFunction ',' days=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'historicalVarAgg'
		public Keyword getHistoricalVarAggKeyword_0() { return cHistoricalVarAggKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//var=[VarType]
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//[VarType]
		public CrossReference getVarVarTypeCrossReference_2_0() { return cVarVarTypeCrossReference_2_0; }
		
		//ID
		public RuleCall getVarVarTypeIDTerminalRuleCall_2_0_1() { return cVarVarTypeIDTerminalRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//function=XValueVarHistoricalAggFunction
		public Assignment getFunctionAssignment_4() { return cFunctionAssignment_4; }
		
		//XValueVarHistoricalAggFunction
		public RuleCall getFunctionXValueVarHistoricalAggFunctionEnumRuleCall_4_0() { return cFunctionXValueVarHistoricalAggFunctionEnumRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//days=INT
		public Assignment getDaysAssignment_6() { return cDaysAssignment_6; }
		
		//INT
		public RuleCall getDaysINTTerminalRuleCall_6_0() { return cDaysINTTerminalRuleCall_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class XValueHistoricalSignalCountTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XValueHistoricalSignalCountType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXValueHistoricalSignalCountTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHistoricalSignalCountKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSignalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSignalSignalTypeCrossReference_3_0 = (CrossReference)cSignalAssignment_3.eContents().get(0);
		private final RuleCall cSignalSignalTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cSignalSignalTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDaysAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDaysINTTerminalRuleCall_5_0 = (RuleCall)cDaysAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XValueHistoricalSignalCountType:
		//	{XValueHistoricalSignalCountType}
		//	'historicalSignalCount' '(' signal=[SignalType] ',' days=INT ')'
		//	// value
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{XValueHistoricalSignalCountType} 'historicalSignalCount' '(' signal=[SignalType] ',' days=INT ')'
		public Group getGroup() { return cGroup; }
		
		//{XValueHistoricalSignalCountType}
		public Action getXValueHistoricalSignalCountTypeAction_0() { return cXValueHistoricalSignalCountTypeAction_0; }
		
		//'historicalSignalCount'
		public Keyword getHistoricalSignalCountKeyword_1() { return cHistoricalSignalCountKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//signal=[SignalType]
		public Assignment getSignalAssignment_3() { return cSignalAssignment_3; }
		
		//[SignalType]
		public CrossReference getSignalSignalTypeCrossReference_3_0() { return cSignalSignalTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getSignalSignalTypeIDTerminalRuleCall_3_0_1() { return cSignalSignalTypeIDTerminalRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//days=INT
		public Assignment getDaysAssignment_5() { return cDaysAssignment_5; }
		
		//INT
		public RuleCall getDaysINTTerminalRuleCall_5_0() { return cDaysINTTerminalRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class XQueryTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XQueryType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFiltersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFiltersXQueryFilterTypeParserRuleCall_5_0 = (RuleCall)cFiltersAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XQueryType:
		//	'query' '(' name=ID ')' '{'
		//	filters+=XQueryFilterType*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'query' '(' name=ID ')' '{' filters+=XQueryFilterType* '}'
		public Group getGroup() { return cGroup; }
		
		//'query'
		public Keyword getQueryKeyword_0() { return cQueryKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//filters+=XQueryFilterType*
		public Assignment getFiltersAssignment_5() { return cFiltersAssignment_5; }
		
		//XQueryFilterType
		public RuleCall getFiltersXQueryFilterTypeParserRuleCall_5_0() { return cFiltersXQueryFilterTypeParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class XQueryFilterTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XQueryFilterType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXQueryFilterValueCompareTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXQueryFilterValueTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XQueryFilterType:
		//	XQueryFilterValueCompareType | XQueryFilterValueType;
		@Override public ParserRule getRule() { return rule; }
		
		//XQueryFilterValueCompareType | XQueryFilterValueType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XQueryFilterValueCompareType
		public RuleCall getXQueryFilterValueCompareTypeParserRuleCall_0() { return cXQueryFilterValueCompareTypeParserRuleCall_0; }
		
		//XQueryFilterValueType
		public RuleCall getXQueryFilterValueTypeParserRuleCall_1() { return cXQueryFilterValueTypeParserRuleCall_1; }
	}
	public class XQueryFilterValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XQueryFilterValueType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXQueryFilterValueTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cValueFilterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueXValueTypeParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperatorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOperatorXStreamOperatorEnumRuleCall_5_0 = (RuleCall)cOperatorAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cCriteriaAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cCriteriaSTRINGTerminalRuleCall_7_0 = (RuleCall)cCriteriaAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//XQueryFilterValueType:
		//	{XQueryFilterValueType} 'valueFilter' '(' value=XValueType ',' operator=XStreamOperator ',' criteria=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{XQueryFilterValueType} 'valueFilter' '(' value=XValueType ',' operator=XStreamOperator ',' criteria=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//{XQueryFilterValueType}
		public Action getXQueryFilterValueTypeAction_0() { return cXQueryFilterValueTypeAction_0; }
		
		//'valueFilter'
		public Keyword getValueFilterKeyword_1() { return cValueFilterKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//value=XValueType
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//XValueType
		public RuleCall getValueXValueTypeParserRuleCall_3_0() { return cValueXValueTypeParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//operator=XStreamOperator
		public Assignment getOperatorAssignment_5() { return cOperatorAssignment_5; }
		
		//XStreamOperator
		public RuleCall getOperatorXStreamOperatorEnumRuleCall_5_0() { return cOperatorXStreamOperatorEnumRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//criteria=STRING
		public Assignment getCriteriaAssignment_7() { return cCriteriaAssignment_7; }
		
		//STRING
		public RuleCall getCriteriaSTRINGTerminalRuleCall_7_0() { return cCriteriaSTRINGTerminalRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class XQueryFilterValueCompareTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XQueryFilterValueCompareType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValueCompareFilterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValue1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValue1XValueTypeParserRuleCall_2_0 = (RuleCall)cValue1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValue2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValue2XValueTypeParserRuleCall_4_0 = (RuleCall)cValue2Assignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFunctionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFunctionXQueryValueCompareFunctionEnumRuleCall_6_0 = (RuleCall)cFunctionAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOperatorAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOperatorXStreamOperatorEnumRuleCall_8_0 = (RuleCall)cOperatorAssignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cCriteriaAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cCriteriaSTRINGTerminalRuleCall_10_0 = (RuleCall)cCriteriaAssignment_10.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//XQueryFilterValueCompareType:
		//	'valueCompareFilter' '(' value1=XValueType ',' value2=XValueType ',' function=XQueryValueCompareFunction ','
		//	operator=XStreamOperator ',' criteria=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'valueCompareFilter' '(' value1=XValueType ',' value2=XValueType ',' function=XQueryValueCompareFunction ','
		//operator=XStreamOperator ',' criteria=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'valueCompareFilter'
		public Keyword getValueCompareFilterKeyword_0() { return cValueCompareFilterKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//value1=XValueType
		public Assignment getValue1Assignment_2() { return cValue1Assignment_2; }
		
		//XValueType
		public RuleCall getValue1XValueTypeParserRuleCall_2_0() { return cValue1XValueTypeParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//value2=XValueType
		public Assignment getValue2Assignment_4() { return cValue2Assignment_4; }
		
		//XValueType
		public RuleCall getValue2XValueTypeParserRuleCall_4_0() { return cValue2XValueTypeParserRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//function=XQueryValueCompareFunction
		public Assignment getFunctionAssignment_6() { return cFunctionAssignment_6; }
		
		//XQueryValueCompareFunction
		public RuleCall getFunctionXQueryValueCompareFunctionEnumRuleCall_6_0() { return cFunctionXQueryValueCompareFunctionEnumRuleCall_6_0; }
		
		//','
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//operator=XStreamOperator
		public Assignment getOperatorAssignment_8() { return cOperatorAssignment_8; }
		
		//XStreamOperator
		public RuleCall getOperatorXStreamOperatorEnumRuleCall_8_0() { return cOperatorXStreamOperatorEnumRuleCall_8_0; }
		
		//','
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }
		
		//criteria=STRING
		public Assignment getCriteriaAssignment_10() { return cCriteriaAssignment_10; }
		
		//STRING
		public RuleCall getCriteriaSTRINGTerminalRuleCall_10_0() { return cCriteriaSTRINGTerminalRuleCall_10_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_11() { return cRightParenthesisKeyword_11; }
	}
	
	public class StreamTimeUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.StreamTimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSecondEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSecondSECKeyword_0_0 = (Keyword)cSecondEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMinuteEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMinuteMINKeyword_1_0 = (Keyword)cMinuteEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHourEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHourHOURKeyword_2_0 = (Keyword)cHourEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum StreamTimeUnit:
		//	second="SEC" | minute="MIN" | hour="HOUR";
		public EnumRule getRule() { return rule; }
		
		//second="SEC" | minute="MIN" | hour="HOUR"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//second="SEC"
		public EnumLiteralDeclaration getSecondEnumLiteralDeclaration_0() { return cSecondEnumLiteralDeclaration_0; }
		
		//"SEC"
		public Keyword getSecondSECKeyword_0_0() { return cSecondSECKeyword_0_0; }
		
		//minute="MIN"
		public EnumLiteralDeclaration getMinuteEnumLiteralDeclaration_1() { return cMinuteEnumLiteralDeclaration_1; }
		
		//"MIN"
		public Keyword getMinuteMINKeyword_1_0() { return cMinuteMINKeyword_1_0; }
		
		//hour="HOUR"
		public EnumLiteralDeclaration getHourEnumLiteralDeclaration_2() { return cHourEnumLiteralDeclaration_2; }
		
		//"HOUR"
		public Keyword getHourHOURKeyword_2_0() { return cHourHOURKeyword_2_0; }
	}
	public class DataTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTRSTRKeyword_0_0 = (Keyword)cSTREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTINTKeyword_1_0 = (Keyword)cINTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBOOlEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBOOlBOOlKeyword_2_0 = (Keyword)cBOOlEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTTKeyword_3_0 = (Keyword)cTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDTDTKeyword_4_0 = (Keyword)cDTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDATEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDATEDATEKeyword_5_0 = (Keyword)cDATEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDUBEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDUBDUBKeyword_6_0 = (Keyword)cDUBEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cLONGEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cLONGLONGKeyword_7_0 = (Keyword)cLONGEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum DataType:
		//	STR | INT | BOOl | T | DT | DATE | DUB | LONG;
		public EnumRule getRule() { return rule; }
		
		//STR | INT | BOOl | T | DT | DATE | DUB | LONG
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STR
		public EnumLiteralDeclaration getSTREnumLiteralDeclaration_0() { return cSTREnumLiteralDeclaration_0; }
		
		//"STR"
		public Keyword getSTRSTRKeyword_0_0() { return cSTRSTRKeyword_0_0; }
		
		//INT
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_1() { return cINTEnumLiteralDeclaration_1; }
		
		//"INT"
		public Keyword getINTINTKeyword_1_0() { return cINTINTKeyword_1_0; }
		
		//BOOl
		public EnumLiteralDeclaration getBOOlEnumLiteralDeclaration_2() { return cBOOlEnumLiteralDeclaration_2; }
		
		//"BOOl"
		public Keyword getBOOlBOOlKeyword_2_0() { return cBOOlBOOlKeyword_2_0; }
		
		//T
		public EnumLiteralDeclaration getTEnumLiteralDeclaration_3() { return cTEnumLiteralDeclaration_3; }
		
		//"T"
		public Keyword getTTKeyword_3_0() { return cTTKeyword_3_0; }
		
		//DT
		public EnumLiteralDeclaration getDTEnumLiteralDeclaration_4() { return cDTEnumLiteralDeclaration_4; }
		
		//"DT"
		public Keyword getDTDTKeyword_4_0() { return cDTDTKeyword_4_0; }
		
		//DATE
		public EnumLiteralDeclaration getDATEEnumLiteralDeclaration_5() { return cDATEEnumLiteralDeclaration_5; }
		
		//"DATE"
		public Keyword getDATEDATEKeyword_5_0() { return cDATEDATEKeyword_5_0; }
		
		//DUB
		public EnumLiteralDeclaration getDUBEnumLiteralDeclaration_6() { return cDUBEnumLiteralDeclaration_6; }
		
		//"DUB"
		public Keyword getDUBDUBKeyword_6_0() { return cDUBDUBKeyword_6_0; }
		
		//LONG
		public EnumLiteralDeclaration getLONGEnumLiteralDeclaration_7() { return cLONGEnumLiteralDeclaration_7; }
		
		//"LONG"
		public Keyword getLONGLONGKeyword_7_0() { return cLONGLONGKeyword_7_0; }
	}
	public class XValueVarHistoricalAggFunctionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XValueVarHistoricalAggFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHighEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHighHIGHKeyword_0_0 = (Keyword)cHighEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLowEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLowLOWKeyword_1_0 = (Keyword)cLowEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum XValueVarHistoricalAggFunction:
		//	high="HIGH" | low="LOW";
		public EnumRule getRule() { return rule; }
		
		//high="HIGH" | low="LOW"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//high="HIGH"
		public EnumLiteralDeclaration getHighEnumLiteralDeclaration_0() { return cHighEnumLiteralDeclaration_0; }
		
		//"HIGH"
		public Keyword getHighHIGHKeyword_0_0() { return cHighHIGHKeyword_0_0; }
		
		//low="LOW"
		public EnumLiteralDeclaration getLowEnumLiteralDeclaration_1() { return cLowEnumLiteralDeclaration_1; }
		
		//"LOW"
		public Keyword getLowLOWKeyword_1_0() { return cLowLOWKeyword_1_0; }
	}
	public class XValueVarSessionAggFunctionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XValueVarSessionAggFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHighEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHighHIGHKeyword_0_0 = (Keyword)cHighEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLowEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLowLOWKeyword_1_0 = (Keyword)cLowEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum XValueVarSessionAggFunction:
		//	high="HIGH" | low="LOW";
		public EnumRule getRule() { return rule; }
		
		//high="HIGH" | low="LOW"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//high="HIGH"
		public EnumLiteralDeclaration getHighEnumLiteralDeclaration_0() { return cHighEnumLiteralDeclaration_0; }
		
		//"HIGH"
		public Keyword getHighHIGHKeyword_0_0() { return cHighHIGHKeyword_0_0; }
		
		//low="LOW"
		public EnumLiteralDeclaration getLowEnumLiteralDeclaration_1() { return cLowEnumLiteralDeclaration_1; }
		
		//"LOW"
		public Keyword getLowLOWKeyword_1_0() { return cLowLOWKeyword_1_0; }
	}
	public class XStreamOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XStreamOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGtEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGtGTKeyword_0_0 = (Keyword)cGtEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLtEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLtLTKeyword_1_0 = (Keyword)cLtEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEqEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEqEQKeyword_2_0 = (Keyword)cEqEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNqEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNqNEKeyword_3_0 = (Keyword)cNqEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum XStreamOperator:
		//	gt="GT" | lt="LT" | eq="EQ" | nq="NE";
		public EnumRule getRule() { return rule; }
		
		//gt="GT" | lt="LT" | eq="EQ" | nq="NE"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//gt="GT"
		public EnumLiteralDeclaration getGtEnumLiteralDeclaration_0() { return cGtEnumLiteralDeclaration_0; }
		
		//"GT"
		public Keyword getGtGTKeyword_0_0() { return cGtGTKeyword_0_0; }
		
		//lt="LT"
		public EnumLiteralDeclaration getLtEnumLiteralDeclaration_1() { return cLtEnumLiteralDeclaration_1; }
		
		//"LT"
		public Keyword getLtLTKeyword_1_0() { return cLtLTKeyword_1_0; }
		
		//eq="EQ"
		public EnumLiteralDeclaration getEqEnumLiteralDeclaration_2() { return cEqEnumLiteralDeclaration_2; }
		
		//"EQ"
		public Keyword getEqEQKeyword_2_0() { return cEqEQKeyword_2_0; }
		
		//nq="NE"
		public EnumLiteralDeclaration getNqEnumLiteralDeclaration_3() { return cNqEnumLiteralDeclaration_3; }
		
		//"NE"
		public Keyword getNqNEKeyword_3_0() { return cNqNEKeyword_3_0; }
	}
	public class XQueryValueCompareFunctionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.XQueryValueCompareFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRocEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRocROCKeyword_0_0 = (Keyword)cRocEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDiffEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDiffDIFFKeyword_1_0 = (Keyword)cDiffEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum XQueryValueCompareFunction:
		//	roc="ROC" | diff="DIFF";
		public EnumRule getRule() { return rule; }
		
		//roc="ROC" | diff="DIFF"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//roc="ROC"
		public EnumLiteralDeclaration getRocEnumLiteralDeclaration_0() { return cRocEnumLiteralDeclaration_0; }
		
		//"ROC"
		public Keyword getRocROCKeyword_0_0() { return cRocROCKeyword_0_0; }
		
		//diff="DIFF"
		public EnumLiteralDeclaration getDiffEnumLiteralDeclaration_1() { return cDiffEnumLiteralDeclaration_1; }
		
		//"DIFF"
		public Keyword getDiffDIFFKeyword_1_0() { return cDiffDIFFKeyword_1_0; }
	}
	
	private final XScriptElements pXScript;
	private final ScriptElementElements pScriptElement;
	private final CoreAbstractElementElements pCoreAbstractElement;
	private final VarTypeElements pVarType;
	private final ExpressionTypeElements pExpressionType;
	private final OrTypeElements pOrType;
	private final AndTypeElements pAndType;
	private final EqualityTypeElements pEqualityType;
	private final ComparisonTypeElements pComparisonType;
	private final PlusOrMinusTypeElements pPlusOrMinusType;
	private final MulOrDivTypeElements pMulOrDivType;
	private final PrimaryTypeElements pPrimaryType;
	private final AtomicTypeElements pAtomicType;
	private final AtomicBaseTypeElements pAtomicBaseType;
	private final TickExpressionTypeElements pTickExpressionType;
	private final VariableValueRangeTypeElements pVariableValueRangeType;
	private final VariableValueTypeElements pVariableValueType;
	private final VariableValueExpTypeElements pVariableValueExpType;
	private final SetExpressionTypeElements pSetExpressionType;
	private final SnapshotExpressionTypeElements pSnapshotExpressionType;
	private final RocExpressionTypeElements pRocExpressionType;
	private final AvgExpressionTypeElements pAvgExpressionType;
	private final SubExpressionTypeElements pSubExpressionType;
	private final SessionSignalExpressionTypeElements pSessionSignalExpressionType;
	private final StreamTimeUnitElements eStreamTimeUnit;
	private final DataTypeElements eDataType;
	private final TerminalRule tDOUBLE;
	private final SignalTypeElements pSignalType;
	private final XClassTypeElements pXClassType;
	private final XClassElementTypeElements pXClassElementType;
	private final XClassCoreElementTypeElements pXClassCoreElementType;
	private final XVarTypeElements pXVarType;
	private final XFunctionTypeElements pXFunctionType;
	private final XClassFunctionElementTypeElements pXClassFunctionElementType;
	private final XFunctionCoreElementTypeElements pXFunctionCoreElementType;
	private final XFunctionReturnTypeElements pXFunctionReturnType;
	private final XFunctionCallTypeElements pXFunctionCallType;
	private final XSignalListenerTypeElements pXSignalListenerType;
	private final XStreamVarListenerTypeElements pXStreamVarListenerType;
	private final XSignalTriggerTypeElements pXSignalTriggerType;
	private final XFunctionStartTypeElements pXFunctionStartType;
	private final XVarSetterTypeElements pXVarSetterType;
	private final XVarIncrementTypeElements pXVarIncrementType;
	private final XVarDecrementTypeElements pXVarDecrementType;
	private final XSetVarTypeElements pXSetVarType;
	private final XDebugTypeElements pXDebugType;
	private final XIfStatementTypeElements pXIfStatementType;
	private final XElseIfStatementTypeElements pXElseIfStatementType;
	private final XElseStatementTypeElements pXElseStatementType;
	private final XWhileTypeElements pXWhileType;
	private final XWhileElementTypeElements pXWhileElementType;
	private final XWhileBreakTypeElements pXWhileBreakType;
	private final XSleepTypeElements pXSleepType;
	private final XExpressionTypeElements pXExpressionType;
	private final XOrTypeElements pXOrType;
	private final XAndTypeElements pXAndType;
	private final XEqualityTypeElements pXEqualityType;
	private final XComparisonTypeElements pXComparisonType;
	private final XPlusOrMinusTypeElements pXPlusOrMinusType;
	private final XMulOrDivTypeElements pXMulOrDivType;
	private final XPrimaryTypeElements pXPrimaryType;
	private final XAtomicTypeElements pXAtomicType;
	private final XAtomicBaseTypeElements pXAtomicBaseType;
	private final XPercentChangeExpTypeElements pXPercentChangeExpType;
	private final XSubExpTypeElements pXSubExpType;
	private final XVarExpTypeElements pXVarExpType;
	private final XStreamWrapperExpTypeElements pXStreamWrapperExpType;
	private final XStreamVarValueExpTypeElements pXStreamVarValueExpType;
	private final XFunctionCallExpTypeElements pXFunctionCallExpType;
	private final XVarStreakTypeElements pXVarStreakType;
	private final XVarStreakCompareTypeElements pXVarStreakCompareType;
	private final XVarStreakValueTypeElements pXVarStreakValueType;
	private final XVarCompareStreakTypeElements pXVarCompareStreakType;
	private final XSlrAvgExpTypeElements pXSlrAvgExpType;
	private final XLastSignalTriggerTypeElements pXLastSignalTriggerType;
	private final XSignalTriggerCountTypeElements pXSignalTriggerCountType;
	private final XVarianceAverageTypeElements pXVarianceAverageType;
	private final XVarianceMaxTypeElements pXVarianceMaxType;
	private final XRocExpTypeElements pXRocExpType;
	private final XTimeRangeElements pXTimeRange;
	private final XTimeRangeRelativeElements pXTimeRangeRelative;
	private final XValueVarHistoricalAggFunctionElements eXValueVarHistoricalAggFunction;
	private final XValueVarSessionAggFunctionElements eXValueVarSessionAggFunction;
	private final XStreamOperatorElements eXStreamOperator;
	private final XValueTypeElements pXValueType;
	private final XValueSessionVarValueTypeElements pXValueSessionVarValueType;
	private final XValueSessionVarAggTypeElements pXValueSessionVarAggType;
	private final XValueSessionSignalCountTypeElements pXValueSessionSignalCountType;
	private final XValueHistoricalVarAggTypeElements pXValueHistoricalVarAggType;
	private final XValueHistoricalSignalCountTypeElements pXValueHistoricalSignalCountType;
	private final XQueryValueCompareFunctionElements eXQueryValueCompareFunction;
	private final XQueryTypeElements pXQueryType;
	private final XQueryFilterTypeElements pXQueryFilterType;
	private final XQueryFilterValueTypeElements pXQueryFilterValueType;
	private final XQueryFilterValueCompareTypeElements pXQueryFilterValueCompareType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XScriptGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pXScript = new XScriptElements();
		this.pScriptElement = new ScriptElementElements();
		this.pCoreAbstractElement = new CoreAbstractElementElements();
		this.pVarType = new VarTypeElements();
		this.pExpressionType = new ExpressionTypeElements();
		this.pOrType = new OrTypeElements();
		this.pAndType = new AndTypeElements();
		this.pEqualityType = new EqualityTypeElements();
		this.pComparisonType = new ComparisonTypeElements();
		this.pPlusOrMinusType = new PlusOrMinusTypeElements();
		this.pMulOrDivType = new MulOrDivTypeElements();
		this.pPrimaryType = new PrimaryTypeElements();
		this.pAtomicType = new AtomicTypeElements();
		this.pAtomicBaseType = new AtomicBaseTypeElements();
		this.pTickExpressionType = new TickExpressionTypeElements();
		this.pVariableValueRangeType = new VariableValueRangeTypeElements();
		this.pVariableValueType = new VariableValueTypeElements();
		this.pVariableValueExpType = new VariableValueExpTypeElements();
		this.pSetExpressionType = new SetExpressionTypeElements();
		this.pSnapshotExpressionType = new SnapshotExpressionTypeElements();
		this.pRocExpressionType = new RocExpressionTypeElements();
		this.pAvgExpressionType = new AvgExpressionTypeElements();
		this.pSubExpressionType = new SubExpressionTypeElements();
		this.pSessionSignalExpressionType = new SessionSignalExpressionTypeElements();
		this.eStreamTimeUnit = new StreamTimeUnitElements();
		this.eDataType = new DataTypeElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.dunkware.xstream.XScript.DOUBLE");
		this.pSignalType = new SignalTypeElements();
		this.pXClassType = new XClassTypeElements();
		this.pXClassElementType = new XClassElementTypeElements();
		this.pXClassCoreElementType = new XClassCoreElementTypeElements();
		this.pXVarType = new XVarTypeElements();
		this.pXFunctionType = new XFunctionTypeElements();
		this.pXClassFunctionElementType = new XClassFunctionElementTypeElements();
		this.pXFunctionCoreElementType = new XFunctionCoreElementTypeElements();
		this.pXFunctionReturnType = new XFunctionReturnTypeElements();
		this.pXFunctionCallType = new XFunctionCallTypeElements();
		this.pXSignalListenerType = new XSignalListenerTypeElements();
		this.pXStreamVarListenerType = new XStreamVarListenerTypeElements();
		this.pXSignalTriggerType = new XSignalTriggerTypeElements();
		this.pXFunctionStartType = new XFunctionStartTypeElements();
		this.pXVarSetterType = new XVarSetterTypeElements();
		this.pXVarIncrementType = new XVarIncrementTypeElements();
		this.pXVarDecrementType = new XVarDecrementTypeElements();
		this.pXSetVarType = new XSetVarTypeElements();
		this.pXDebugType = new XDebugTypeElements();
		this.pXIfStatementType = new XIfStatementTypeElements();
		this.pXElseIfStatementType = new XElseIfStatementTypeElements();
		this.pXElseStatementType = new XElseStatementTypeElements();
		this.pXWhileType = new XWhileTypeElements();
		this.pXWhileElementType = new XWhileElementTypeElements();
		this.pXWhileBreakType = new XWhileBreakTypeElements();
		this.pXSleepType = new XSleepTypeElements();
		this.pXExpressionType = new XExpressionTypeElements();
		this.pXOrType = new XOrTypeElements();
		this.pXAndType = new XAndTypeElements();
		this.pXEqualityType = new XEqualityTypeElements();
		this.pXComparisonType = new XComparisonTypeElements();
		this.pXPlusOrMinusType = new XPlusOrMinusTypeElements();
		this.pXMulOrDivType = new XMulOrDivTypeElements();
		this.pXPrimaryType = new XPrimaryTypeElements();
		this.pXAtomicType = new XAtomicTypeElements();
		this.pXAtomicBaseType = new XAtomicBaseTypeElements();
		this.pXPercentChangeExpType = new XPercentChangeExpTypeElements();
		this.pXSubExpType = new XSubExpTypeElements();
		this.pXVarExpType = new XVarExpTypeElements();
		this.pXStreamWrapperExpType = new XStreamWrapperExpTypeElements();
		this.pXStreamVarValueExpType = new XStreamVarValueExpTypeElements();
		this.pXFunctionCallExpType = new XFunctionCallExpTypeElements();
		this.pXVarStreakType = new XVarStreakTypeElements();
		this.pXVarStreakCompareType = new XVarStreakCompareTypeElements();
		this.pXVarStreakValueType = new XVarStreakValueTypeElements();
		this.pXVarCompareStreakType = new XVarCompareStreakTypeElements();
		this.pXSlrAvgExpType = new XSlrAvgExpTypeElements();
		this.pXLastSignalTriggerType = new XLastSignalTriggerTypeElements();
		this.pXSignalTriggerCountType = new XSignalTriggerCountTypeElements();
		this.pXVarianceAverageType = new XVarianceAverageTypeElements();
		this.pXVarianceMaxType = new XVarianceMaxTypeElements();
		this.pXRocExpType = new XRocExpTypeElements();
		this.pXTimeRange = new XTimeRangeElements();
		this.pXTimeRangeRelative = new XTimeRangeRelativeElements();
		this.eXValueVarHistoricalAggFunction = new XValueVarHistoricalAggFunctionElements();
		this.eXValueVarSessionAggFunction = new XValueVarSessionAggFunctionElements();
		this.eXStreamOperator = new XStreamOperatorElements();
		this.pXValueType = new XValueTypeElements();
		this.pXValueSessionVarValueType = new XValueSessionVarValueTypeElements();
		this.pXValueSessionVarAggType = new XValueSessionVarAggTypeElements();
		this.pXValueSessionSignalCountType = new XValueSessionSignalCountTypeElements();
		this.pXValueHistoricalVarAggType = new XValueHistoricalVarAggTypeElements();
		this.pXValueHistoricalSignalCountType = new XValueHistoricalSignalCountTypeElements();
		this.eXQueryValueCompareFunction = new XQueryValueCompareFunctionElements();
		this.pXQueryType = new XQueryTypeElements();
		this.pXQueryFilterType = new XQueryFilterTypeElements();
		this.pXQueryFilterValueType = new XQueryFilterValueTypeElements();
		this.pXQueryFilterValueCompareType = new XQueryFilterValueCompareTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.dunkware.xstream.XScript".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//XScript:
	//	elements+=ScriptElement*;
	public XScriptElements getXScriptAccess() {
		return pXScript;
	}
	
	public ParserRule getXScriptRule() {
		return getXScriptAccess().getRule();
	}
	
	//ScriptElement:
	//	CoreAbstractElement;
	public ScriptElementElements getScriptElementAccess() {
		return pScriptElement;
	}
	
	public ParserRule getScriptElementRule() {
		return getScriptElementAccess().getRule();
	}
	
	//CoreAbstractElement:
	//	VarType | XClassType | SignalType | XQueryType;
	public CoreAbstractElementElements getCoreAbstractElementAccess() {
		return pCoreAbstractElement;
	}
	
	public ParserRule getCoreAbstractElementRule() {
		return getCoreAbstractElementAccess().getRule();
	}
	
	//VarType:
	//	"svar" name=ID '(' code=INT ',' type=DataType ')' '=' expression=ExpressionType ';';
	public VarTypeElements getVarTypeAccess() {
		return pVarType;
	}
	
	public ParserRule getVarTypeRule() {
		return getVarTypeAccess().getRule();
	}
	
	//ExpressionType:
	//	OrType;
	public ExpressionTypeElements getExpressionTypeAccess() {
		return pExpressionType;
	}
	
	public ParserRule getExpressionTypeRule() {
		return getExpressionTypeAccess().getRule();
	}
	
	//OrType ExpressionType:
	//	AndType ({OrType.left=current} "||" right=AndType)*;
	public OrTypeElements getOrTypeAccess() {
		return pOrType;
	}
	
	public ParserRule getOrTypeRule() {
		return getOrTypeAccess().getRule();
	}
	
	//AndType ExpressionType:
	//	EqualityType ({AndType.left=current} "&&" right=EqualityType)*;
	public AndTypeElements getAndTypeAccess() {
		return pAndType;
	}
	
	public ParserRule getAndTypeRule() {
		return getAndTypeAccess().getRule();
	}
	
	//EqualityType ExpressionType:
	//	ComparisonType ({EqualityType.left=current} op=("==" | "!=") right=ComparisonType)*;
	public EqualityTypeElements getEqualityTypeAccess() {
		return pEqualityType;
	}
	
	public ParserRule getEqualityTypeRule() {
		return getEqualityTypeAccess().getRule();
	}
	
	//ComparisonType ExpressionType:
	//	PlusOrMinusType ({ComparisonType.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinusType)*;
	public ComparisonTypeElements getComparisonTypeAccess() {
		return pComparisonType;
	}
	
	public ParserRule getComparisonTypeRule() {
		return getComparisonTypeAccess().getRule();
	}
	
	//PlusOrMinusType ExpressionType:
	//	MulOrDivType (({PlusType.left=current} '+' | {MinusType.left=current} '-') right=MulOrDivType)*;
	public PlusOrMinusTypeElements getPlusOrMinusTypeAccess() {
		return pPlusOrMinusType;
	}
	
	public ParserRule getPlusOrMinusTypeRule() {
		return getPlusOrMinusTypeAccess().getRule();
	}
	
	//MulOrDivType ExpressionType:
	//	PrimaryType ({MulOrDivType.left=current} op=('*' | '/') right=PrimaryType)*;
	public MulOrDivTypeElements getMulOrDivTypeAccess() {
		return pMulOrDivType;
	}
	
	public ParserRule getMulOrDivTypeRule() {
		return getMulOrDivTypeAccess().getRule();
	}
	
	//PrimaryType ExpressionType:
	//	'(' ExpressionType ')' | {NotType} "!" expression=PrimaryType | AtomicType;
	public PrimaryTypeElements getPrimaryTypeAccess() {
		return pPrimaryType;
	}
	
	public ParserRule getPrimaryTypeRule() {
		return getPrimaryTypeAccess().getRule();
	}
	
	//AtomicType ExpressionType:
	//	AtomicBaseType;
	public AtomicTypeElements getAtomicTypeAccess() {
		return pAtomicType;
	}
	
	public ParserRule getAtomicTypeRule() {
		return getAtomicTypeAccess().getRule();
	}
	
	//AtomicBaseType ExpressionType:
	//	{DoubleConstantType} value=DOUBLE | {IntConstantType} value=INT | {StringConstantType} value=STRING |
	//	{BoolConstantType} value=('true' | 'false') | TickExpressionType | SnapshotExpressionType | SetExpressionType |
	//	RocExpressionType | AvgExpressionType | VariableValueExpType
	//	| VariableValueRangeType | VariableValueType | SubExpressionType | SessionSignalExpressionType;
	public AtomicBaseTypeElements getAtomicBaseTypeAccess() {
		return pAtomicBaseType;
	}
	
	public ParserRule getAtomicBaseTypeRule() {
		return getAtomicBaseTypeAccess().getRule();
	}
	
	///****************************
	// * Input Expression Types 
	// ****************************/ TickExpressionType ExpressionType:
	//	{TickExpressionType} 'tick' '(' type=INT ',' field=INT ',' dataType=DataType ')';
	public TickExpressionTypeElements getTickExpressionTypeAccess() {
		return pTickExpressionType;
	}
	
	public ParserRule getTickExpressionTypeRule() {
		return getTickExpressionTypeAccess().getRule();
	}
	
	///****************************
	// * Variable Value Expression Types 
	// ****************************/ VariableValueRangeType:
	//	{VariableValueRangeType} targetVar=[VarType] '[' startIndex=INT ',' endIndex=INT ']';
	public VariableValueRangeTypeElements getVariableValueRangeTypeAccess() {
		return pVariableValueRangeType;
	}
	
	public ParserRule getVariableValueRangeTypeRule() {
		return getVariableValueRangeTypeAccess().getRule();
	}
	
	//VariableValueType:
	//	{VariableValueType} variable=[VarType] ('[' (indexInt=INT | 'exp' '(' expType=ExpressionType ')') ']');
	public VariableValueTypeElements getVariableValueTypeAccess() {
		return pVariableValueType;
	}
	
	public ParserRule getVariableValueTypeRule() {
		return getVariableValueTypeAccess().getRule();
	}
	
	//VariableValueExpType:
	//	{VariableValueExpType} 'exp' '(' expType=ExpressionType ')';
	public VariableValueExpTypeElements getVariableValueExpTypeAccess() {
		return pVariableValueExpType;
	}
	
	public ParserRule getVariableValueExpTypeRule() {
		return getVariableValueExpTypeAccess().getRule();
	}
	
	//SetExpressionType:
	//	{SetExpressionType} '{' (args+=ExpressionType (',' args+=ExpressionType)*)? '}';
	public SetExpressionTypeElements getSetExpressionTypeAccess() {
		return pSetExpressionType;
	}
	
	public ParserRule getSetExpressionTypeRule() {
		return getSetExpressionTypeAccess().getRule();
	}
	
	///**********************************
	// * Scheduled Update Expression Types 
	// *********************************/ SnapshotExpressionType:
	//	{SnapshotExpressionType} "snapshot" '(' target=ExpressionType ')' interval=INT time=StreamTimeUnit;
	public SnapshotExpressionTypeElements getSnapshotExpressionTypeAccess() {
		return pSnapshotExpressionType;
	}
	
	public ParserRule getSnapshotExpressionTypeRule() {
		return getSnapshotExpressionTypeAccess().getRule();
	}
	
	///*******************************
	// * Math Exrepssion Types 
	// *******************************/ RocExpressionType:
	//	{RocExpressionType} "roc" '(' target=ExpressionType ',' compare=ExpressionType ')';
	public RocExpressionTypeElements getRocExpressionTypeAccess() {
		return pRocExpressionType;
	}
	
	public ParserRule getRocExpressionTypeRule() {
		return getRocExpressionTypeAccess().getRule();
	}
	
	//AvgExpressionType:
	//	{AvgExpressionType} "avg" '(' target=SetExpressionType ')';
	public AvgExpressionTypeElements getAvgExpressionTypeAccess() {
		return pAvgExpressionType;
	}
	
	public ParserRule getAvgExpressionTypeRule() {
		return getAvgExpressionTypeAccess().getRule();
	}
	
	//SubExpressionType:
	//	{SubExpressionType} "sub" '(' target=VariableValueType ',' compare=VariableValueType ')';
	public SubExpressionTypeElements getSubExpressionTypeAccess() {
		return pSubExpressionType;
	}
	
	public ParserRule getSubExpressionTypeRule() {
		return getSubExpressionTypeAccess().getRule();
	}
	
	///** Signal Expression Types */ SessionSignalExpressionType:
	//	{SessionSignalExpressionType} 'ssc' '(' signal=[SignalType] op=(">" | "<" | "=") count=INT 'in last' time=INT
	//	unit=StreamTimeUnit ')';
	public SessionSignalExpressionTypeElements getSessionSignalExpressionTypeAccess() {
		return pSessionSignalExpressionType;
	}
	
	public ParserRule getSessionSignalExpressionTypeRule() {
		return getSessionSignalExpressionTypeAccess().getRule();
	}
	
	//enum StreamTimeUnit:
	//	second="SEC" | minute="MIN" | hour="HOUR";
	public StreamTimeUnitElements getStreamTimeUnitAccess() {
		return eStreamTimeUnit;
	}
	
	public EnumRule getStreamTimeUnitRule() {
		return getStreamTimeUnitAccess().getRule();
	}
	
	//enum DataType:
	//	STR | INT | BOOl | T | DT | DATE | DUB | LONG;
	public DataTypeElements getDataTypeAccess() {
		return eDataType;
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	'-'? '0'..'9'+ '.' '0'..'9'+ (('e' | 'E') '-'? '0'..'9'+)?;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	///*******************************
	// * XScript Signals
	// *******************************/ SignalType:
	//	{SignalType} 'signal' name=ID '(' id=INT ')' ';';
	public SignalTypeElements getSignalTypeAccess() {
		return pSignalType;
	}
	
	public ParserRule getSignalTypeRule() {
		return getSignalTypeAccess().getRule();
	}
	
	///*******************************
	// * XClass Start
	// *******************************/ XClassType AbstractElement:
	//	{XClassType} 'class' name=ID ('(' symbolFilter=STRING ')')? '{'
	//	elements+=XClassElementType*
	//	'}';
	public XClassTypeElements getXClassTypeAccess() {
		return pXClassType;
	}
	
	public ParserRule getXClassTypeRule() {
		return getXClassTypeAccess().getRule();
	}
	
	//XClassElementType:
	//	XClassCoreElementType;
	public XClassElementTypeElements getXClassElementTypeAccess() {
		return pXClassElementType;
	}
	
	public ParserRule getXClassElementTypeRule() {
		return getXClassElementTypeAccess().getRule();
	}
	
	//XClassCoreElementType:
	//	XFunctionType | XVarType;
	public XClassCoreElementTypeElements getXClassCoreElementTypeAccess() {
		return pXClassCoreElementType;
	}
	
	public ParserRule getXClassCoreElementTypeRule() {
		return getXClassCoreElementTypeAccess().getRule();
	}
	
	///****************************
	// * Global Element Types 
	// *************************/ XVarType:
	//	{XVarType} 'var' name=ID ('=' exp=XExpressionType)? ';';
	public XVarTypeElements getXVarTypeAccess() {
		return pXVarType;
	}
	
	public ParserRule getXVarTypeRule() {
		return getXVarTypeAccess().getRule();
	}
	
	//XFunctionType:
	//	{XFunctionType} 'function' name=ID '(' params+=[XVarType]* ')' '{'
	//	elements+=XClassFunctionElementType*
	//	'}';
	public XFunctionTypeElements getXFunctionTypeAccess() {
		return pXFunctionType;
	}
	
	public ParserRule getXFunctionTypeRule() {
		return getXFunctionTypeAccess().getRule();
	}
	
	///***************************
	// * Function Element Types
	// *************************/ XClassFunctionElementType XClassElementType:
	//	XFunctionCoreElementType;
	public XClassFunctionElementTypeElements getXClassFunctionElementTypeAccess() {
		return pXClassFunctionElementType;
	}
	
	public ParserRule getXClassFunctionElementTypeRule() {
		return getXClassFunctionElementTypeAccess().getRule();
	}
	
	//XFunctionCoreElementType:
	//	XFunctionReturnType | XVarType | XIfStatementType | XSignalListenerType | XStreamVarListenerType
	//	| XFunctionStartType | XFunctionCallType | XVarSetterType | XSignalTriggerType | XVarDecrementType
	//	| XSetVarType | XVarIncrementType | XDebugType | XSleepType | XWhileType;
	public XFunctionCoreElementTypeElements getXFunctionCoreElementTypeAccess() {
		return pXFunctionCoreElementType;
	}
	
	public ParserRule getXFunctionCoreElementTypeRule() {
		return getXFunctionCoreElementTypeAccess().getRule();
	}
	
	//XFunctionReturnType:
	//	{XFunctionReturnType} 'return' returnValue=XExpressionType? ';';
	public XFunctionReturnTypeElements getXFunctionReturnTypeAccess() {
		return pXFunctionReturnType;
	}
	
	public ParserRule getXFunctionReturnTypeRule() {
		return getXFunctionReturnTypeAccess().getRule();
	}
	
	//XFunctionCallType:
	//	{XFunctionCallType} function=[XFunctionType] '(' params=STRING? ')' ';';
	public XFunctionCallTypeElements getXFunctionCallTypeAccess() {
		return pXFunctionCallType;
	}
	
	public ParserRule getXFunctionCallTypeRule() {
		return getXFunctionCallTypeAccess().getRule();
	}
	
	//XSignalListenerType:
	//	{XSignalListenerType} 'signalListener' '(' signalType=[SignalType] ',' function=[XFunctionType] ')' ';';
	public XSignalListenerTypeElements getXSignalListenerTypeAccess() {
		return pXSignalListenerType;
	}
	
	public ParserRule getXSignalListenerTypeRule() {
		return getXSignalListenerTypeAccess().getRule();
	}
	
	//XStreamVarListenerType:
	//	{XStreamVarListenerType} 'streamVarListener' '(' column=[VarType] ',' function=[XFunctionType] ')' ';';
	public XStreamVarListenerTypeElements getXStreamVarListenerTypeAccess() {
		return pXStreamVarListenerType;
	}
	
	public ParserRule getXStreamVarListenerTypeRule() {
		return getXStreamVarListenerTypeAccess().getRule();
	}
	
	//XSignalTriggerType:
	//	{XSignalTriggerType} 'signal' '(' signal=[SignalType] ')' ';';
	public XSignalTriggerTypeElements getXSignalTriggerTypeAccess() {
		return pXSignalTriggerType;
	}
	
	public ParserRule getXSignalTriggerTypeRule() {
		return getXSignalTriggerTypeAccess().getRule();
	}
	
	//XFunctionStartType:
	//	{XFunctionStartType} 'functionRunner' '(' function=[XFunctionType] ',' interval=INT time=StreamTimeUnit ')' ';';
	public XFunctionStartTypeElements getXFunctionStartTypeAccess() {
		return pXFunctionStartType;
	}
	
	public ParserRule getXFunctionStartTypeRule() {
		return getXFunctionStartTypeAccess().getRule();
	}
	
	//XVarSetterType:
	//	{XVarSetterType} var=[XVarType] '=' exp=XExpressionType ';';
	public XVarSetterTypeElements getXVarSetterTypeAccess() {
		return pXVarSetterType;
	}
	
	public ParserRule getXVarSetterTypeRule() {
		return getXVarSetterTypeAccess().getRule();
	}
	
	//XVarIncrementType:
	//	{XVarIncrementType} var=[XVarType] '++' ';';
	public XVarIncrementTypeElements getXVarIncrementTypeAccess() {
		return pXVarIncrementType;
	}
	
	public ParserRule getXVarIncrementTypeRule() {
		return getXVarIncrementTypeAccess().getRule();
	}
	
	//XVarDecrementType:
	//	{XVarDecrementType} var=[XVarType] '--' ';';
	public XVarDecrementTypeElements getXVarDecrementTypeAccess() {
		return pXVarDecrementType;
	}
	
	public ParserRule getXVarDecrementTypeRule() {
		return getXVarDecrementTypeAccess().getRule();
	}
	
	//XSetVarType:
	//	{XSetVarType} 'setStreamVar' '(' var=[VarType] ',' value=XExpressionType ')' ';';
	public XSetVarTypeElements getXSetVarTypeAccess() {
		return pXSetVarType;
	}
	
	public ParserRule getXSetVarTypeRule() {
		return getXSetVarTypeAccess().getRule();
	}
	
	//XDebugType:
	//	{XDebugType} 'debug' '(' (args+=XExpressionType (',' args+=XExpressionType)*)? ')' ';';
	public XDebugTypeElements getXDebugTypeAccess() {
		return pXDebugType;
	}
	
	public ParserRule getXDebugTypeRule() {
		return getXDebugTypeAccess().getRule();
	}
	
	//XIfStatementType:
	//	{XIfStatementType} 'if' '(' expression=XExpressionType ')' '{'
	//	elements+=XClassFunctionElementType*
	//	'}'
	//	elseIfElements+=XElseIfStatementType* elseElement=XElseStatementType?;
	public XIfStatementTypeElements getXIfStatementTypeAccess() {
		return pXIfStatementType;
	}
	
	public ParserRule getXIfStatementTypeRule() {
		return getXIfStatementTypeAccess().getRule();
	}
	
	//XElseIfStatementType:
	//	{XElseIfStatementType} ('elseif' '(' expression=XExpressionType ')' '{'
	//	elements+=XClassFunctionElementType*
	//	'}');
	public XElseIfStatementTypeElements getXElseIfStatementTypeAccess() {
		return pXElseIfStatementType;
	}
	
	public ParserRule getXElseIfStatementTypeRule() {
		return getXElseIfStatementTypeAccess().getRule();
	}
	
	//XElseStatementType:
	//	{XElseStatementType} 'else' '{'
	//	elements+=XClassFunctionElementType*
	//	'}';
	public XElseStatementTypeElements getXElseStatementTypeAccess() {
		return pXElseStatementType;
	}
	
	public ParserRule getXElseStatementTypeRule() {
		return getXElseStatementTypeAccess().getRule();
	}
	
	//XWhileType:
	//	{XWhileType} 'whilst' '(' expression=XExpressionType ')' '{'
	//	elements+=XWhileElementType*
	//	'}';
	public XWhileTypeElements getXWhileTypeAccess() {
		return pXWhileType;
	}
	
	public ParserRule getXWhileTypeRule() {
		return getXWhileTypeAccess().getRule();
	}
	
	//XWhileElementType XClassElementType:
	//	XWhileBreakType | XClassFunctionElementType;
	public XWhileElementTypeElements getXWhileElementTypeAccess() {
		return pXWhileElementType;
	}
	
	public ParserRule getXWhileElementTypeRule() {
		return getXWhileElementTypeAccess().getRule();
	}
	
	//XWhileBreakType:
	//	{XWhileBreakType} 'break' ';';
	public XWhileBreakTypeElements getXWhileBreakTypeAccess() {
		return pXWhileBreakType;
	}
	
	public ParserRule getXWhileBreakTypeRule() {
		return getXWhileBreakTypeAccess().getRule();
	}
	
	//XSleepType:
	//	{XSleepType} 'sleep' '(' interval=INT unit=StreamTimeUnit ')' ';';
	public XSleepTypeElements getXSleepTypeAccess() {
		return pXSleepType;
	}
	
	public ParserRule getXSleepTypeRule() {
		return getXSleepTypeAccess().getRule();
	}
	
	///*******************
	// * Core XExpression Types 
	// ********************/ XExpressionType:
	//	XOrType;
	public XExpressionTypeElements getXExpressionTypeAccess() {
		return pXExpressionType;
	}
	
	public ParserRule getXExpressionTypeRule() {
		return getXExpressionTypeAccess().getRule();
	}
	
	//XOrType XExpressionType:
	//	XAndType ({XOrType.left=current} "||" right=XAndType)*;
	public XOrTypeElements getXOrTypeAccess() {
		return pXOrType;
	}
	
	public ParserRule getXOrTypeRule() {
		return getXOrTypeAccess().getRule();
	}
	
	//XAndType XExpressionType:
	//	XEqualityType ({XAndType.left=current} "&&" right=XEqualityType)*;
	public XAndTypeElements getXAndTypeAccess() {
		return pXAndType;
	}
	
	public ParserRule getXAndTypeRule() {
		return getXAndTypeAccess().getRule();
	}
	
	//XEqualityType XExpressionType:
	//	XComparisonType ({XEqualityType.left=current} op=("==" | "!=") right=XComparisonType)*;
	public XEqualityTypeElements getXEqualityTypeAccess() {
		return pXEqualityType;
	}
	
	public ParserRule getXEqualityTypeRule() {
		return getXEqualityTypeAccess().getRule();
	}
	
	//XComparisonType XExpressionType:
	//	XPlusOrMinusType ({XComparisonType.left=current} op=(">=" | "<=" | ">" | "<") right=XPlusOrMinusType)*;
	public XComparisonTypeElements getXComparisonTypeAccess() {
		return pXComparisonType;
	}
	
	public ParserRule getXComparisonTypeRule() {
		return getXComparisonTypeAccess().getRule();
	}
	
	//XPlusOrMinusType XExpressionType:
	//	XMulOrDivType (({XPlusType.left=current} '+' | {XMinusType.left=current} '-') right=XMulOrDivType)*;
	public XPlusOrMinusTypeElements getXPlusOrMinusTypeAccess() {
		return pXPlusOrMinusType;
	}
	
	public ParserRule getXPlusOrMinusTypeRule() {
		return getXPlusOrMinusTypeAccess().getRule();
	}
	
	//XMulOrDivType XExpressionType:
	//	XPrimaryType ({XMulOrDivType.left=current} op=('*' | '/') right=XPrimaryType)*;
	public XMulOrDivTypeElements getXMulOrDivTypeAccess() {
		return pXMulOrDivType;
	}
	
	public ParserRule getXMulOrDivTypeRule() {
		return getXMulOrDivTypeAccess().getRule();
	}
	
	//XPrimaryType XExpressionType:
	//	'(' XExpressionType ')' | {XNotType} "!" expression=XPrimaryType | XAtomicType;
	public XPrimaryTypeElements getXPrimaryTypeAccess() {
		return pXPrimaryType;
	}
	
	public ParserRule getXPrimaryTypeRule() {
		return getXPrimaryTypeAccess().getRule();
	}
	
	//XAtomicType XExpressionType:
	//	XAtomicBaseType;
	public XAtomicTypeElements getXAtomicTypeAccess() {
		return pXAtomicType;
	}
	
	public ParserRule getXAtomicTypeRule() {
		return getXAtomicTypeAccess().getRule();
	}
	
	///********************************
	// * XClass Expression Types -- added to XBooleanConstantType
	// ************************************/ XAtomicBaseType XExpressionType:
	//	{XDoubleConstantType} value=DOUBLE | {XIntConstantType} value=INT | {XStringConstantType} value=STRING |
	//	{XBoolConstantType} value=('true' | 'false') | XPercentChangeExpType | XSubExpType | XVarExpType |
	//	XStreamWrapperExpType | XStreamVarValueExpType | XFunctionCallExpType | XVarStreakType | XVarCompareStreakType |
	//	XSlrAvgExpType | XLastSignalTriggerType | XSignalTriggerCountType | XVarianceAverageType | XRocExpType |
	//	XVarianceMaxType;
	public XAtomicBaseTypeElements getXAtomicBaseTypeAccess() {
		return pXAtomicBaseType;
	}
	
	public ParserRule getXAtomicBaseTypeRule() {
		return getXAtomicBaseTypeAccess().getRule();
	}
	
	//XPercentChangeExpType:
	//	{XPercentChangeExpType} 'percentChange' '(' value1=XExpressionType "," value2=XExpressionType ')';
	public XPercentChangeExpTypeElements getXPercentChangeExpTypeAccess() {
		return pXPercentChangeExpType;
	}
	
	public ParserRule getXPercentChangeExpTypeRule() {
		return getXPercentChangeExpTypeAccess().getRule();
	}
	
	//XSubExpType:
	//	{XSubExpType} 'sub' '(' value1=XExpressionType "," value2=XExpressionType ')';
	public XSubExpTypeElements getXSubExpTypeAccess() {
		return pXSubExpType;
	}
	
	public ParserRule getXSubExpTypeRule() {
		return getXSubExpTypeAccess().getRule();
	}
	
	//// Returns the value of the referenced XVar
	//XVarExpType:
	//	{XVarExpType} expVar=[XVarType];
	public XVarExpTypeElements getXVarExpTypeAccess() {
		return pXVarExpType;
	}
	
	public ParserRule getXVarExpTypeRule() {
		return getXVarExpTypeAccess().getRule();
	}
	
	//// Element for using XStream Expression type
	//XStreamWrapperExpType:
	//	{XStreamWrapperExpType} 'exp' '(' wrapperExp=ExpressionType ')';
	public XStreamWrapperExpTypeElements getXStreamWrapperExpTypeAccess() {
		return pXStreamWrapperExpType;
	}
	
	public ParserRule getXStreamWrapperExpTypeRule() {
		return getXStreamWrapperExpTypeAccess().getRule();
	}
	
	//// Element for using XClass expressions for setting the index of XStremVar to return
	//XStreamVarValueExpType:
	//	{XStreamVarValueExpType} var=[VarType] ('[' expressionValue=XExpressionType) ']';
	public XStreamVarValueExpTypeElements getXStreamVarValueExpTypeAccess() {
		return pXStreamVarValueExpType;
	}
	
	public ParserRule getXStreamVarValueExpTypeRule() {
		return getXStreamVarValueExpTypeAccess().getRule();
	}
	
	//XFunctionCallExpType:
	//	{XFunctionCallExpType} function=[XFunctionType] '(' parms=STRING? ')';
	public XFunctionCallExpTypeElements getXFunctionCallExpTypeAccess() {
		return pXFunctionCallExpType;
	}
	
	public ParserRule getXFunctionCallExpTypeRule() {
		return getXFunctionCallExpTypeAccess().getRule();
	}
	
	//XVarStreakType:
	//	{XVarStreakType} 'columnStrk' '(' var=[VarType] ',' direction=("bwd" | "fwd") ',' startIndexExp=XExpressionType ','
	//	(compare=XVarStreakCompareType | value=XVarStreakValueType) ')';
	public XVarStreakTypeElements getXVarStreakTypeAccess() {
		return pXVarStreakType;
	}
	
	public ParserRule getXVarStreakTypeRule() {
		return getXVarStreakTypeAccess().getRule();
	}
	
	//XVarStreakCompareType:
	//	{XVarStreakCompareType} function=("sum" | "diff") '(' offset=INT ')' op=("<" | ">" | "=") test=DOUBLE ')';
	public XVarStreakCompareTypeElements getXVarStreakCompareTypeAccess() {
		return pXVarStreakCompareType;
	}
	
	public ParserRule getXVarStreakCompareTypeRule() {
		return getXVarStreakCompareTypeAccess().getRule();
	}
	
	//XVarStreakValueType:
	//	{XVarStreakValueType} 'value' op=("<" | ">" | "=") test=DOUBLE;
	public XVarStreakValueTypeElements getXVarStreakValueTypeAccess() {
		return pXVarStreakValueType;
	}
	
	public ParserRule getXVarStreakValueTypeRule() {
		return getXVarStreakValueTypeAccess().getRule();
	}
	
	//XVarCompareStreakType:
	//	{XVarCompareStreakType} 'columnPairStrk' '(' targetVar=[VarType] "," compareVar=[VarType] "," direction=("bwd" |
	//	"fwd") ',' startIndexExp=XExpressionType "," function=("sum" | "diff" | "value" | "variance") op=("<" | ">" | "=")
	//	test=DOUBLE ')';
	public XVarCompareStreakTypeElements getXVarCompareStreakTypeAccess() {
		return pXVarCompareStreakType;
	}
	
	public ParserRule getXVarCompareStreakTypeRule() {
		return getXVarCompareStreakTypeAccess().getRule();
	}
	
	//XSlrAvgExpType:
	//	{XSlrAvgExpType} 'slrAvg' '(' var=[VarType] ',' startValue=XExpressionType "," endValue=XExpressionType ')';
	public XSlrAvgExpTypeElements getXSlrAvgExpTypeAccess() {
		return pXSlrAvgExpType;
	}
	
	public ParserRule getXSlrAvgExpTypeRule() {
		return getXSlrAvgExpTypeAccess().getRule();
	}
	
	//XLastSignalTriggerType:
	//	{XLastSignalTriggerType} 'lst' '(' signal=[SignalType] ')';
	public XLastSignalTriggerTypeElements getXLastSignalTriggerTypeAccess() {
		return pXLastSignalTriggerType;
	}
	
	public ParserRule getXLastSignalTriggerTypeRule() {
		return getXLastSignalTriggerTypeAccess().getRule();
	}
	
	//XSignalTriggerCountType:
	//	{XSignalTriggerCountType} 'stc' '(' signal=[SignalType] "," lookback=INT ')';
	public XSignalTriggerCountTypeElements getXSignalTriggerCountTypeAccess() {
		return pXSignalTriggerCountType;
	}
	
	public ParserRule getXSignalTriggerCountTypeRule() {
		return getXSignalTriggerCountTypeAccess().getRule();
	}
	
	//XVarianceAverageType:
	//	{XVarianceAverageType} 'varAvg' '(' target=[VarType] ',' compare=[VarType] ',' start=XExpressionType ","
	//	end=XExpressionType ')';
	public XVarianceAverageTypeElements getXVarianceAverageTypeAccess() {
		return pXVarianceAverageType;
	}
	
	public ParserRule getXVarianceAverageTypeRule() {
		return getXVarianceAverageTypeAccess().getRule();
	}
	
	//XVarianceMaxType:
	//	{XVarianceMaxType} 'varMax' '(' target=[VarType] ',' compare=[VarType] ',' start=XExpressionType ","
	//	end=XExpressionType ')';
	public XVarianceMaxTypeElements getXVarianceMaxTypeAccess() {
		return pXVarianceMaxType;
	}
	
	public ParserRule getXVarianceMaxTypeRule() {
		return getXVarianceMaxTypeAccess().getRule();
	}
	
	//XRocExpType:
	//	{XRocExpType} 'rox' '(' value1=XExpressionType "," value2=XExpressionType ')';
	public XRocExpTypeElements getXRocExpTypeAccess() {
		return pXRocExpType;
	}
	
	public ParserRule getXRocExpTypeRule() {
		return getXRocExpTypeAccess().getRule();
	}
	
	///*******************************
	// * XClass End
	// *******************************/ /*******************************
	// * XValue Start
	// *******************************/ XTimeRange:
	//	XTimeRangeRelative;
	public XTimeRangeElements getXTimeRangeAccess() {
		return pXTimeRange;
	}
	
	public ParserRule getXTimeRangeRule() {
		return getXTimeRangeAccess().getRule();
	}
	
	//XTimeRangeRelative:
	//	{XTimeRangeRelative} 'relative' '(' unit=StreamTimeUnit ',' value=INT ')';
	public XTimeRangeRelativeElements getXTimeRangeRelativeAccess() {
		return pXTimeRangeRelative;
	}
	
	public ParserRule getXTimeRangeRelativeRule() {
		return getXTimeRangeRelativeAccess().getRule();
	}
	
	//enum XValueVarHistoricalAggFunction:
	//	high="HIGH" | low="LOW";
	public XValueVarHistoricalAggFunctionElements getXValueVarHistoricalAggFunctionAccess() {
		return eXValueVarHistoricalAggFunction;
	}
	
	public EnumRule getXValueVarHistoricalAggFunctionRule() {
		return getXValueVarHistoricalAggFunctionAccess().getRule();
	}
	
	//enum XValueVarSessionAggFunction:
	//	high="HIGH" | low="LOW";
	public XValueVarSessionAggFunctionElements getXValueVarSessionAggFunctionAccess() {
		return eXValueVarSessionAggFunction;
	}
	
	public EnumRule getXValueVarSessionAggFunctionRule() {
		return getXValueVarSessionAggFunctionAccess().getRule();
	}
	
	//enum XStreamOperator:
	//	gt="GT" | lt="LT" | eq="EQ" | nq="NE";
	public XStreamOperatorElements getXStreamOperatorAccess() {
		return eXStreamOperator;
	}
	
	public EnumRule getXStreamOperatorRule() {
		return getXStreamOperatorAccess().getRule();
	}
	
	//XValueType:
	//	XValueSessionVarValueType | XValueSessionVarAggType | XValueSessionSignalCountType | XValueHistoricalSignalCountType;
	public XValueTypeElements getXValueTypeAccess() {
		return pXValueType;
	}
	
	public ParserRule getXValueTypeRule() {
		return getXValueTypeAccess().getRule();
	}
	
	//XValueSessionVarValueType:
	//	{XValueSessionVarValueType} 'sessionVarValue' '(' var=[VarType] ',' index=INT ')';
	public XValueSessionVarValueTypeElements getXValueSessionVarValueTypeAccess() {
		return pXValueSessionVarValueType;
	}
	
	public ParserRule getXValueSessionVarValueTypeRule() {
		return getXValueSessionVarValueTypeAccess().getRule();
	}
	
	//XValueSessionVarAggType:
	//	{XValueSessionVarAggType} 'sessionVarAgg' '(' var=[VarType] ',' function=XValueVarSessionAggFunction ','
	//	range=XTimeRange ')';
	public XValueSessionVarAggTypeElements getXValueSessionVarAggTypeAccess() {
		return pXValueSessionVarAggType;
	}
	
	public ParserRule getXValueSessionVarAggTypeRule() {
		return getXValueSessionVarAggTypeAccess().getRule();
	}
	
	//XValueSessionSignalCountType:
	//	{XValueSessionSignalCountType} 'sessionSignalCount' '(' signal=[SignalType] ','
	//	timeRange=XTimeRange ','
	//	value=INT ')';
	public XValueSessionSignalCountTypeElements getXValueSessionSignalCountTypeAccess() {
		return pXValueSessionSignalCountType;
	}
	
	public ParserRule getXValueSessionSignalCountTypeRule() {
		return getXValueSessionSignalCountTypeAccess().getRule();
	}
	
	//XValueHistoricalVarAggType:
	//	'historicalVarAgg' '(' var=[VarType] ',' function=XValueVarHistoricalAggFunction ',' days=INT ')';
	public XValueHistoricalVarAggTypeElements getXValueHistoricalVarAggTypeAccess() {
		return pXValueHistoricalVarAggType;
	}
	
	public ParserRule getXValueHistoricalVarAggTypeRule() {
		return getXValueHistoricalVarAggTypeAccess().getRule();
	}
	
	//XValueHistoricalSignalCountType:
	//	{XValueHistoricalSignalCountType}
	//	'historicalSignalCount' '(' signal=[SignalType] ',' days=INT ')'
	//	// value
	//;
	public XValueHistoricalSignalCountTypeElements getXValueHistoricalSignalCountTypeAccess() {
		return pXValueHistoricalSignalCountType;
	}
	
	public ParserRule getXValueHistoricalSignalCountTypeRule() {
		return getXValueHistoricalSignalCountTypeAccess().getRule();
	}
	
	//enum XQueryValueCompareFunction:
	//	roc="ROC" | diff="DIFF";
	public XQueryValueCompareFunctionElements getXQueryValueCompareFunctionAccess() {
		return eXQueryValueCompareFunction;
	}
	
	public EnumRule getXQueryValueCompareFunctionRule() {
		return getXQueryValueCompareFunctionAccess().getRule();
	}
	
	//XQueryType:
	//	'query' '(' name=ID ')' '{'
	//	filters+=XQueryFilterType*
	//	'}';
	public XQueryTypeElements getXQueryTypeAccess() {
		return pXQueryType;
	}
	
	public ParserRule getXQueryTypeRule() {
		return getXQueryTypeAccess().getRule();
	}
	
	//XQueryFilterType:
	//	XQueryFilterValueCompareType | XQueryFilterValueType;
	public XQueryFilterTypeElements getXQueryFilterTypeAccess() {
		return pXQueryFilterType;
	}
	
	public ParserRule getXQueryFilterTypeRule() {
		return getXQueryFilterTypeAccess().getRule();
	}
	
	//XQueryFilterValueType:
	//	{XQueryFilterValueType} 'valueFilter' '(' value=XValueType ',' operator=XStreamOperator ',' criteria=STRING ')';
	public XQueryFilterValueTypeElements getXQueryFilterValueTypeAccess() {
		return pXQueryFilterValueType;
	}
	
	public ParserRule getXQueryFilterValueTypeRule() {
		return getXQueryFilterValueTypeAccess().getRule();
	}
	
	//XQueryFilterValueCompareType:
	//	'valueCompareFilter' '(' value1=XValueType ',' value2=XValueType ',' function=XQueryValueCompareFunction ','
	//	operator=XStreamOperator ',' criteria=STRING ')';
	public XQueryFilterValueCompareTypeElements getXQueryFilterValueCompareTypeAccess() {
		return pXQueryFilterValueCompareType;
	}
	
	public ParserRule getXQueryFilterValueCompareTypeRule() {
		return getXQueryFilterValueCompareTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
