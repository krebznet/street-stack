/*
 * generated by Xtext 2.21.0
 */
package com.dunkware.xstream.serializer;

import com.dunkware.xstream.services.XScriptGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class XScriptSyntacticSequencer extends AbstractSyntacticSequencer {

	protected XScriptGrammarAccess grammarAccess;
	protected AbstractElementAlias match_PrimaryType_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_PrimaryType_LeftParenthesisKeyword_0_0_p;
	protected AbstractElementAlias match_XPrimaryType_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_XPrimaryType_LeftParenthesisKeyword_0_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (XScriptGrammarAccess) access;
		match_PrimaryType_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryTypeAccess().getLeftParenthesisKeyword_0_0());
		match_PrimaryType_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryTypeAccess().getLeftParenthesisKeyword_0_0());
		match_XPrimaryType_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getXPrimaryTypeAccess().getLeftParenthesisKeyword_0_0());
		match_XPrimaryType_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getXPrimaryTypeAccess().getLeftParenthesisKeyword_0_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_PrimaryType_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_PrimaryType_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryType_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_PrimaryType_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XPrimaryType_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_XPrimaryType_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XPrimaryType_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_XPrimaryType_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' expression=PrimaryType
	 *     (rule start) (ambiguity) 'avg' '(' target=SetExpressionType
	 *     (rule start) (ambiguity) 'exp' '(' expType=ExpressionType
	 *     (rule start) (ambiguity) 'roc' '(' target=ExpressionType
	 *     (rule start) (ambiguity) 'snapshot' '(' target=ExpressionType
	 *     (rule start) (ambiguity) 'ssc' '(' signal=[SignalType|ID]
	 *     (rule start) (ambiguity) 'sub' '(' target=VariableValueType
	 *     (rule start) (ambiguity) 'tick' '(' type=INT
	 *     (rule start) (ambiguity) '{' '}' (rule start)
	 *     (rule start) (ambiguity) '{' args+=ExpressionType
	 *     (rule start) (ambiguity) targetVar=[VarType|ID]
	 *     (rule start) (ambiguity) value='false'
	 *     (rule start) (ambiguity) value='true'
	 *     (rule start) (ambiguity) value=DOUBLE
	 *     (rule start) (ambiguity) value=INT
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) variable=[VarType|ID]
	 *     (rule start) (ambiguity) {AndType.left=}
	 *     (rule start) (ambiguity) {ComparisonType.left=}
	 *     (rule start) (ambiguity) {EqualityType.left=}
	 *     (rule start) (ambiguity) {MinusType.left=}
	 *     (rule start) (ambiguity) {MulOrDivType.left=}
	 *     (rule start) (ambiguity) {OrType.left=}
	 *     (rule start) (ambiguity) {PlusType.left=}
	 */
	protected void emit_PrimaryType_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {AndType.left=}
	 *     (rule start) (ambiguity) {ComparisonType.left=}
	 *     (rule start) (ambiguity) {EqualityType.left=}
	 *     (rule start) (ambiguity) {MinusType.left=}
	 *     (rule start) (ambiguity) {MulOrDivType.left=}
	 *     (rule start) (ambiguity) {OrType.left=}
	 *     (rule start) (ambiguity) {PlusType.left=}
	 */
	protected void emit_PrimaryType_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '!' expression=XPrimaryType
	 *     (rule start) (ambiguity) 'columnPairStrk' '(' targetVar=[VarType|ID]
	 *     (rule start) (ambiguity) 'columnStrk' '(' var=[VarType|ID]
	 *     (rule start) (ambiguity) 'exp' '(' wrapperExp=ExpressionType
	 *     (rule start) (ambiguity) 'lst' '(' signal=[SignalType|ID]
	 *     (rule start) (ambiguity) 'percentChange' '(' value1=XExpressionType
	 *     (rule start) (ambiguity) 'rox' '(' value1=XExpressionType
	 *     (rule start) (ambiguity) 'slrAvg' '(' var=[VarType|ID]
	 *     (rule start) (ambiguity) 'stc' '(' signal=[SignalType|ID]
	 *     (rule start) (ambiguity) 'sub' '(' value1=XExpressionType
	 *     (rule start) (ambiguity) 'varAvg' '(' target=[VarType|ID]
	 *     (rule start) (ambiguity) 'varMax' '(' target=[VarType|ID]
	 *     (rule start) (ambiguity) expVar=[XVarType|ID]
	 *     (rule start) (ambiguity) function=[XFunctionType|ID]
	 *     (rule start) (ambiguity) value='false'
	 *     (rule start) (ambiguity) value='true'
	 *     (rule start) (ambiguity) value=DOUBLE
	 *     (rule start) (ambiguity) value=INT
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) var=[VarType|ID]
	 *     (rule start) (ambiguity) {XAndType.left=}
	 *     (rule start) (ambiguity) {XComparisonType.left=}
	 *     (rule start) (ambiguity) {XEqualityType.left=}
	 *     (rule start) (ambiguity) {XMinusType.left=}
	 *     (rule start) (ambiguity) {XMulOrDivType.left=}
	 *     (rule start) (ambiguity) {XOrType.left=}
	 *     (rule start) (ambiguity) {XPlusType.left=}
	 */
	protected void emit_XPrimaryType_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {XAndType.left=}
	 *     (rule start) (ambiguity) {XComparisonType.left=}
	 *     (rule start) (ambiguity) {XEqualityType.left=}
	 *     (rule start) (ambiguity) {XMinusType.left=}
	 *     (rule start) (ambiguity) {XMulOrDivType.left=}
	 *     (rule start) (ambiguity) {XOrType.left=}
	 *     (rule start) (ambiguity) {XPlusType.left=}
	 */
	protected void emit_XPrimaryType_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
