/*
 * generated by Xtext 2.31.0
 */
package com.dunkware.xstream.ide.contentassist.antlr;

import com.dunkware.xstream.ide.contentassist.antlr.internal.InternalXScriptParser;
import com.dunkware.xstream.services.XScriptGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class XScriptParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(XScriptGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, XScriptGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCoreAbstractElementAccess().getAlternatives(), "rule__CoreAbstractElement__Alternatives");
			builder.put(grammarAccess.getVarTypeAccess().getAlternatives(), "rule__VarType__Alternatives");
			builder.put(grammarAccess.getEqualityTypeAccess().getOpAlternatives_1_1_0(), "rule__EqualityType__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getComparisonTypeAccess().getOpAlternatives_1_1_0(), "rule__ComparisonType__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getPlusOrMinusTypeAccess().getAlternatives_1_0(), "rule__PlusOrMinusType__Alternatives_1_0");
			builder.put(grammarAccess.getMulOrDivTypeAccess().getOpAlternatives_1_1_0(), "rule__MulOrDivType__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getPrimaryTypeAccess().getAlternatives(), "rule__PrimaryType__Alternatives");
			builder.put(grammarAccess.getAtomicBaseTypeAccess().getAlternatives(), "rule__AtomicBaseType__Alternatives");
			builder.put(grammarAccess.getAtomicBaseTypeAccess().getValueAlternatives_3_1_0(), "rule__AtomicBaseType__ValueAlternatives_3_1_0");
			builder.put(grammarAccess.getVariableValueTypeAccess().getAlternatives_2_1(), "rule__VariableValueType__Alternatives_2_1");
			builder.put(grammarAccess.getSessionTimeRangeAccess().getAlternatives(), "rule__SessionTimeRange__Alternatives");
			builder.put(grammarAccess.getXClassCoreElementTypeAccess().getAlternatives(), "rule__XClassCoreElementType__Alternatives");
			builder.put(grammarAccess.getXFunctionCoreElementTypeAccess().getAlternatives(), "rule__XFunctionCoreElementType__Alternatives");
			builder.put(grammarAccess.getXWhileElementTypeAccess().getAlternatives(), "rule__XWhileElementType__Alternatives");
			builder.put(grammarAccess.getXEqualityTypeAccess().getOpAlternatives_1_1_0(), "rule__XEqualityType__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getXComparisonTypeAccess().getOpAlternatives_1_1_0(), "rule__XComparisonType__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getXPlusOrMinusTypeAccess().getAlternatives_1_0(), "rule__XPlusOrMinusType__Alternatives_1_0");
			builder.put(grammarAccess.getXMulOrDivTypeAccess().getOpAlternatives_1_1_0(), "rule__XMulOrDivType__OpAlternatives_1_1_0");
			builder.put(grammarAccess.getXPrimaryTypeAccess().getAlternatives(), "rule__XPrimaryType__Alternatives");
			builder.put(grammarAccess.getXAtomicBaseTypeAccess().getAlternatives(), "rule__XAtomicBaseType__Alternatives");
			builder.put(grammarAccess.getXAtomicBaseTypeAccess().getValueAlternatives_3_1_0(), "rule__XAtomicBaseType__ValueAlternatives_3_1_0");
			builder.put(grammarAccess.getXVarStreakTypeAccess().getDirectionAlternatives_5_0(), "rule__XVarStreakType__DirectionAlternatives_5_0");
			builder.put(grammarAccess.getXVarStreakTypeAccess().getAlternatives_9(), "rule__XVarStreakType__Alternatives_9");
			builder.put(grammarAccess.getXVarStreakCompareTypeAccess().getFunctionAlternatives_1_0(), "rule__XVarStreakCompareType__FunctionAlternatives_1_0");
			builder.put(grammarAccess.getXVarStreakCompareTypeAccess().getOpAlternatives_5_0(), "rule__XVarStreakCompareType__OpAlternatives_5_0");
			builder.put(grammarAccess.getXVarStreakValueTypeAccess().getOpAlternatives_2_0(), "rule__XVarStreakValueType__OpAlternatives_2_0");
			builder.put(grammarAccess.getXVarCompareStreakTypeAccess().getDirectionAlternatives_7_0(), "rule__XVarCompareStreakType__DirectionAlternatives_7_0");
			builder.put(grammarAccess.getXVarCompareStreakTypeAccess().getFunctionAlternatives_11_0(), "rule__XVarCompareStreakType__FunctionAlternatives_11_0");
			builder.put(grammarAccess.getXVarCompareStreakTypeAccess().getOpAlternatives_12_0(), "rule__XVarCompareStreakType__OpAlternatives_12_0");
			builder.put(grammarAccess.getHistoricalAggFuncAccess().getAlternatives(), "rule__HistoricalAggFunc__Alternatives");
			builder.put(grammarAccess.getSessionAggFuncAccess().getAlternatives(), "rule__SessionAggFunc__Alternatives");
			builder.put(grammarAccess.getSessionTimeUnitAccess().getAlternatives(), "rule__SessionTimeUnit__Alternatives");
			builder.put(grammarAccess.getStreamTimeUnitAccess().getAlternatives(), "rule__StreamTimeUnit__Alternatives");
			builder.put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
			builder.put(grammarAccess.getVarStoreTypeAccess().getGroup(), "rule__VarStoreType__Group__0");
			builder.put(grammarAccess.getVarTransTypeAccess().getGroup(), "rule__VarTransType__Group__0");
			builder.put(grammarAccess.getOrTypeAccess().getGroup(), "rule__OrType__Group__0");
			builder.put(grammarAccess.getOrTypeAccess().getGroup_1(), "rule__OrType__Group_1__0");
			builder.put(grammarAccess.getAndTypeAccess().getGroup(), "rule__AndType__Group__0");
			builder.put(grammarAccess.getAndTypeAccess().getGroup_1(), "rule__AndType__Group_1__0");
			builder.put(grammarAccess.getEqualityTypeAccess().getGroup(), "rule__EqualityType__Group__0");
			builder.put(grammarAccess.getEqualityTypeAccess().getGroup_1(), "rule__EqualityType__Group_1__0");
			builder.put(grammarAccess.getComparisonTypeAccess().getGroup(), "rule__ComparisonType__Group__0");
			builder.put(grammarAccess.getComparisonTypeAccess().getGroup_1(), "rule__ComparisonType__Group_1__0");
			builder.put(grammarAccess.getPlusOrMinusTypeAccess().getGroup(), "rule__PlusOrMinusType__Group__0");
			builder.put(grammarAccess.getPlusOrMinusTypeAccess().getGroup_1(), "rule__PlusOrMinusType__Group_1__0");
			builder.put(grammarAccess.getPlusOrMinusTypeAccess().getGroup_1_0_0(), "rule__PlusOrMinusType__Group_1_0_0__0");
			builder.put(grammarAccess.getPlusOrMinusTypeAccess().getGroup_1_0_1(), "rule__PlusOrMinusType__Group_1_0_1__0");
			builder.put(grammarAccess.getMulOrDivTypeAccess().getGroup(), "rule__MulOrDivType__Group__0");
			builder.put(grammarAccess.getMulOrDivTypeAccess().getGroup_1(), "rule__MulOrDivType__Group_1__0");
			builder.put(grammarAccess.getPrimaryTypeAccess().getGroup_0(), "rule__PrimaryType__Group_0__0");
			builder.put(grammarAccess.getPrimaryTypeAccess().getGroup_1(), "rule__PrimaryType__Group_1__0");
			builder.put(grammarAccess.getAtomicBaseTypeAccess().getGroup_0(), "rule__AtomicBaseType__Group_0__0");
			builder.put(grammarAccess.getAtomicBaseTypeAccess().getGroup_1(), "rule__AtomicBaseType__Group_1__0");
			builder.put(grammarAccess.getAtomicBaseTypeAccess().getGroup_2(), "rule__AtomicBaseType__Group_2__0");
			builder.put(grammarAccess.getAtomicBaseTypeAccess().getGroup_3(), "rule__AtomicBaseType__Group_3__0");
			builder.put(grammarAccess.getTickExpressionTypeAccess().getGroup(), "rule__TickExpressionType__Group__0");
			builder.put(grammarAccess.getVariableValueRangeTypeAccess().getGroup(), "rule__VariableValueRangeType__Group__0");
			builder.put(grammarAccess.getVariableValueTypeAccess().getGroup(), "rule__VariableValueType__Group__0");
			builder.put(grammarAccess.getVariableValueTypeAccess().getGroup_2(), "rule__VariableValueType__Group_2__0");
			builder.put(grammarAccess.getVariableValueTypeAccess().getGroup_2_1_1(), "rule__VariableValueType__Group_2_1_1__0");
			builder.put(grammarAccess.getVariableValueExpTypeAccess().getGroup(), "rule__VariableValueExpType__Group__0");
			builder.put(grammarAccess.getSetExpressionTypeAccess().getGroup(), "rule__SetExpressionType__Group__0");
			builder.put(grammarAccess.getSetExpressionTypeAccess().getGroup_2(), "rule__SetExpressionType__Group_2__0");
			builder.put(grammarAccess.getSetExpressionTypeAccess().getGroup_2_1(), "rule__SetExpressionType__Group_2_1__0");
			builder.put(grammarAccess.getSnapshotExpressionTypeAccess().getGroup(), "rule__SnapshotExpressionType__Group__0");
			builder.put(grammarAccess.getRocExpressionTypeAccess().getGroup(), "rule__RocExpressionType__Group__0");
			builder.put(grammarAccess.getAvgExpressionTypeAccess().getGroup(), "rule__AvgExpressionType__Group__0");
			builder.put(grammarAccess.getSubExpressionTypeAccess().getGroup(), "rule__SubExpressionType__Group__0");
			builder.put(grammarAccess.getHistoryTimeRangeAccess().getGroup(), "rule__HistoryTimeRange__Group__0");
			builder.put(grammarAccess.getRelativeSessionTimeRangeAccess().getGroup(), "rule__RelativeSessionTimeRange__Group__0");
			builder.put(grammarAccess.getRelativeSessionTimeRangeAccess().getGroup_1(), "rule__RelativeSessionTimeRange__Group_1__0");
			builder.put(grammarAccess.getTodaySessionTimeRangeAccess().getGroup(), "rule__TodaySessionTimeRange__Group__0");
			builder.put(grammarAccess.getVarAggSessionTypeAccess().getGroup(), "rule__VarAggSessionType__Group__0");
			builder.put(grammarAccess.getVarAggHistoryTypeAccess().getGroup(), "rule__VarAggHistoryType__Group__0");
			builder.put(grammarAccess.getSignalCountSessionAccess().getGroup(), "rule__SignalCountSession__Group__0");
			builder.put(grammarAccess.getSignalCountHistoryAccess().getGroup(), "rule__SignalCountHistory__Group__0");
			builder.put(grammarAccess.getSignalTypeAccess().getGroup(), "rule__SignalType__Group__0");
			builder.put(grammarAccess.getXClassTypeAccess().getGroup(), "rule__XClassType__Group__0");
			builder.put(grammarAccess.getXClassTypeAccess().getGroup_3(), "rule__XClassType__Group_3__0");
			builder.put(grammarAccess.getXVarTypeAccess().getGroup(), "rule__XVarType__Group__0");
			builder.put(grammarAccess.getXVarTypeAccess().getGroup_3(), "rule__XVarType__Group_3__0");
			builder.put(grammarAccess.getXFunctionTypeAccess().getGroup(), "rule__XFunctionType__Group__0");
			builder.put(grammarAccess.getXFunctionReturnTypeAccess().getGroup(), "rule__XFunctionReturnType__Group__0");
			builder.put(grammarAccess.getXFunctionCallTypeAccess().getGroup(), "rule__XFunctionCallType__Group__0");
			builder.put(grammarAccess.getXSignalListenerTypeAccess().getGroup(), "rule__XSignalListenerType__Group__0");
			builder.put(grammarAccess.getXStreamVarListenerTypeAccess().getGroup(), "rule__XStreamVarListenerType__Group__0");
			builder.put(grammarAccess.getXSignalTriggerTypeAccess().getGroup(), "rule__XSignalTriggerType__Group__0");
			builder.put(grammarAccess.getXFunctionStartTypeAccess().getGroup(), "rule__XFunctionStartType__Group__0");
			builder.put(grammarAccess.getXVarSetterTypeAccess().getGroup(), "rule__XVarSetterType__Group__0");
			builder.put(grammarAccess.getXVarIncrementTypeAccess().getGroup(), "rule__XVarIncrementType__Group__0");
			builder.put(grammarAccess.getXVarDecrementTypeAccess().getGroup(), "rule__XVarDecrementType__Group__0");
			builder.put(grammarAccess.getXSetVarTypeAccess().getGroup(), "rule__XSetVarType__Group__0");
			builder.put(grammarAccess.getXDebugTypeAccess().getGroup(), "rule__XDebugType__Group__0");
			builder.put(grammarAccess.getXDebugTypeAccess().getGroup_3(), "rule__XDebugType__Group_3__0");
			builder.put(grammarAccess.getXDebugTypeAccess().getGroup_3_1(), "rule__XDebugType__Group_3_1__0");
			builder.put(grammarAccess.getXIfStatementTypeAccess().getGroup(), "rule__XIfStatementType__Group__0");
			builder.put(grammarAccess.getXElseIfStatementTypeAccess().getGroup(), "rule__XElseIfStatementType__Group__0");
			builder.put(grammarAccess.getXElseIfStatementTypeAccess().getGroup_1(), "rule__XElseIfStatementType__Group_1__0");
			builder.put(grammarAccess.getXElseStatementTypeAccess().getGroup(), "rule__XElseStatementType__Group__0");
			builder.put(grammarAccess.getXWhileTypeAccess().getGroup(), "rule__XWhileType__Group__0");
			builder.put(grammarAccess.getXWhileBreakTypeAccess().getGroup(), "rule__XWhileBreakType__Group__0");
			builder.put(grammarAccess.getXSleepTypeAccess().getGroup(), "rule__XSleepType__Group__0");
			builder.put(grammarAccess.getXOrTypeAccess().getGroup(), "rule__XOrType__Group__0");
			builder.put(grammarAccess.getXOrTypeAccess().getGroup_1(), "rule__XOrType__Group_1__0");
			builder.put(grammarAccess.getXAndTypeAccess().getGroup(), "rule__XAndType__Group__0");
			builder.put(grammarAccess.getXAndTypeAccess().getGroup_1(), "rule__XAndType__Group_1__0");
			builder.put(grammarAccess.getXEqualityTypeAccess().getGroup(), "rule__XEqualityType__Group__0");
			builder.put(grammarAccess.getXEqualityTypeAccess().getGroup_1(), "rule__XEqualityType__Group_1__0");
			builder.put(grammarAccess.getXComparisonTypeAccess().getGroup(), "rule__XComparisonType__Group__0");
			builder.put(grammarAccess.getXComparisonTypeAccess().getGroup_1(), "rule__XComparisonType__Group_1__0");
			builder.put(grammarAccess.getXPlusOrMinusTypeAccess().getGroup(), "rule__XPlusOrMinusType__Group__0");
			builder.put(grammarAccess.getXPlusOrMinusTypeAccess().getGroup_1(), "rule__XPlusOrMinusType__Group_1__0");
			builder.put(grammarAccess.getXPlusOrMinusTypeAccess().getGroup_1_0_0(), "rule__XPlusOrMinusType__Group_1_0_0__0");
			builder.put(grammarAccess.getXPlusOrMinusTypeAccess().getGroup_1_0_1(), "rule__XPlusOrMinusType__Group_1_0_1__0");
			builder.put(grammarAccess.getXMulOrDivTypeAccess().getGroup(), "rule__XMulOrDivType__Group__0");
			builder.put(grammarAccess.getXMulOrDivTypeAccess().getGroup_1(), "rule__XMulOrDivType__Group_1__0");
			builder.put(grammarAccess.getXPrimaryTypeAccess().getGroup_0(), "rule__XPrimaryType__Group_0__0");
			builder.put(grammarAccess.getXPrimaryTypeAccess().getGroup_1(), "rule__XPrimaryType__Group_1__0");
			builder.put(grammarAccess.getXAtomicBaseTypeAccess().getGroup_0(), "rule__XAtomicBaseType__Group_0__0");
			builder.put(grammarAccess.getXAtomicBaseTypeAccess().getGroup_1(), "rule__XAtomicBaseType__Group_1__0");
			builder.put(grammarAccess.getXAtomicBaseTypeAccess().getGroup_2(), "rule__XAtomicBaseType__Group_2__0");
			builder.put(grammarAccess.getXAtomicBaseTypeAccess().getGroup_3(), "rule__XAtomicBaseType__Group_3__0");
			builder.put(grammarAccess.getXPercentChangeExpTypeAccess().getGroup(), "rule__XPercentChangeExpType__Group__0");
			builder.put(grammarAccess.getXSubExpTypeAccess().getGroup(), "rule__XSubExpType__Group__0");
			builder.put(grammarAccess.getXVarExpTypeAccess().getGroup(), "rule__XVarExpType__Group__0");
			builder.put(grammarAccess.getXStreamWrapperExpTypeAccess().getGroup(), "rule__XStreamWrapperExpType__Group__0");
			builder.put(grammarAccess.getXStreamVarValueExpTypeAccess().getGroup(), "rule__XStreamVarValueExpType__Group__0");
			builder.put(grammarAccess.getXStreamVarValueExpTypeAccess().getGroup_2(), "rule__XStreamVarValueExpType__Group_2__0");
			builder.put(grammarAccess.getXFunctionCallExpTypeAccess().getGroup(), "rule__XFunctionCallExpType__Group__0");
			builder.put(grammarAccess.getXVarStreakTypeAccess().getGroup(), "rule__XVarStreakType__Group__0");
			builder.put(grammarAccess.getXVarStreakCompareTypeAccess().getGroup(), "rule__XVarStreakCompareType__Group__0");
			builder.put(grammarAccess.getXVarStreakValueTypeAccess().getGroup(), "rule__XVarStreakValueType__Group__0");
			builder.put(grammarAccess.getXVarCompareStreakTypeAccess().getGroup(), "rule__XVarCompareStreakType__Group__0");
			builder.put(grammarAccess.getXSlrAvgExpTypeAccess().getGroup(), "rule__XSlrAvgExpType__Group__0");
			builder.put(grammarAccess.getXLastSignalTriggerTypeAccess().getGroup(), "rule__XLastSignalTriggerType__Group__0");
			builder.put(grammarAccess.getXSignalTriggerCountTypeAccess().getGroup(), "rule__XSignalTriggerCountType__Group__0");
			builder.put(grammarAccess.getXVarianceAverageTypeAccess().getGroup(), "rule__XVarianceAverageType__Group__0");
			builder.put(grammarAccess.getXVarianceMaxTypeAccess().getGroup(), "rule__XVarianceMaxType__Group__0");
			builder.put(grammarAccess.getXRocExpTypeAccess().getGroup(), "rule__XRocExpType__Group__0");
			builder.put(grammarAccess.getXScriptAccess().getElementsAssignment(), "rule__XScript__ElementsAssignment");
			builder.put(grammarAccess.getVarStoreTypeAccess().getNameAssignment_1(), "rule__VarStoreType__NameAssignment_1");
			builder.put(grammarAccess.getVarStoreTypeAccess().getCodeAssignment_3(), "rule__VarStoreType__CodeAssignment_3");
			builder.put(grammarAccess.getVarStoreTypeAccess().getTypeAssignment_5(), "rule__VarStoreType__TypeAssignment_5");
			builder.put(grammarAccess.getVarStoreTypeAccess().getExpressionAssignment_8(), "rule__VarStoreType__ExpressionAssignment_8");
			builder.put(grammarAccess.getVarTransTypeAccess().getNameAssignment_1(), "rule__VarTransType__NameAssignment_1");
			builder.put(grammarAccess.getVarTransTypeAccess().getCodeAssignment_3(), "rule__VarTransType__CodeAssignment_3");
			builder.put(grammarAccess.getVarTransTypeAccess().getTypeAssignment_5(), "rule__VarTransType__TypeAssignment_5");
			builder.put(grammarAccess.getVarTransTypeAccess().getExpressionAssignment_8(), "rule__VarTransType__ExpressionAssignment_8");
			builder.put(grammarAccess.getOrTypeAccess().getRightAssignment_1_2(), "rule__OrType__RightAssignment_1_2");
			builder.put(grammarAccess.getAndTypeAccess().getRightAssignment_1_2(), "rule__AndType__RightAssignment_1_2");
			builder.put(grammarAccess.getEqualityTypeAccess().getOpAssignment_1_1(), "rule__EqualityType__OpAssignment_1_1");
			builder.put(grammarAccess.getEqualityTypeAccess().getRightAssignment_1_2(), "rule__EqualityType__RightAssignment_1_2");
			builder.put(grammarAccess.getComparisonTypeAccess().getOpAssignment_1_1(), "rule__ComparisonType__OpAssignment_1_1");
			builder.put(grammarAccess.getComparisonTypeAccess().getRightAssignment_1_2(), "rule__ComparisonType__RightAssignment_1_2");
			builder.put(grammarAccess.getPlusOrMinusTypeAccess().getRightAssignment_1_1(), "rule__PlusOrMinusType__RightAssignment_1_1");
			builder.put(grammarAccess.getMulOrDivTypeAccess().getOpAssignment_1_1(), "rule__MulOrDivType__OpAssignment_1_1");
			builder.put(grammarAccess.getMulOrDivTypeAccess().getRightAssignment_1_2(), "rule__MulOrDivType__RightAssignment_1_2");
			builder.put(grammarAccess.getPrimaryTypeAccess().getExpressionAssignment_1_2(), "rule__PrimaryType__ExpressionAssignment_1_2");
			builder.put(grammarAccess.getAtomicBaseTypeAccess().getValueAssignment_0_1(), "rule__AtomicBaseType__ValueAssignment_0_1");
			builder.put(grammarAccess.getAtomicBaseTypeAccess().getValueAssignment_1_1(), "rule__AtomicBaseType__ValueAssignment_1_1");
			builder.put(grammarAccess.getAtomicBaseTypeAccess().getValueAssignment_2_1(), "rule__AtomicBaseType__ValueAssignment_2_1");
			builder.put(grammarAccess.getAtomicBaseTypeAccess().getValueAssignment_3_1(), "rule__AtomicBaseType__ValueAssignment_3_1");
			builder.put(grammarAccess.getTickExpressionTypeAccess().getTypeAssignment_3(), "rule__TickExpressionType__TypeAssignment_3");
			builder.put(grammarAccess.getTickExpressionTypeAccess().getFieldAssignment_5(), "rule__TickExpressionType__FieldAssignment_5");
			builder.put(grammarAccess.getTickExpressionTypeAccess().getDataTypeAssignment_7(), "rule__TickExpressionType__DataTypeAssignment_7");
			builder.put(grammarAccess.getVariableValueRangeTypeAccess().getTargetVarAssignment_1(), "rule__VariableValueRangeType__TargetVarAssignment_1");
			builder.put(grammarAccess.getVariableValueRangeTypeAccess().getStartIndexAssignment_3(), "rule__VariableValueRangeType__StartIndexAssignment_3");
			builder.put(grammarAccess.getVariableValueRangeTypeAccess().getEndIndexAssignment_5(), "rule__VariableValueRangeType__EndIndexAssignment_5");
			builder.put(grammarAccess.getVariableValueTypeAccess().getVariableAssignment_1(), "rule__VariableValueType__VariableAssignment_1");
			builder.put(grammarAccess.getVariableValueTypeAccess().getIndexIntAssignment_2_1_0(), "rule__VariableValueType__IndexIntAssignment_2_1_0");
			builder.put(grammarAccess.getVariableValueTypeAccess().getExpTypeAssignment_2_1_1_2(), "rule__VariableValueType__ExpTypeAssignment_2_1_1_2");
			builder.put(grammarAccess.getVariableValueExpTypeAccess().getExpTypeAssignment_3(), "rule__VariableValueExpType__ExpTypeAssignment_3");
			builder.put(grammarAccess.getSetExpressionTypeAccess().getArgsAssignment_2_0(), "rule__SetExpressionType__ArgsAssignment_2_0");
			builder.put(grammarAccess.getSetExpressionTypeAccess().getArgsAssignment_2_1_1(), "rule__SetExpressionType__ArgsAssignment_2_1_1");
			builder.put(grammarAccess.getSnapshotExpressionTypeAccess().getTargetAssignment_3(), "rule__SnapshotExpressionType__TargetAssignment_3");
			builder.put(grammarAccess.getSnapshotExpressionTypeAccess().getIntervalAssignment_5(), "rule__SnapshotExpressionType__IntervalAssignment_5");
			builder.put(grammarAccess.getSnapshotExpressionTypeAccess().getTimeAssignment_6(), "rule__SnapshotExpressionType__TimeAssignment_6");
			builder.put(grammarAccess.getRocExpressionTypeAccess().getTargetAssignment_3(), "rule__RocExpressionType__TargetAssignment_3");
			builder.put(grammarAccess.getRocExpressionTypeAccess().getCompareAssignment_5(), "rule__RocExpressionType__CompareAssignment_5");
			builder.put(grammarAccess.getAvgExpressionTypeAccess().getTargetAssignment_3(), "rule__AvgExpressionType__TargetAssignment_3");
			builder.put(grammarAccess.getSubExpressionTypeAccess().getTargetAssignment_3(), "rule__SubExpressionType__TargetAssignment_3");
			builder.put(grammarAccess.getSubExpressionTypeAccess().getCompareAssignment_5(), "rule__SubExpressionType__CompareAssignment_5");
			builder.put(grammarAccess.getHistoryTimeRangeAccess().getValueAssignment_3(), "rule__HistoryTimeRange__ValueAssignment_3");
			builder.put(grammarAccess.getRelativeSessionTimeRangeAccess().getRelativeValeAssignment_1_2(), "rule__RelativeSessionTimeRange__RelativeValeAssignment_1_2");
			builder.put(grammarAccess.getRelativeSessionTimeRangeAccess().getTimeUnitAssignment_1_4(), "rule__RelativeSessionTimeRange__TimeUnitAssignment_1_4");
			builder.put(grammarAccess.getVarAggSessionTypeAccess().getVarAssignment_3(), "rule__VarAggSessionType__VarAssignment_3");
			builder.put(grammarAccess.getVarAggSessionTypeAccess().getFunctionAssignment_5(), "rule__VarAggSessionType__FunctionAssignment_5");
			builder.put(grammarAccess.getVarAggSessionTypeAccess().getTimeRangeAssignment_7(), "rule__VarAggSessionType__TimeRangeAssignment_7");
			builder.put(grammarAccess.getVarAggHistoryTypeAccess().getVarAssignment_3(), "rule__VarAggHistoryType__VarAssignment_3");
			builder.put(grammarAccess.getVarAggHistoryTypeAccess().getFunctionAssignment_5(), "rule__VarAggHistoryType__FunctionAssignment_5");
			builder.put(grammarAccess.getVarAggHistoryTypeAccess().getTimeRangeAssignment_7(), "rule__VarAggHistoryType__TimeRangeAssignment_7");
			builder.put(grammarAccess.getSignalCountSessionAccess().getSignalAssignment_3(), "rule__SignalCountSession__SignalAssignment_3");
			builder.put(grammarAccess.getSignalCountSessionAccess().getTimeRangeAssignment_5(), "rule__SignalCountSession__TimeRangeAssignment_5");
			builder.put(grammarAccess.getSignalCountHistoryAccess().getSignalAssignment_3(), "rule__SignalCountHistory__SignalAssignment_3");
			builder.put(grammarAccess.getSignalCountHistoryAccess().getTimeRangeAssignment_5(), "rule__SignalCountHistory__TimeRangeAssignment_5");
			builder.put(grammarAccess.getSignalTypeAccess().getNameAssignment_2(), "rule__SignalType__NameAssignment_2");
			builder.put(grammarAccess.getSignalTypeAccess().getIdAssignment_4(), "rule__SignalType__IdAssignment_4");
			builder.put(grammarAccess.getXClassTypeAccess().getNameAssignment_2(), "rule__XClassType__NameAssignment_2");
			builder.put(grammarAccess.getXClassTypeAccess().getSymbolFilterAssignment_3_1(), "rule__XClassType__SymbolFilterAssignment_3_1");
			builder.put(grammarAccess.getXClassTypeAccess().getElementsAssignment_5(), "rule__XClassType__ElementsAssignment_5");
			builder.put(grammarAccess.getXVarTypeAccess().getNameAssignment_2(), "rule__XVarType__NameAssignment_2");
			builder.put(grammarAccess.getXVarTypeAccess().getExpAssignment_3_1(), "rule__XVarType__ExpAssignment_3_1");
			builder.put(grammarAccess.getXFunctionTypeAccess().getNameAssignment_2(), "rule__XFunctionType__NameAssignment_2");
			builder.put(grammarAccess.getXFunctionTypeAccess().getParamsAssignment_4(), "rule__XFunctionType__ParamsAssignment_4");
			builder.put(grammarAccess.getXFunctionTypeAccess().getElementsAssignment_7(), "rule__XFunctionType__ElementsAssignment_7");
			builder.put(grammarAccess.getXFunctionReturnTypeAccess().getReturnValueAssignment_2(), "rule__XFunctionReturnType__ReturnValueAssignment_2");
			builder.put(grammarAccess.getXFunctionCallTypeAccess().getFunctionAssignment_1(), "rule__XFunctionCallType__FunctionAssignment_1");
			builder.put(grammarAccess.getXFunctionCallTypeAccess().getParamsAssignment_3(), "rule__XFunctionCallType__ParamsAssignment_3");
			builder.put(grammarAccess.getXSignalListenerTypeAccess().getSignalTypeAssignment_3(), "rule__XSignalListenerType__SignalTypeAssignment_3");
			builder.put(grammarAccess.getXSignalListenerTypeAccess().getFunctionAssignment_5(), "rule__XSignalListenerType__FunctionAssignment_5");
			builder.put(grammarAccess.getXStreamVarListenerTypeAccess().getColumnAssignment_3(), "rule__XStreamVarListenerType__ColumnAssignment_3");
			builder.put(grammarAccess.getXStreamVarListenerTypeAccess().getFunctionAssignment_5(), "rule__XStreamVarListenerType__FunctionAssignment_5");
			builder.put(grammarAccess.getXSignalTriggerTypeAccess().getSignalAssignment_3(), "rule__XSignalTriggerType__SignalAssignment_3");
			builder.put(grammarAccess.getXFunctionStartTypeAccess().getFunctionAssignment_3(), "rule__XFunctionStartType__FunctionAssignment_3");
			builder.put(grammarAccess.getXFunctionStartTypeAccess().getIntervalAssignment_5(), "rule__XFunctionStartType__IntervalAssignment_5");
			builder.put(grammarAccess.getXFunctionStartTypeAccess().getTimeAssignment_6(), "rule__XFunctionStartType__TimeAssignment_6");
			builder.put(grammarAccess.getXVarSetterTypeAccess().getVarAssignment_1(), "rule__XVarSetterType__VarAssignment_1");
			builder.put(grammarAccess.getXVarSetterTypeAccess().getExpAssignment_3(), "rule__XVarSetterType__ExpAssignment_3");
			builder.put(grammarAccess.getXVarIncrementTypeAccess().getVarAssignment_1(), "rule__XVarIncrementType__VarAssignment_1");
			builder.put(grammarAccess.getXVarDecrementTypeAccess().getVarAssignment_1(), "rule__XVarDecrementType__VarAssignment_1");
			builder.put(grammarAccess.getXSetVarTypeAccess().getVarAssignment_3(), "rule__XSetVarType__VarAssignment_3");
			builder.put(grammarAccess.getXSetVarTypeAccess().getValueAssignment_5(), "rule__XSetVarType__ValueAssignment_5");
			builder.put(grammarAccess.getXDebugTypeAccess().getArgsAssignment_3_0(), "rule__XDebugType__ArgsAssignment_3_0");
			builder.put(grammarAccess.getXDebugTypeAccess().getArgsAssignment_3_1_1(), "rule__XDebugType__ArgsAssignment_3_1_1");
			builder.put(grammarAccess.getXIfStatementTypeAccess().getExpressionAssignment_3(), "rule__XIfStatementType__ExpressionAssignment_3");
			builder.put(grammarAccess.getXIfStatementTypeAccess().getElementsAssignment_6(), "rule__XIfStatementType__ElementsAssignment_6");
			builder.put(grammarAccess.getXIfStatementTypeAccess().getElseIfElementsAssignment_8(), "rule__XIfStatementType__ElseIfElementsAssignment_8");
			builder.put(grammarAccess.getXIfStatementTypeAccess().getElseElementAssignment_9(), "rule__XIfStatementType__ElseElementAssignment_9");
			builder.put(grammarAccess.getXElseIfStatementTypeAccess().getExpressionAssignment_1_2(), "rule__XElseIfStatementType__ExpressionAssignment_1_2");
			builder.put(grammarAccess.getXElseIfStatementTypeAccess().getElementsAssignment_1_5(), "rule__XElseIfStatementType__ElementsAssignment_1_5");
			builder.put(grammarAccess.getXElseStatementTypeAccess().getElementsAssignment_3(), "rule__XElseStatementType__ElementsAssignment_3");
			builder.put(grammarAccess.getXWhileTypeAccess().getExpressionAssignment_3(), "rule__XWhileType__ExpressionAssignment_3");
			builder.put(grammarAccess.getXWhileTypeAccess().getElementsAssignment_6(), "rule__XWhileType__ElementsAssignment_6");
			builder.put(grammarAccess.getXSleepTypeAccess().getIntervalAssignment_3(), "rule__XSleepType__IntervalAssignment_3");
			builder.put(grammarAccess.getXSleepTypeAccess().getUnitAssignment_4(), "rule__XSleepType__UnitAssignment_4");
			builder.put(grammarAccess.getXOrTypeAccess().getRightAssignment_1_2(), "rule__XOrType__RightAssignment_1_2");
			builder.put(grammarAccess.getXAndTypeAccess().getRightAssignment_1_2(), "rule__XAndType__RightAssignment_1_2");
			builder.put(grammarAccess.getXEqualityTypeAccess().getOpAssignment_1_1(), "rule__XEqualityType__OpAssignment_1_1");
			builder.put(grammarAccess.getXEqualityTypeAccess().getRightAssignment_1_2(), "rule__XEqualityType__RightAssignment_1_2");
			builder.put(grammarAccess.getXComparisonTypeAccess().getOpAssignment_1_1(), "rule__XComparisonType__OpAssignment_1_1");
			builder.put(grammarAccess.getXComparisonTypeAccess().getRightAssignment_1_2(), "rule__XComparisonType__RightAssignment_1_2");
			builder.put(grammarAccess.getXPlusOrMinusTypeAccess().getRightAssignment_1_1(), "rule__XPlusOrMinusType__RightAssignment_1_1");
			builder.put(grammarAccess.getXMulOrDivTypeAccess().getOpAssignment_1_1(), "rule__XMulOrDivType__OpAssignment_1_1");
			builder.put(grammarAccess.getXMulOrDivTypeAccess().getRightAssignment_1_2(), "rule__XMulOrDivType__RightAssignment_1_2");
			builder.put(grammarAccess.getXPrimaryTypeAccess().getExpressionAssignment_1_2(), "rule__XPrimaryType__ExpressionAssignment_1_2");
			builder.put(grammarAccess.getXAtomicBaseTypeAccess().getValueAssignment_0_1(), "rule__XAtomicBaseType__ValueAssignment_0_1");
			builder.put(grammarAccess.getXAtomicBaseTypeAccess().getValueAssignment_1_1(), "rule__XAtomicBaseType__ValueAssignment_1_1");
			builder.put(grammarAccess.getXAtomicBaseTypeAccess().getValueAssignment_2_1(), "rule__XAtomicBaseType__ValueAssignment_2_1");
			builder.put(grammarAccess.getXAtomicBaseTypeAccess().getValueAssignment_3_1(), "rule__XAtomicBaseType__ValueAssignment_3_1");
			builder.put(grammarAccess.getXPercentChangeExpTypeAccess().getValue1Assignment_3(), "rule__XPercentChangeExpType__Value1Assignment_3");
			builder.put(grammarAccess.getXPercentChangeExpTypeAccess().getValue2Assignment_5(), "rule__XPercentChangeExpType__Value2Assignment_5");
			builder.put(grammarAccess.getXSubExpTypeAccess().getValue1Assignment_3(), "rule__XSubExpType__Value1Assignment_3");
			builder.put(grammarAccess.getXSubExpTypeAccess().getValue2Assignment_5(), "rule__XSubExpType__Value2Assignment_5");
			builder.put(grammarAccess.getXVarExpTypeAccess().getExpVarAssignment_1(), "rule__XVarExpType__ExpVarAssignment_1");
			builder.put(grammarAccess.getXStreamWrapperExpTypeAccess().getWrapperExpAssignment_3(), "rule__XStreamWrapperExpType__WrapperExpAssignment_3");
			builder.put(grammarAccess.getXStreamVarValueExpTypeAccess().getVarAssignment_1(), "rule__XStreamVarValueExpType__VarAssignment_1");
			builder.put(grammarAccess.getXStreamVarValueExpTypeAccess().getExpressionValueAssignment_2_1(), "rule__XStreamVarValueExpType__ExpressionValueAssignment_2_1");
			builder.put(grammarAccess.getXFunctionCallExpTypeAccess().getFunctionAssignment_1(), "rule__XFunctionCallExpType__FunctionAssignment_1");
			builder.put(grammarAccess.getXFunctionCallExpTypeAccess().getParmsAssignment_3(), "rule__XFunctionCallExpType__ParmsAssignment_3");
			builder.put(grammarAccess.getXVarStreakTypeAccess().getVarAssignment_3(), "rule__XVarStreakType__VarAssignment_3");
			builder.put(grammarAccess.getXVarStreakTypeAccess().getDirectionAssignment_5(), "rule__XVarStreakType__DirectionAssignment_5");
			builder.put(grammarAccess.getXVarStreakTypeAccess().getStartIndexExpAssignment_7(), "rule__XVarStreakType__StartIndexExpAssignment_7");
			builder.put(grammarAccess.getXVarStreakTypeAccess().getCompareAssignment_9_0(), "rule__XVarStreakType__CompareAssignment_9_0");
			builder.put(grammarAccess.getXVarStreakTypeAccess().getValueAssignment_9_1(), "rule__XVarStreakType__ValueAssignment_9_1");
			builder.put(grammarAccess.getXVarStreakCompareTypeAccess().getFunctionAssignment_1(), "rule__XVarStreakCompareType__FunctionAssignment_1");
			builder.put(grammarAccess.getXVarStreakCompareTypeAccess().getOffsetAssignment_3(), "rule__XVarStreakCompareType__OffsetAssignment_3");
			builder.put(grammarAccess.getXVarStreakCompareTypeAccess().getOpAssignment_5(), "rule__XVarStreakCompareType__OpAssignment_5");
			builder.put(grammarAccess.getXVarStreakCompareTypeAccess().getTestAssignment_6(), "rule__XVarStreakCompareType__TestAssignment_6");
			builder.put(grammarAccess.getXVarStreakValueTypeAccess().getOpAssignment_2(), "rule__XVarStreakValueType__OpAssignment_2");
			builder.put(grammarAccess.getXVarStreakValueTypeAccess().getTestAssignment_3(), "rule__XVarStreakValueType__TestAssignment_3");
			builder.put(grammarAccess.getXVarCompareStreakTypeAccess().getTargetVarAssignment_3(), "rule__XVarCompareStreakType__TargetVarAssignment_3");
			builder.put(grammarAccess.getXVarCompareStreakTypeAccess().getCompareVarAssignment_5(), "rule__XVarCompareStreakType__CompareVarAssignment_5");
			builder.put(grammarAccess.getXVarCompareStreakTypeAccess().getDirectionAssignment_7(), "rule__XVarCompareStreakType__DirectionAssignment_7");
			builder.put(grammarAccess.getXVarCompareStreakTypeAccess().getStartIndexExpAssignment_9(), "rule__XVarCompareStreakType__StartIndexExpAssignment_9");
			builder.put(grammarAccess.getXVarCompareStreakTypeAccess().getFunctionAssignment_11(), "rule__XVarCompareStreakType__FunctionAssignment_11");
			builder.put(grammarAccess.getXVarCompareStreakTypeAccess().getOpAssignment_12(), "rule__XVarCompareStreakType__OpAssignment_12");
			builder.put(grammarAccess.getXVarCompareStreakTypeAccess().getTestAssignment_13(), "rule__XVarCompareStreakType__TestAssignment_13");
			builder.put(grammarAccess.getXSlrAvgExpTypeAccess().getVarAssignment_3(), "rule__XSlrAvgExpType__VarAssignment_3");
			builder.put(grammarAccess.getXSlrAvgExpTypeAccess().getStartValueAssignment_5(), "rule__XSlrAvgExpType__StartValueAssignment_5");
			builder.put(grammarAccess.getXSlrAvgExpTypeAccess().getEndValueAssignment_7(), "rule__XSlrAvgExpType__EndValueAssignment_7");
			builder.put(grammarAccess.getXLastSignalTriggerTypeAccess().getSignalAssignment_3(), "rule__XLastSignalTriggerType__SignalAssignment_3");
			builder.put(grammarAccess.getXSignalTriggerCountTypeAccess().getSignalAssignment_3(), "rule__XSignalTriggerCountType__SignalAssignment_3");
			builder.put(grammarAccess.getXSignalTriggerCountTypeAccess().getLookbackAssignment_5(), "rule__XSignalTriggerCountType__LookbackAssignment_5");
			builder.put(grammarAccess.getXVarianceAverageTypeAccess().getTargetAssignment_3(), "rule__XVarianceAverageType__TargetAssignment_3");
			builder.put(grammarAccess.getXVarianceAverageTypeAccess().getCompareAssignment_5(), "rule__XVarianceAverageType__CompareAssignment_5");
			builder.put(grammarAccess.getXVarianceAverageTypeAccess().getStartAssignment_7(), "rule__XVarianceAverageType__StartAssignment_7");
			builder.put(grammarAccess.getXVarianceAverageTypeAccess().getEndAssignment_9(), "rule__XVarianceAverageType__EndAssignment_9");
			builder.put(grammarAccess.getXVarianceMaxTypeAccess().getTargetAssignment_3(), "rule__XVarianceMaxType__TargetAssignment_3");
			builder.put(grammarAccess.getXVarianceMaxTypeAccess().getCompareAssignment_5(), "rule__XVarianceMaxType__CompareAssignment_5");
			builder.put(grammarAccess.getXVarianceMaxTypeAccess().getStartAssignment_7(), "rule__XVarianceMaxType__StartAssignment_7");
			builder.put(grammarAccess.getXVarianceMaxTypeAccess().getEndAssignment_9(), "rule__XVarianceMaxType__EndAssignment_9");
			builder.put(grammarAccess.getXRocExpTypeAccess().getValue1Assignment_3(), "rule__XRocExpType__Value1Assignment_3");
			builder.put(grammarAccess.getXRocExpTypeAccess().getValue2Assignment_5(), "rule__XRocExpType__Value2Assignment_5");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private XScriptGrammarAccess grammarAccess;

	@Override
	protected InternalXScriptParser createParser() {
		InternalXScriptParser result = new InternalXScriptParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public XScriptGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(XScriptGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
