/*
 * Dunkware Street Model
 * Schema for Dunkware Street Model components.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dunkware.street.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * GenDate
 */
@JsonPropertyOrder({
  GenDate.JSON_PROPERTY_YEAR,
  GenDate.JSON_PROPERTY_MONTH,
  GenDate.JSON_PROPERTY_DAY_OF_MONTH
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-26T16:39:23.088112-05:00[America/Chicago]", comments = "Generator version: 7.6.0")
public class GenDate {
  public static final String JSON_PROPERTY_YEAR = "year";
  private Integer year;

  public static final String JSON_PROPERTY_MONTH = "month";
  private Integer month;

  public static final String JSON_PROPERTY_DAY_OF_MONTH = "dayOfMonth";
  private Integer dayOfMonth;

  public GenDate() { 
  }

  public GenDate year(Integer year) {
    this.year = year;
    return this;
  }

   /**
   * The year component of the date.
   * @return year
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_YEAR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getYear() {
    return year;
  }


  @JsonProperty(JSON_PROPERTY_YEAR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setYear(Integer year) {
    this.year = year;
  }


  public GenDate month(Integer month) {
    this.month = month;
    return this;
  }

   /**
   * The month component of the date.
   * @return month
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MONTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMonth() {
    return month;
  }


  @JsonProperty(JSON_PROPERTY_MONTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMonth(Integer month) {
    this.month = month;
  }


  public GenDate dayOfMonth(Integer dayOfMonth) {
    this.dayOfMonth = dayOfMonth;
    return this;
  }

   /**
   * The day of the month component.
   * @return dayOfMonth
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DAY_OF_MONTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getDayOfMonth() {
    return dayOfMonth;
  }


  @JsonProperty(JSON_PROPERTY_DAY_OF_MONTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDayOfMonth(Integer dayOfMonth) {
    this.dayOfMonth = dayOfMonth;
  }


  /**
   * Return true if this GenDate object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenDate genDate = (GenDate) o;
    return Objects.equals(this.year, genDate.year) &&
        Objects.equals(this.month, genDate.month) &&
        Objects.equals(this.dayOfMonth, genDate.dayOfMonth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(year, month, dayOfMonth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenDate {\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    dayOfMonth: ").append(toIndentedString(dayOfMonth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `year` to the URL query string
    if (getYear() != null) {
      joiner.add(String.format("%syear%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getYear()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `month` to the URL query string
    if (getMonth() != null) {
      joiner.add(String.format("%smonth%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMonth()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `dayOfMonth` to the URL query string
    if (getDayOfMonth() != null) {
      joiner.add(String.format("%sdayOfMonth%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDayOfMonth()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

