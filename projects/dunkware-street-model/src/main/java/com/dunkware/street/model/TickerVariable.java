/*
 * Dunkware Street Model
 * Schema for Dunkware Street Model components.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dunkware.street.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.dunkware.street.model.GenDataFormat;
import com.dunkware.street.model.GenDataType;
import com.dunkware.street.model.TickerVariableValue;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TickerVariable
 */
@JsonPropertyOrder({
  TickerVariable.JSON_PROPERTY_ID,
  TickerVariable.JSON_PROPERTY_IDENTIFIER,
  TickerVariable.JSON_PROPERTY_NAME,
  TickerVariable.JSON_PROPERTY_GROUP,
  TickerVariable.JSON_PROPERTY_DATA_TYPE,
  TickerVariable.JSON_PROPERTY_DATA_FORMAT,
  TickerVariable.JSON_PROPERTY_BASE_VERSION,
  TickerVariable.JSON_PROPERTY_SESSION_COUNT,
  TickerVariable.JSON_PROPERTY_VALUE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-12T04:48:04.920148-05:00[America/Chicago]", comments = "Generator version: 7.6.0")
public class TickerVariable {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_IDENTIFIER = "identifier";
  private String identifier;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_GROUP = "group";
  private String group;

  public static final String JSON_PROPERTY_DATA_TYPE = "dataType";
  private GenDataType dataType;

  public static final String JSON_PROPERTY_DATA_FORMAT = "dataFormat";
  private GenDataFormat dataFormat;

  public static final String JSON_PROPERTY_BASE_VERSION = "baseVersion";
  private Double baseVersion;

  public static final String JSON_PROPERTY_SESSION_COUNT = "sessionCount";
  private Integer sessionCount;

  public static final String JSON_PROPERTY_VALUE = "value";
  private TickerVariableValue value;

  public TickerVariable() { 
  }

  public TickerVariable id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Numeric identifier for the ticker variable
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Integer id) {
    this.id = id;
  }


  public TickerVariable identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * String identifier for the ticker variable
   * @return identifier
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIdentifier() {
    return identifier;
  }


  @JsonProperty(JSON_PROPERTY_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public TickerVariable name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the ticker variable
   * @return name
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public TickerVariable group(String group) {
    this.group = group;
    return this;
  }

   /**
   * Group to which the ticker variable belongs
   * @return group
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_GROUP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getGroup() {
    return group;
  }


  @JsonProperty(JSON_PROPERTY_GROUP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGroup(String group) {
    this.group = group;
  }


  public TickerVariable dataType(GenDataType dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   * Get dataType
   * @return dataType
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATA_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GenDataType getDataType() {
    return dataType;
  }


  @JsonProperty(JSON_PROPERTY_DATA_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDataType(GenDataType dataType) {
    this.dataType = dataType;
  }


  public TickerVariable dataFormat(GenDataFormat dataFormat) {
    this.dataFormat = dataFormat;
    return this;
  }

   /**
   * Get dataFormat
   * @return dataFormat
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATA_FORMAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GenDataFormat getDataFormat() {
    return dataFormat;
  }


  @JsonProperty(JSON_PROPERTY_DATA_FORMAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDataFormat(GenDataFormat dataFormat) {
    this.dataFormat = dataFormat;
  }


  public TickerVariable baseVersion(Double baseVersion) {
    this.baseVersion = baseVersion;
    return this;
  }

   /**
   * Base version of the ticker variable
   * @return baseVersion
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BASE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getBaseVersion() {
    return baseVersion;
  }


  @JsonProperty(JSON_PROPERTY_BASE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBaseVersion(Double baseVersion) {
    this.baseVersion = baseVersion;
  }


  public TickerVariable sessionCount(Integer sessionCount) {
    this.sessionCount = sessionCount;
    return this;
  }

   /**
   * Number of sessions associated with the ticker variable
   * @return sessionCount
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SESSION_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSessionCount() {
    return sessionCount;
  }


  @JsonProperty(JSON_PROPERTY_SESSION_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSessionCount(Integer sessionCount) {
    this.sessionCount = sessionCount;
  }


  public TickerVariable value(TickerVariableValue value) {
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TickerVariableValue getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValue(TickerVariableValue value) {
    this.value = value;
  }


  /**
   * Return true if this TickerVariable object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TickerVariable tickerVariable = (TickerVariable) o;
    return Objects.equals(this.id, tickerVariable.id) &&
        Objects.equals(this.identifier, tickerVariable.identifier) &&
        Objects.equals(this.name, tickerVariable.name) &&
        Objects.equals(this.group, tickerVariable.group) &&
        Objects.equals(this.dataType, tickerVariable.dataType) &&
        Objects.equals(this.dataFormat, tickerVariable.dataFormat) &&
        Objects.equals(this.baseVersion, tickerVariable.baseVersion) &&
        Objects.equals(this.sessionCount, tickerVariable.sessionCount) &&
        Objects.equals(this.value, tickerVariable.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, identifier, name, group, dataType, dataFormat, baseVersion, sessionCount, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TickerVariable {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    dataFormat: ").append(toIndentedString(dataFormat)).append("\n");
    sb.append("    baseVersion: ").append(toIndentedString(baseVersion)).append("\n");
    sb.append("    sessionCount: ").append(toIndentedString(sessionCount)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `identifier` to the URL query string
    if (getIdentifier() != null) {
      joiner.add(String.format("%sidentifier%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIdentifier()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `group` to the URL query string
    if (getGroup() != null) {
      joiner.add(String.format("%sgroup%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGroup()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `dataType` to the URL query string
    if (getDataType() != null) {
      joiner.add(String.format("%sdataType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getDataType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `dataFormat` to the URL query string
    if (getDataFormat() != null) {
      joiner.add(getDataFormat().toUrlQueryString(prefix + "dataFormat" + suffix));
    }

    // add `baseVersion` to the URL query string
    if (getBaseVersion() != null) {
      joiner.add(String.format("%sbaseVersion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBaseVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `sessionCount` to the URL query string
    if (getSessionCount() != null) {
      joiner.add(String.format("%ssessionCount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSessionCount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `value` to the URL query string
    if (getValue() != null) {
      joiner.add(getValue().toUrlQueryString(prefix + "value" + suffix));
    }

    return joiner.toString();
  }
}

