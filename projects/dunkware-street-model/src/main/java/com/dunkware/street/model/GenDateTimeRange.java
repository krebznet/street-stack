/*
 * Dunkware Street Model
 * Schema for Dunkware Street Model components.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dunkware.street.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.dunkware.street.model.GenDateTime;
import com.dunkware.street.model.GenTimeRange;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * GenDateTimeRange
 */
@JsonPropertyOrder({
  GenDateTimeRange.JSON_PROPERTY_START,
  GenDateTimeRange.JSON_PROPERTY_END,
  GenDateTimeRange.JSON_PROPERTY_HAS_TIME_WINDOW,
  GenDateTimeRange.JSON_PROPERTY_TIME_WINDOW
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-09T07:04:32.310666-05:00[America/Chicago]", comments = "Generator version: 7.6.0")
public class GenDateTimeRange {
  public static final String JSON_PROPERTY_START = "start";
  private GenDateTime start;

  public static final String JSON_PROPERTY_END = "end";
  private GenDateTime end;

  public static final String JSON_PROPERTY_HAS_TIME_WINDOW = "hasTimeWindow";
  private Boolean hasTimeWindow;

  public static final String JSON_PROPERTY_TIME_WINDOW = "timeWindow";
  private GenTimeRange timeWindow;

  public GenDateTimeRange() { 
  }

  public GenDateTimeRange start(GenDateTime start) {
    this.start = start;
    return this;
  }

   /**
   * Get start
   * @return start
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GenDateTime getStart() {
    return start;
  }


  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStart(GenDateTime start) {
    this.start = start;
  }


  public GenDateTimeRange end(GenDateTime end) {
    this.end = end;
    return this;
  }

   /**
   * Get end
   * @return end
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_END)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GenDateTime getEnd() {
    return end;
  }


  @JsonProperty(JSON_PROPERTY_END)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnd(GenDateTime end) {
    this.end = end;
  }


  public GenDateTimeRange hasTimeWindow(Boolean hasTimeWindow) {
    this.hasTimeWindow = hasTimeWindow;
    return this;
  }

   /**
   * Boolean indicating if a specific time window is included in the range.
   * @return hasTimeWindow
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HAS_TIME_WINDOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHasTimeWindow() {
    return hasTimeWindow;
  }


  @JsonProperty(JSON_PROPERTY_HAS_TIME_WINDOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHasTimeWindow(Boolean hasTimeWindow) {
    this.hasTimeWindow = hasTimeWindow;
  }


  public GenDateTimeRange timeWindow(GenTimeRange timeWindow) {
    this.timeWindow = timeWindow;
    return this;
  }

   /**
   * Get timeWindow
   * @return timeWindow
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIME_WINDOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public GenTimeRange getTimeWindow() {
    return timeWindow;
  }


  @JsonProperty(JSON_PROPERTY_TIME_WINDOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeWindow(GenTimeRange timeWindow) {
    this.timeWindow = timeWindow;
  }


  /**
   * Return true if this GenDateTimeRange object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenDateTimeRange genDateTimeRange = (GenDateTimeRange) o;
    return Objects.equals(this.start, genDateTimeRange.start) &&
        Objects.equals(this.end, genDateTimeRange.end) &&
        Objects.equals(this.hasTimeWindow, genDateTimeRange.hasTimeWindow) &&
        Objects.equals(this.timeWindow, genDateTimeRange.timeWindow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(start, end, hasTimeWindow, timeWindow);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenDateTimeRange {\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    hasTimeWindow: ").append(toIndentedString(hasTimeWindow)).append("\n");
    sb.append("    timeWindow: ").append(toIndentedString(timeWindow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `start` to the URL query string
    if (getStart() != null) {
      joiner.add(getStart().toUrlQueryString(prefix + "start" + suffix));
    }

    // add `end` to the URL query string
    if (getEnd() != null) {
      joiner.add(getEnd().toUrlQueryString(prefix + "end" + suffix));
    }

    // add `hasTimeWindow` to the URL query string
    if (getHasTimeWindow() != null) {
      joiner.add(String.format("%shasTimeWindow%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHasTimeWindow()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `timeWindow` to the URL query string
    if (getTimeWindow() != null) {
      joiner.add(getTimeWindow().toUrlQueryString(prefix + "timeWindow" + suffix));
    }

    return joiner.toString();
  }
}

