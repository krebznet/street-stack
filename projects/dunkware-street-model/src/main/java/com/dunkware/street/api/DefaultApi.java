/*
 * Dunkware Street Model
 * Schema for Dunkware Street Model components.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.dunkware.street.api;

import com.dunkware.street.ApiClient;
import com.dunkware.street.ApiException;
import com.dunkware.street.ApiResponse;
import com.dunkware.street.Pair;

import com.dunkware.street.model.ExchangeRef;
import com.dunkware.street.model.ExchangeSession;
import com.dunkware.street.model.TickerRef;
import com.dunkware.street.model.TickerSession;
import com.dunkware.street.model.TickerStat;
import com.dunkware.street.model.TickerVariable;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-14T03:12:48.582083-05:00[America/Chicago]", comments = "Generator version: 7.6.0")
public class DefaultApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public DefaultApi() {
    this(new ApiClient());
  }

  public DefaultApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Get all sessions for a specific exchange
   * 
   * @param exchangeId Numeric identifier of the exchange (required)
   * @return List&lt;ExchangeSession&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ExchangeSession> apiExchangesExchangeIdSessionsGet(Integer exchangeId) throws ApiException {
    ApiResponse<List<ExchangeSession>> localVarResponse = apiExchangesExchangeIdSessionsGetWithHttpInfo(exchangeId);
    return localVarResponse.getData();
  }

  /**
   * Get all sessions for a specific exchange
   * 
   * @param exchangeId Numeric identifier of the exchange (required)
   * @return ApiResponse&lt;List&lt;ExchangeSession&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<ExchangeSession>> apiExchangesExchangeIdSessionsGetWithHttpInfo(Integer exchangeId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = apiExchangesExchangeIdSessionsGetRequestBuilder(exchangeId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("apiExchangesExchangeIdSessionsGet", localVarResponse);
        }
        return new ApiResponse<List<ExchangeSession>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<ExchangeSession>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder apiExchangesExchangeIdSessionsGetRequestBuilder(Integer exchangeId) throws ApiException {
    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      throw new ApiException(400, "Missing the required parameter 'exchangeId' when calling apiExchangesExchangeIdSessionsGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/exchanges/{exchangeId}/sessions"
        .replace("{exchangeId}", ApiClient.urlEncode(exchangeId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get all tickers for a specific exchange
   * 
   * @param exchangeId Numeric identifier of the exchange (required)
   * @return List&lt;TickerRef&gt;
   * @throws ApiException if fails to make API call
   */
  public List<TickerRef> apiExchangesExchangeIdTickersGet(Integer exchangeId) throws ApiException {
    ApiResponse<List<TickerRef>> localVarResponse = apiExchangesExchangeIdTickersGetWithHttpInfo(exchangeId);
    return localVarResponse.getData();
  }

  /**
   * Get all tickers for a specific exchange
   * 
   * @param exchangeId Numeric identifier of the exchange (required)
   * @return ApiResponse&lt;List&lt;TickerRef&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<TickerRef>> apiExchangesExchangeIdTickersGetWithHttpInfo(Integer exchangeId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = apiExchangesExchangeIdTickersGetRequestBuilder(exchangeId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("apiExchangesExchangeIdTickersGet", localVarResponse);
        }
        return new ApiResponse<List<TickerRef>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<TickerRef>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder apiExchangesExchangeIdTickersGetRequestBuilder(Integer exchangeId) throws ApiException {
    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      throw new ApiException(400, "Missing the required parameter 'exchangeId' when calling apiExchangesExchangeIdTickersGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/exchanges/{exchangeId}/tickers"
        .replace("{exchangeId}", ApiClient.urlEncode(exchangeId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get all sessions for a specific ticker
   * 
   * @param exchangeId Numeric identifier of the exchange (required)
   * @param tickerId Numeric identifier of the ticker (required)
   * @return List&lt;TickerSession&gt;
   * @throws ApiException if fails to make API call
   */
  public List<TickerSession> apiExchangesExchangeIdTickersTickerIdSessionsGet(Integer exchangeId, Integer tickerId) throws ApiException {
    ApiResponse<List<TickerSession>> localVarResponse = apiExchangesExchangeIdTickersTickerIdSessionsGetWithHttpInfo(exchangeId, tickerId);
    return localVarResponse.getData();
  }

  /**
   * Get all sessions for a specific ticker
   * 
   * @param exchangeId Numeric identifier of the exchange (required)
   * @param tickerId Numeric identifier of the ticker (required)
   * @return ApiResponse&lt;List&lt;TickerSession&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<TickerSession>> apiExchangesExchangeIdTickersTickerIdSessionsGetWithHttpInfo(Integer exchangeId, Integer tickerId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = apiExchangesExchangeIdTickersTickerIdSessionsGetRequestBuilder(exchangeId, tickerId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("apiExchangesExchangeIdTickersTickerIdSessionsGet", localVarResponse);
        }
        return new ApiResponse<List<TickerSession>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<TickerSession>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder apiExchangesExchangeIdTickersTickerIdSessionsGetRequestBuilder(Integer exchangeId, Integer tickerId) throws ApiException {
    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      throw new ApiException(400, "Missing the required parameter 'exchangeId' when calling apiExchangesExchangeIdTickersTickerIdSessionsGet");
    }
    // verify the required parameter 'tickerId' is set
    if (tickerId == null) {
      throw new ApiException(400, "Missing the required parameter 'tickerId' when calling apiExchangesExchangeIdTickersTickerIdSessionsGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/exchanges/{exchangeId}/tickers/{tickerId}/sessions"
        .replace("{exchangeId}", ApiClient.urlEncode(exchangeId.toString()))
        .replace("{tickerId}", ApiClient.urlEncode(tickerId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get all stats for a specific ticker session
   * 
   * @param exchangeId Numeric identifier of the exchange (required)
   * @param tickerId Numeric identifier of the ticker (required)
   * @param sessionId Numeric identifier of the ticker session (required)
   * @return List&lt;TickerStat&gt;
   * @throws ApiException if fails to make API call
   */
  public List<TickerStat> apiExchangesExchangeIdTickersTickerIdSessionsSessionIdStatsGet(Integer exchangeId, Integer tickerId, Integer sessionId) throws ApiException {
    ApiResponse<List<TickerStat>> localVarResponse = apiExchangesExchangeIdTickersTickerIdSessionsSessionIdStatsGetWithHttpInfo(exchangeId, tickerId, sessionId);
    return localVarResponse.getData();
  }

  /**
   * Get all stats for a specific ticker session
   * 
   * @param exchangeId Numeric identifier of the exchange (required)
   * @param tickerId Numeric identifier of the ticker (required)
   * @param sessionId Numeric identifier of the ticker session (required)
   * @return ApiResponse&lt;List&lt;TickerStat&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<TickerStat>> apiExchangesExchangeIdTickersTickerIdSessionsSessionIdStatsGetWithHttpInfo(Integer exchangeId, Integer tickerId, Integer sessionId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = apiExchangesExchangeIdTickersTickerIdSessionsSessionIdStatsGetRequestBuilder(exchangeId, tickerId, sessionId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("apiExchangesExchangeIdTickersTickerIdSessionsSessionIdStatsGet", localVarResponse);
        }
        return new ApiResponse<List<TickerStat>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<TickerStat>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder apiExchangesExchangeIdTickersTickerIdSessionsSessionIdStatsGetRequestBuilder(Integer exchangeId, Integer tickerId, Integer sessionId) throws ApiException {
    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      throw new ApiException(400, "Missing the required parameter 'exchangeId' when calling apiExchangesExchangeIdTickersTickerIdSessionsSessionIdStatsGet");
    }
    // verify the required parameter 'tickerId' is set
    if (tickerId == null) {
      throw new ApiException(400, "Missing the required parameter 'tickerId' when calling apiExchangesExchangeIdTickersTickerIdSessionsSessionIdStatsGet");
    }
    // verify the required parameter 'sessionId' is set
    if (sessionId == null) {
      throw new ApiException(400, "Missing the required parameter 'sessionId' when calling apiExchangesExchangeIdTickersTickerIdSessionsSessionIdStatsGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/exchanges/{exchangeId}/tickers/{tickerId}/sessions/{sessionId}/stats"
        .replace("{exchangeId}", ApiClient.urlEncode(exchangeId.toString()))
        .replace("{tickerId}", ApiClient.urlEncode(tickerId.toString()))
        .replace("{sessionId}", ApiClient.urlEncode(sessionId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get a specific stat for a specific exchange ticker
   * 
   * @param exchangeId Numeric identifier of the exchange (required)
   * @param tickerId Numeric identifier of the ticker (required)
   * @param statId Numeric identifier of the stat (required)
   * @return TickerStat
   * @throws ApiException if fails to make API call
   */
  public TickerStat apiExchangesExchangeIdTickersTickerIdStatsStatIdGet(Integer exchangeId, Integer tickerId, Integer statId) throws ApiException {
    ApiResponse<TickerStat> localVarResponse = apiExchangesExchangeIdTickersTickerIdStatsStatIdGetWithHttpInfo(exchangeId, tickerId, statId);
    return localVarResponse.getData();
  }

  /**
   * Get a specific stat for a specific exchange ticker
   * 
   * @param exchangeId Numeric identifier of the exchange (required)
   * @param tickerId Numeric identifier of the ticker (required)
   * @param statId Numeric identifier of the stat (required)
   * @return ApiResponse&lt;TickerStat&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<TickerStat> apiExchangesExchangeIdTickersTickerIdStatsStatIdGetWithHttpInfo(Integer exchangeId, Integer tickerId, Integer statId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = apiExchangesExchangeIdTickersTickerIdStatsStatIdGetRequestBuilder(exchangeId, tickerId, statId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("apiExchangesExchangeIdTickersTickerIdStatsStatIdGet", localVarResponse);
        }
        return new ApiResponse<TickerStat>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<TickerStat>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder apiExchangesExchangeIdTickersTickerIdStatsStatIdGetRequestBuilder(Integer exchangeId, Integer tickerId, Integer statId) throws ApiException {
    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      throw new ApiException(400, "Missing the required parameter 'exchangeId' when calling apiExchangesExchangeIdTickersTickerIdStatsStatIdGet");
    }
    // verify the required parameter 'tickerId' is set
    if (tickerId == null) {
      throw new ApiException(400, "Missing the required parameter 'tickerId' when calling apiExchangesExchangeIdTickersTickerIdStatsStatIdGet");
    }
    // verify the required parameter 'statId' is set
    if (statId == null) {
      throw new ApiException(400, "Missing the required parameter 'statId' when calling apiExchangesExchangeIdTickersTickerIdStatsStatIdGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/exchanges/{exchangeId}/tickers/{tickerId}/stats/{statId}"
        .replace("{exchangeId}", ApiClient.urlEncode(exchangeId.toString()))
        .replace("{tickerId}", ApiClient.urlEncode(tickerId.toString()))
        .replace("{statId}", ApiClient.urlEncode(statId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get all variables for a specific ticker
   * 
   * @param exchangeId Numeric identifier of the exchange (required)
   * @param tickerId Numeric identifier of the ticker (required)
   * @return List&lt;TickerVariable&gt;
   * @throws ApiException if fails to make API call
   */
  public List<TickerVariable> apiExchangesExchangeIdTickersTickerIdVariablesGet(Integer exchangeId, Integer tickerId) throws ApiException {
    ApiResponse<List<TickerVariable>> localVarResponse = apiExchangesExchangeIdTickersTickerIdVariablesGetWithHttpInfo(exchangeId, tickerId);
    return localVarResponse.getData();
  }

  /**
   * Get all variables for a specific ticker
   * 
   * @param exchangeId Numeric identifier of the exchange (required)
   * @param tickerId Numeric identifier of the ticker (required)
   * @return ApiResponse&lt;List&lt;TickerVariable&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<TickerVariable>> apiExchangesExchangeIdTickersTickerIdVariablesGetWithHttpInfo(Integer exchangeId, Integer tickerId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = apiExchangesExchangeIdTickersTickerIdVariablesGetRequestBuilder(exchangeId, tickerId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("apiExchangesExchangeIdTickersTickerIdVariablesGet", localVarResponse);
        }
        return new ApiResponse<List<TickerVariable>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<TickerVariable>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder apiExchangesExchangeIdTickersTickerIdVariablesGetRequestBuilder(Integer exchangeId, Integer tickerId) throws ApiException {
    // verify the required parameter 'exchangeId' is set
    if (exchangeId == null) {
      throw new ApiException(400, "Missing the required parameter 'exchangeId' when calling apiExchangesExchangeIdTickersTickerIdVariablesGet");
    }
    // verify the required parameter 'tickerId' is set
    if (tickerId == null) {
      throw new ApiException(400, "Missing the required parameter 'tickerId' when calling apiExchangesExchangeIdTickersTickerIdVariablesGet");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/exchanges/{exchangeId}/tickers/{tickerId}/variables"
        .replace("{exchangeId}", ApiClient.urlEncode(exchangeId.toString()))
        .replace("{tickerId}", ApiClient.urlEncode(tickerId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get a list of all exchanges
   * 
   * @return List&lt;ExchangeRef&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ExchangeRef> apiExchangesGet() throws ApiException {
    ApiResponse<List<ExchangeRef>> localVarResponse = apiExchangesGetWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * Get a list of all exchanges
   * 
   * @return ApiResponse&lt;List&lt;ExchangeRef&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<ExchangeRef>> apiExchangesGetWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = apiExchangesGetRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("apiExchangesGet", localVarResponse);
        }
        return new ApiResponse<List<ExchangeRef>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<ExchangeRef>>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder apiExchangesGetRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/exchanges";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
