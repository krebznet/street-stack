/*
 * Dunkware Street Model
 * Schema for Dunkware Street Model components.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dunkware.street.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.dunkware.street.model.GenDate;
import com.dunkware.street.model.GenTime;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ExchangeSession
 */
@JsonPropertyOrder({
  ExchangeSession.JSON_PROPERTY_ID,
  ExchangeSession.JSON_PROPERTY_EXCHANGE_ID,
  ExchangeSession.JSON_PROPERTY_START_TIME,
  ExchangeSession.JSON_PROPERTY_STOP_TIME,
  ExchangeSession.JSON_PROPERTY_DATE,
  ExchangeSession.JSON_PROPERTY_ENTITY_COUNT,
  ExchangeSession.JSON_PROPERTY_VERSION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-18T05:33:44.639891-05:00[America/Chicago]", comments = "Generator version: 7.6.0")
public class ExchangeSession {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_EXCHANGE_ID = "exchangeId";
  private Integer exchangeId;

  public static final String JSON_PROPERTY_START_TIME = "startTime";
  private GenTime startTime;

  public static final String JSON_PROPERTY_STOP_TIME = "stopTime";
  private GenTime stopTime;

  public static final String JSON_PROPERTY_DATE = "date";
  private GenDate date;

  public static final String JSON_PROPERTY_ENTITY_COUNT = "entityCount";
  private Integer entityCount;

  public static final String JSON_PROPERTY_VERSION = "version";
  private Double version;

  public ExchangeSession() { 
  }

  public ExchangeSession id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Numeric identifier for the exchange session
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Integer id) {
    this.id = id;
  }


  public ExchangeSession exchangeId(Integer exchangeId) {
    this.exchangeId = exchangeId;
    return this;
  }

   /**
   * Numeric identifier for the exchange
   * @return exchangeId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXCHANGE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getExchangeId() {
    return exchangeId;
  }


  @JsonProperty(JSON_PROPERTY_EXCHANGE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExchangeId(Integer exchangeId) {
    this.exchangeId = exchangeId;
  }


  public ExchangeSession startTime(GenTime startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GenTime getStartTime() {
    return startTime;
  }


  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStartTime(GenTime startTime) {
    this.startTime = startTime;
  }


  public ExchangeSession stopTime(GenTime stopTime) {
    this.stopTime = stopTime;
    return this;
  }

   /**
   * Get stopTime
   * @return stopTime
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STOP_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GenTime getStopTime() {
    return stopTime;
  }


  @JsonProperty(JSON_PROPERTY_STOP_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStopTime(GenTime stopTime) {
    this.stopTime = stopTime;
  }


  public ExchangeSession date(GenDate date) {
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GenDate getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDate(GenDate date) {
    this.date = date;
  }


  public ExchangeSession entityCount(Integer entityCount) {
    this.entityCount = entityCount;
    return this;
  }

   /**
   * Number of entities associated with the session
   * @return entityCount
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ENTITY_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getEntityCount() {
    return entityCount;
  }


  @JsonProperty(JSON_PROPERTY_ENTITY_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEntityCount(Integer entityCount) {
    this.entityCount = entityCount;
  }


  public ExchangeSession version(Double version) {
    this.version = version;
    return this;
  }

   /**
   * Version of the exchange session
   * @return version
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersion(Double version) {
    this.version = version;
  }


  /**
   * Return true if this ExchangeSession object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExchangeSession exchangeSession = (ExchangeSession) o;
    return Objects.equals(this.id, exchangeSession.id) &&
        Objects.equals(this.exchangeId, exchangeSession.exchangeId) &&
        Objects.equals(this.startTime, exchangeSession.startTime) &&
        Objects.equals(this.stopTime, exchangeSession.stopTime) &&
        Objects.equals(this.date, exchangeSession.date) &&
        Objects.equals(this.entityCount, exchangeSession.entityCount) &&
        Objects.equals(this.version, exchangeSession.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, exchangeId, startTime, stopTime, date, entityCount, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExchangeSession {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    exchangeId: ").append(toIndentedString(exchangeId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    stopTime: ").append(toIndentedString(stopTime)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    entityCount: ").append(toIndentedString(entityCount)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `exchangeId` to the URL query string
    if (getExchangeId() != null) {
      joiner.add(String.format("%sexchangeId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExchangeId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `startTime` to the URL query string
    if (getStartTime() != null) {
      joiner.add(getStartTime().toUrlQueryString(prefix + "startTime" + suffix));
    }

    // add `stopTime` to the URL query string
    if (getStopTime() != null) {
      joiner.add(getStopTime().toUrlQueryString(prefix + "stopTime" + suffix));
    }

    // add `date` to the URL query string
    if (getDate() != null) {
      joiner.add(getDate().toUrlQueryString(prefix + "date" + suffix));
    }

    // add `entityCount` to the URL query string
    if (getEntityCount() != null) {
      joiner.add(String.format("%sentityCount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEntityCount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `version` to the URL query string
    if (getVersion() != null) {
      joiner.add(String.format("%sversion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

