/*
 * Dunkware Street Model
 * Schema for Dunkware Street Model components.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dunkware.street.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TickerRef
 */
@JsonPropertyOrder({
  TickerRef.JSON_PROPERTY_ID,
  TickerRef.JSON_PROPERTY_IDENTIFIER,
  TickerRef.JSON_PROPERTY_EXCHANGE,
  TickerRef.JSON_PROPERTY_NAME,
  TickerRef.JSON_PROPERTY_SESSION_COUNT,
  TickerRef.JSON_PROPERTY_BASE_VERSION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-10T02:11:27.513314-05:00[America/Chicago]", comments = "Generator version: 7.6.0")
public class TickerRef {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_IDENTIFIER = "identifier";
  private String identifier;

  public static final String JSON_PROPERTY_EXCHANGE = "exchange";
  private Integer exchange;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_SESSION_COUNT = "sessionCount";
  private Integer sessionCount;

  public static final String JSON_PROPERTY_BASE_VERSION = "baseVersion";
  private Double baseVersion;

  public TickerRef() { 
  }

  public TickerRef id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Numeric identifier for the ticker
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Integer id) {
    this.id = id;
  }


  public TickerRef identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * String identifier for the ticker
   * @return identifier
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIdentifier() {
    return identifier;
  }


  @JsonProperty(JSON_PROPERTY_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public TickerRef exchange(Integer exchange) {
    this.exchange = exchange;
    return this;
  }

   /**
   * Numeric identifier for the exchange
   * @return exchange
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXCHANGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getExchange() {
    return exchange;
  }


  @JsonProperty(JSON_PROPERTY_EXCHANGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExchange(Integer exchange) {
    this.exchange = exchange;
  }


  public TickerRef name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the ticker
   * @return name
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public TickerRef sessionCount(Integer sessionCount) {
    this.sessionCount = sessionCount;
    return this;
  }

   /**
   * Number of sessions associated with the ticker
   * @return sessionCount
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SESSION_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSessionCount() {
    return sessionCount;
  }


  @JsonProperty(JSON_PROPERTY_SESSION_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSessionCount(Integer sessionCount) {
    this.sessionCount = sessionCount;
  }


  public TickerRef baseVersion(Double baseVersion) {
    this.baseVersion = baseVersion;
    return this;
  }

   /**
   * Base version of the ticker
   * @return baseVersion
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BASE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getBaseVersion() {
    return baseVersion;
  }


  @JsonProperty(JSON_PROPERTY_BASE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBaseVersion(Double baseVersion) {
    this.baseVersion = baseVersion;
  }


  /**
   * Return true if this TickerRef object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TickerRef tickerRef = (TickerRef) o;
    return Objects.equals(this.id, tickerRef.id) &&
        Objects.equals(this.identifier, tickerRef.identifier) &&
        Objects.equals(this.exchange, tickerRef.exchange) &&
        Objects.equals(this.name, tickerRef.name) &&
        Objects.equals(this.sessionCount, tickerRef.sessionCount) &&
        Objects.equals(this.baseVersion, tickerRef.baseVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, identifier, exchange, name, sessionCount, baseVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TickerRef {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sessionCount: ").append(toIndentedString(sessionCount)).append("\n");
    sb.append("    baseVersion: ").append(toIndentedString(baseVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `identifier` to the URL query string
    if (getIdentifier() != null) {
      joiner.add(String.format("%sidentifier%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIdentifier()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `exchange` to the URL query string
    if (getExchange() != null) {
      joiner.add(String.format("%sexchange%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExchange()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `sessionCount` to the URL query string
    if (getSessionCount() != null) {
      joiner.add(String.format("%ssessionCount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSessionCount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `baseVersion` to the URL query string
    if (getBaseVersion() != null) {
      joiner.add(String.format("%sbaseVersion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBaseVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

