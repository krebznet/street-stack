/*
 * Dunkware Street Model
 * Schema for Dunkware Street Model components.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dunkware.street.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * GenDataFormat
 */
@JsonPropertyOrder({
  GenDataFormat.JSON_PROPERTY_FORMAT_TYPE,
  GenDataFormat.JSON_PROPERTY_PRECISION,
  GenDataFormat.JSON_PROPERTY_TRUNCATE_LENGTH,
  GenDataFormat.JSON_PROPERTY_CURRENCY_SYMBOL,
  GenDataFormat.JSON_PROPERTY_ABBREVIATION_STYLE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-26T16:39:23.088112-05:00[America/Chicago]", comments = "Generator version: 7.6.0")
public class GenDataFormat {
  /**
   * The type of data formatting to apply.
   */
  public enum FormatTypeEnum {
    ROUNDTODECIMALPLACES("roundToDecimalPlaces"),
    
    DISPLAYASPERCENT("displayAsPercent"),
    
    ADDCOMMAS("addCommas"),
    
    TRUNCATESTRING("truncateString"),
    
    CURRENCY("currency"),
    
    ABBREVIATENUMBER("abbreviateNumber");

    private String value;

    FormatTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FormatTypeEnum fromValue(String value) {
      for (FormatTypeEnum b : FormatTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FORMAT_TYPE = "formatType";
  private FormatTypeEnum formatType;

  public static final String JSON_PROPERTY_PRECISION = "precision";
  private Integer precision;

  public static final String JSON_PROPERTY_TRUNCATE_LENGTH = "truncateLength";
  private Integer truncateLength;

  public static final String JSON_PROPERTY_CURRENCY_SYMBOL = "currencySymbol";
  private String currencySymbol;

  public static final String JSON_PROPERTY_ABBREVIATION_STYLE = "abbreviationStyle";
  private String abbreviationStyle;

  public GenDataFormat() { 
  }

  public GenDataFormat formatType(FormatTypeEnum formatType) {
    this.formatType = formatType;
    return this;
  }

   /**
   * The type of data formatting to apply.
   * @return formatType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FORMAT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FormatTypeEnum getFormatType() {
    return formatType;
  }


  @JsonProperty(JSON_PROPERTY_FORMAT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFormatType(FormatTypeEnum formatType) {
    this.formatType = formatType;
  }


  public GenDataFormat precision(Integer precision) {
    this.precision = precision;
    return this;
  }

   /**
   * Number of decimal places for rounding (used with roundToDecimalPlaces).
   * @return precision
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRECISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPrecision() {
    return precision;
  }


  @JsonProperty(JSON_PROPERTY_PRECISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrecision(Integer precision) {
    this.precision = precision;
  }


  public GenDataFormat truncateLength(Integer truncateLength) {
    this.truncateLength = truncateLength;
    return this;
  }

   /**
   * Maximum length for truncating strings (used with truncateString).
   * @return truncateLength
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRUNCATE_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTruncateLength() {
    return truncateLength;
  }


  @JsonProperty(JSON_PROPERTY_TRUNCATE_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTruncateLength(Integer truncateLength) {
    this.truncateLength = truncateLength;
  }


  public GenDataFormat currencySymbol(String currencySymbol) {
    this.currencySymbol = currencySymbol;
    return this;
  }

   /**
   * Symbol for currency formatting (used with currency).
   * @return currencySymbol
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENCY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrencySymbol() {
    return currencySymbol;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrencySymbol(String currencySymbol) {
    this.currencySymbol = currencySymbol;
  }


  public GenDataFormat abbreviationStyle(String abbreviationStyle) {
    this.abbreviationStyle = abbreviationStyle;
    return this;
  }

   /**
   * Style for abbreviating large numbers (used with abbreviateNumber).
   * @return abbreviationStyle
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ABBREVIATION_STYLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAbbreviationStyle() {
    return abbreviationStyle;
  }


  @JsonProperty(JSON_PROPERTY_ABBREVIATION_STYLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAbbreviationStyle(String abbreviationStyle) {
    this.abbreviationStyle = abbreviationStyle;
  }


  /**
   * Return true if this GenDataFormat object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenDataFormat genDataFormat = (GenDataFormat) o;
    return Objects.equals(this.formatType, genDataFormat.formatType) &&
        Objects.equals(this.precision, genDataFormat.precision) &&
        Objects.equals(this.truncateLength, genDataFormat.truncateLength) &&
        Objects.equals(this.currencySymbol, genDataFormat.currencySymbol) &&
        Objects.equals(this.abbreviationStyle, genDataFormat.abbreviationStyle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(formatType, precision, truncateLength, currencySymbol, abbreviationStyle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenDataFormat {\n");
    sb.append("    formatType: ").append(toIndentedString(formatType)).append("\n");
    sb.append("    precision: ").append(toIndentedString(precision)).append("\n");
    sb.append("    truncateLength: ").append(toIndentedString(truncateLength)).append("\n");
    sb.append("    currencySymbol: ").append(toIndentedString(currencySymbol)).append("\n");
    sb.append("    abbreviationStyle: ").append(toIndentedString(abbreviationStyle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `formatType` to the URL query string
    if (getFormatType() != null) {
      joiner.add(String.format("%sformatType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFormatType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `precision` to the URL query string
    if (getPrecision() != null) {
      joiner.add(String.format("%sprecision%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPrecision()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `truncateLength` to the URL query string
    if (getTruncateLength() != null) {
      joiner.add(String.format("%struncateLength%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTruncateLength()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `currencySymbol` to the URL query string
    if (getCurrencySymbol() != null) {
      joiner.add(String.format("%scurrencySymbol%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCurrencySymbol()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `abbreviationStyle` to the URL query string
    if (getAbbreviationStyle() != null) {
      joiner.add(String.format("%sabbreviationStyle%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAbbreviationStyle()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

