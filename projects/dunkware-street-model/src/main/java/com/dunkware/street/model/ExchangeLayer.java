/*
 * Dunkware Street Model
 * Schema for Dunkware Street Model components.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dunkware.street.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.dunkware.street.model.GenDate;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * ExchangeLayer
 */
@JsonPropertyOrder({
  ExchangeLayer.JSON_PROPERTY_ID,
  ExchangeLayer.JSON_PROPERTY_EXCHANGE_ID,
  ExchangeLayer.JSON_PROPERTY_INDEX_ID,
  ExchangeLayer.JSON_PROPERTY_RELEASE_DATE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-10T02:50:26.154173-05:00[America/Chicago]", comments = "Generator version: 7.6.0")
public class ExchangeLayer {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_EXCHANGE_ID = "exchangeId";
  private Integer exchangeId;

  public static final String JSON_PROPERTY_INDEX_ID = "indexId";
  private Integer indexId;

  public static final String JSON_PROPERTY_RELEASE_DATE = "releaseDate";
  private GenDate releaseDate;

  public ExchangeLayer() { 
  }

  public ExchangeLayer id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Numeric identifier for the exchange layer
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Integer id) {
    this.id = id;
  }


  public ExchangeLayer exchangeId(Integer exchangeId) {
    this.exchangeId = exchangeId;
    return this;
  }

   /**
   * Numeric identifier for the exchange
   * @return exchangeId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXCHANGE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getExchangeId() {
    return exchangeId;
  }


  @JsonProperty(JSON_PROPERTY_EXCHANGE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExchangeId(Integer exchangeId) {
    this.exchangeId = exchangeId;
  }


  public ExchangeLayer indexId(Integer indexId) {
    this.indexId = indexId;
    return this;
  }

   /**
   * Numeric identifier for the index
   * @return indexId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INDEX_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getIndexId() {
    return indexId;
  }


  @JsonProperty(JSON_PROPERTY_INDEX_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIndexId(Integer indexId) {
    this.indexId = indexId;
  }


  public ExchangeLayer releaseDate(GenDate releaseDate) {
    this.releaseDate = releaseDate;
    return this;
  }

   /**
   * Get releaseDate
   * @return releaseDate
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RELEASE_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GenDate getReleaseDate() {
    return releaseDate;
  }


  @JsonProperty(JSON_PROPERTY_RELEASE_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReleaseDate(GenDate releaseDate) {
    this.releaseDate = releaseDate;
  }


  /**
   * Return true if this ExchangeLayer object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExchangeLayer exchangeLayer = (ExchangeLayer) o;
    return Objects.equals(this.id, exchangeLayer.id) &&
        Objects.equals(this.exchangeId, exchangeLayer.exchangeId) &&
        Objects.equals(this.indexId, exchangeLayer.indexId) &&
        Objects.equals(this.releaseDate, exchangeLayer.releaseDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, exchangeId, indexId, releaseDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExchangeLayer {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    exchangeId: ").append(toIndentedString(exchangeId)).append("\n");
    sb.append("    indexId: ").append(toIndentedString(indexId)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `exchangeId` to the URL query string
    if (getExchangeId() != null) {
      joiner.add(String.format("%sexchangeId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExchangeId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `indexId` to the URL query string
    if (getIndexId() != null) {
      joiner.add(String.format("%sindexId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIndexId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `releaseDate` to the URL query string
    if (getReleaseDate() != null) {
      joiner.add(getReleaseDate().toUrlQueryString(prefix + "releaseDate" + suffix));
    }

    return joiner.toString();
  }
}

