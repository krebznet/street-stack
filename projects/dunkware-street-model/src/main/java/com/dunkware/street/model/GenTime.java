/*
 * Dunkware Street Model
 * Schema for Dunkware Street Model components.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dunkware.street.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * GenTime
 */
@JsonPropertyOrder({
  GenTime.JSON_PROPERTY_HOUR,
  GenTime.JSON_PROPERTY_MINUTE,
  GenTime.JSON_PROPERTY_SECOND,
  GenTime.JSON_PROPERTY_TIME_ZONE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-04T00:15:25.695743-05:00[America/Chicago]", comments = "Generator version: 7.6.0")
public class GenTime {
  public static final String JSON_PROPERTY_HOUR = "hour";
  private Integer hour;

  public static final String JSON_PROPERTY_MINUTE = "minute";
  private Integer minute;

  public static final String JSON_PROPERTY_SECOND = "second";
  private Integer second;

  public static final String JSON_PROPERTY_TIME_ZONE = "timeZone";
  private String timeZone;

  public GenTime() { 
  }

  public GenTime hour(Integer hour) {
    this.hour = hour;
    return this;
  }

   /**
   * The hour component of the time.
   * @return hour
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HOUR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getHour() {
    return hour;
  }


  @JsonProperty(JSON_PROPERTY_HOUR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHour(Integer hour) {
    this.hour = hour;
  }


  public GenTime minute(Integer minute) {
    this.minute = minute;
    return this;
  }

   /**
   * The minute component of the time.
   * @return minute
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MINUTE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMinute() {
    return minute;
  }


  @JsonProperty(JSON_PROPERTY_MINUTE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMinute(Integer minute) {
    this.minute = minute;
  }


  public GenTime second(Integer second) {
    this.second = second;
    return this;
  }

   /**
   * The second component of the time.
   * @return second
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SECOND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSecond() {
    return second;
  }


  @JsonProperty(JSON_PROPERTY_SECOND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSecond(Integer second) {
    this.second = second;
  }


  public GenTime timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

   /**
   * Optional string representing the time zone.
   * @return timeZone
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIME_ZONE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTimeZone() {
    return timeZone;
  }


  @JsonProperty(JSON_PROPERTY_TIME_ZONE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  /**
   * Return true if this GenTime object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenTime genTime = (GenTime) o;
    return Objects.equals(this.hour, genTime.hour) &&
        Objects.equals(this.minute, genTime.minute) &&
        Objects.equals(this.second, genTime.second) &&
        Objects.equals(this.timeZone, genTime.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hour, minute, second, timeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenTime {\n");
    sb.append("    hour: ").append(toIndentedString(hour)).append("\n");
    sb.append("    minute: ").append(toIndentedString(minute)).append("\n");
    sb.append("    second: ").append(toIndentedString(second)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `hour` to the URL query string
    if (getHour() != null) {
      joiner.add(String.format("%shour%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHour()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `minute` to the URL query string
    if (getMinute() != null) {
      joiner.add(String.format("%sminute%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMinute()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `second` to the URL query string
    if (getSecond() != null) {
      joiner.add(String.format("%ssecond%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSecond()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `timeZone` to the URL query string
    if (getTimeZone() != null) {
      joiner.add(String.format("%stimeZone%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTimeZone()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

