/*
 * Dunkware Street Model
 * Schema for Dunkware Street Model components.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dunkware.street.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.dunkware.street.model.GenTime;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TickerStat
 */
@JsonPropertyOrder({
  TickerStat.JSON_PROPERTY_STAT_ID,
  TickerStat.JSON_PROPERTY_STAT_NAME,
  TickerStat.JSON_PROPERTY_TICKER_ID,
  TickerStat.JSON_PROPERTY_EXCHANGE_ID,
  TickerStat.JSON_PROPERTY_ELEMENT_ID,
  TickerStat.JSON_PROPERTY_STAT_VALUE,
  TickerStat.JSON_PROPERTY_TIME
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-09T07:04:32.310666-05:00[America/Chicago]", comments = "Generator version: 7.6.0")
public class TickerStat {
  public static final String JSON_PROPERTY_STAT_ID = "statId";
  private Integer statId;

  public static final String JSON_PROPERTY_STAT_NAME = "statName";
  private String statName;

  public static final String JSON_PROPERTY_TICKER_ID = "tickerId";
  private Integer tickerId;

  public static final String JSON_PROPERTY_EXCHANGE_ID = "exchangeId";
  private Integer exchangeId;

  public static final String JSON_PROPERTY_ELEMENT_ID = "elementId";
  private Integer elementId;

  public static final String JSON_PROPERTY_STAT_VALUE = "statValue";
  private Double statValue;

  public static final String JSON_PROPERTY_TIME = "time";
  private GenTime time;

  public TickerStat() { 
  }

  public TickerStat statId(Integer statId) {
    this.statId = statId;
    return this;
  }

   /**
   * Numeric identifier for the statistic
   * @return statId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STAT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getStatId() {
    return statId;
  }


  @JsonProperty(JSON_PROPERTY_STAT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatId(Integer statId) {
    this.statId = statId;
  }


  public TickerStat statName(String statName) {
    this.statName = statName;
    return this;
  }

   /**
   * Name of the statistic
   * @return statName
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STAT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getStatName() {
    return statName;
  }


  @JsonProperty(JSON_PROPERTY_STAT_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatName(String statName) {
    this.statName = statName;
  }


  public TickerStat tickerId(Integer tickerId) {
    this.tickerId = tickerId;
    return this;
  }

   /**
   * Numeric identifier for the ticker
   * @return tickerId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TICKER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTickerId() {
    return tickerId;
  }


  @JsonProperty(JSON_PROPERTY_TICKER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTickerId(Integer tickerId) {
    this.tickerId = tickerId;
  }


  public TickerStat exchangeId(Integer exchangeId) {
    this.exchangeId = exchangeId;
    return this;
  }

   /**
   * Numeric identifier for the exchange
   * @return exchangeId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXCHANGE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getExchangeId() {
    return exchangeId;
  }


  @JsonProperty(JSON_PROPERTY_EXCHANGE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExchangeId(Integer exchangeId) {
    this.exchangeId = exchangeId;
  }


  public TickerStat elementId(Integer elementId) {
    this.elementId = elementId;
    return this;
  }

   /**
   * Numeric identifier for the element
   * @return elementId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ELEMENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getElementId() {
    return elementId;
  }


  @JsonProperty(JSON_PROPERTY_ELEMENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setElementId(Integer elementId) {
    this.elementId = elementId;
  }


  public TickerStat statValue(Double statValue) {
    this.statValue = statValue;
    return this;
  }

   /**
   * Value of the statistic
   * @return statValue
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STAT_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getStatValue() {
    return statValue;
  }


  @JsonProperty(JSON_PROPERTY_STAT_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatValue(Double statValue) {
    this.statValue = statValue;
  }


  public TickerStat time(GenTime time) {
    this.time = time;
    return this;
  }

   /**
   * Get time
   * @return time
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public GenTime getTime() {
    return time;
  }


  @JsonProperty(JSON_PROPERTY_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTime(GenTime time) {
    this.time = time;
  }


  /**
   * Return true if this TickerStat object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TickerStat tickerStat = (TickerStat) o;
    return Objects.equals(this.statId, tickerStat.statId) &&
        Objects.equals(this.statName, tickerStat.statName) &&
        Objects.equals(this.tickerId, tickerStat.tickerId) &&
        Objects.equals(this.exchangeId, tickerStat.exchangeId) &&
        Objects.equals(this.elementId, tickerStat.elementId) &&
        Objects.equals(this.statValue, tickerStat.statValue) &&
        Objects.equals(this.time, tickerStat.time);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statId, statName, tickerId, exchangeId, elementId, statValue, time);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TickerStat {\n");
    sb.append("    statId: ").append(toIndentedString(statId)).append("\n");
    sb.append("    statName: ").append(toIndentedString(statName)).append("\n");
    sb.append("    tickerId: ").append(toIndentedString(tickerId)).append("\n");
    sb.append("    exchangeId: ").append(toIndentedString(exchangeId)).append("\n");
    sb.append("    elementId: ").append(toIndentedString(elementId)).append("\n");
    sb.append("    statValue: ").append(toIndentedString(statValue)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `statId` to the URL query string
    if (getStatId() != null) {
      joiner.add(String.format("%sstatId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `statName` to the URL query string
    if (getStatName() != null) {
      joiner.add(String.format("%sstatName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `tickerId` to the URL query string
    if (getTickerId() != null) {
      joiner.add(String.format("%stickerId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTickerId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `exchangeId` to the URL query string
    if (getExchangeId() != null) {
      joiner.add(String.format("%sexchangeId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExchangeId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `elementId` to the URL query string
    if (getElementId() != null) {
      joiner.add(String.format("%selementId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getElementId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `statValue` to the URL query string
    if (getStatValue() != null) {
      joiner.add(String.format("%sstatValue%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatValue()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `time` to the URL query string
    if (getTime() != null) {
      joiner.add(getTime().toUrlQueryString(prefix + "time" + suffix));
    }

    return joiner.toString();
  }
}

