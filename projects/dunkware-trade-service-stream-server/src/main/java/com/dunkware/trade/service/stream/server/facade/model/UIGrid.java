/*
 * Dunkware Street Model
 * Schema for Dunkware Street Model components.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dunkware.trade.service.stream.server.facade.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * UIGrid
 */
@JsonPropertyOrder({
  UIGrid.JSON_PROPERTY_ID,
  UIGrid.JSON_PROPERTY_COLUMNS,
  UIGrid.JSON_PROPERTY_DATA,
  UIGrid.JSON_PROPERTY_PAGINATION,
  UIGrid.JSON_PROPERTY_SORTABLE,
  UIGrid.JSON_PROPERTY_FILTERABLE,
  UIGrid.JSON_PROPERTY_EDITABLE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-09T00:50:10.403226-05:00[America/Chicago]", comments = "Generator version: 7.6.0")
public class UIGrid {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_COLUMNS = "columns";
  private List<UIGridColumn> columns = new ArrayList<>();

  public static final String JSON_PROPERTY_DATA = "data";
  private List<Object> data = new ArrayList<>();

  public static final String JSON_PROPERTY_PAGINATION = "pagination";
  private PaginationConfig pagination;

  public static final String JSON_PROPERTY_SORTABLE = "sortable";
  private Boolean sortable;

  public static final String JSON_PROPERTY_FILTERABLE = "filterable";
  private Boolean filterable;

  public static final String JSON_PROPERTY_EDITABLE = "editable";
  private Boolean editable;

  public UIGrid() { 
  }

  public UIGrid id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Unique identifier for the grid instance.
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public UIGrid columns(List<UIGridColumn> columns) {
    this.columns = columns;
    return this;
  }

  public UIGrid addColumnsItem(UIGridColumn columnsItem) {
    if (this.columns == null) {
      this.columns = new ArrayList<>();
    }
    this.columns.add(columnsItem);
    return this;
  }

   /**
   * Get columns
   * @return columns
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COLUMNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<UIGridColumn> getColumns() {
    return columns;
  }


  @JsonProperty(JSON_PROPERTY_COLUMNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColumns(List<UIGridColumn> columns) {
    this.columns = columns;
  }


  public UIGrid data(List<Object> data) {
    this.data = data;
    return this;
  }

  public UIGrid addDataItem(Object dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Object> getData() {
    return data;
  }


  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setData(List<Object> data) {
    this.data = data;
  }


  public UIGrid pagination(PaginationConfig pagination) {
    this.pagination = pagination;
    return this;
  }

   /**
   * Get pagination
   * @return pagination
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAGINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PaginationConfig getPagination() {
    return pagination;
  }


  @JsonProperty(JSON_PROPERTY_PAGINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPagination(PaginationConfig pagination) {
    this.pagination = pagination;
  }


  public UIGrid sortable(Boolean sortable) {
    this.sortable = sortable;
    return this;
  }

   /**
   * Enable or disable sorting on the grid.
   * @return sortable
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SORTABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSortable() {
    return sortable;
  }


  @JsonProperty(JSON_PROPERTY_SORTABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSortable(Boolean sortable) {
    this.sortable = sortable;
  }


  public UIGrid filterable(Boolean filterable) {
    this.filterable = filterable;
    return this;
  }

   /**
   * Enable or disable filtering on the grid.
   * @return filterable
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILTERABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFilterable() {
    return filterable;
  }


  @JsonProperty(JSON_PROPERTY_FILTERABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilterable(Boolean filterable) {
    this.filterable = filterable;
  }


  public UIGrid editable(Boolean editable) {
    this.editable = editable;
    return this;
  }

   /**
   * Allow or disallow editing within the grid.
   * @return editable
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EDITABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEditable() {
    return editable;
  }


  @JsonProperty(JSON_PROPERTY_EDITABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEditable(Boolean editable) {
    this.editable = editable;
  }


  /**
   * Return true if this UIGrid object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UIGrid uiGrid = (UIGrid) o;
    return Objects.equals(this.id, uiGrid.id) &&
        Objects.equals(this.columns, uiGrid.columns) &&
        Objects.equals(this.data, uiGrid.data) &&
        Objects.equals(this.pagination, uiGrid.pagination) &&
        Objects.equals(this.sortable, uiGrid.sortable) &&
        Objects.equals(this.filterable, uiGrid.filterable) &&
        Objects.equals(this.editable, uiGrid.editable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, columns, data, pagination, sortable, filterable, editable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UIGrid {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    pagination: ").append(toIndentedString(pagination)).append("\n");
    sb.append("    sortable: ").append(toIndentedString(sortable)).append("\n");
    sb.append("    filterable: ").append(toIndentedString(filterable)).append("\n");
    sb.append("    editable: ").append(toIndentedString(editable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `columns` to the URL query string
    if (getColumns() != null) {
      for (int i = 0; i < getColumns().size(); i++) {
        if (getColumns().get(i) != null) {
          joiner.add(getColumns().get(i).toUrlQueryString(String.format("%scolumns%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `data` to the URL query string
    if (getData() != null) {
      for (int i = 0; i < getData().size(); i++) {
        joiner.add(String.format("%sdata%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(String.valueOf(getData().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `pagination` to the URL query string
    if (getPagination() != null) {
      joiner.add(getPagination().toUrlQueryString(prefix + "pagination" + suffix));
    }

    // add `sortable` to the URL query string
    if (getSortable() != null) {
      joiner.add(String.format("%ssortable%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSortable()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `filterable` to the URL query string
    if (getFilterable() != null) {
      joiner.add(String.format("%sfilterable%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFilterable()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `editable` to the URL query string
    if (getEditable() != null) {
      joiner.add(String.format("%seditable%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEditable()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

