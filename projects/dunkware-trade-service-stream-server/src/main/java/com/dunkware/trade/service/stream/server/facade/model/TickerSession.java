/*
 * Dunkware Street Model
 * Schema for Dunkware Street Model components.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dunkware.trade.service.stream.server.facade.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * TickerSession
 */
@JsonPropertyOrder({
  TickerSession.JSON_PROPERTY_DATE,
  TickerSession.JSON_PROPERTY_START_TIME,
  TickerSession.JSON_PROPERTY_STOP_TIME,
  TickerSession.JSON_PROPERTY_SIGNAL_COUNT,
  TickerSession.JSON_PROPERTY_VERSION
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-10T02:11:27.513314-05:00[America/Chicago]", comments = "Generator version: 7.6.0")
public class TickerSession {
  public static final String JSON_PROPERTY_DATE = "date";
  private GenDate date;

  public static final String JSON_PROPERTY_START_TIME = "startTime";
  private GenTime startTime;

  public static final String JSON_PROPERTY_STOP_TIME = "stopTime";
  private GenTime stopTime;

  public static final String JSON_PROPERTY_SIGNAL_COUNT = "signalCount";
  private Integer signalCount;

  public static final String JSON_PROPERTY_VERSION = "version";
  private Double version;

  public TickerSession() { 
  }

  public TickerSession date(GenDate date) {
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GenDate getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDate(GenDate date) {
    this.date = date;
  }


  public TickerSession startTime(GenTime startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GenTime getStartTime() {
    return startTime;
  }


  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStartTime(GenTime startTime) {
    this.startTime = startTime;
  }


  public TickerSession stopTime(GenTime stopTime) {
    this.stopTime = stopTime;
    return this;
  }

   /**
   * Get stopTime
   * @return stopTime
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STOP_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GenTime getStopTime() {
    return stopTime;
  }


  @JsonProperty(JSON_PROPERTY_STOP_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStopTime(GenTime stopTime) {
    this.stopTime = stopTime;
  }


  public TickerSession signalCount(Integer signalCount) {
    this.signalCount = signalCount;
    return this;
  }

   /**
   * Number of signals associated with the session
   * @return signalCount
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SIGNAL_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSignalCount() {
    return signalCount;
  }


  @JsonProperty(JSON_PROPERTY_SIGNAL_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSignalCount(Integer signalCount) {
    this.signalCount = signalCount;
  }


  public TickerSession version(Double version) {
    this.version = version;
    return this;
  }

   /**
   * Version of the ticker session
   * @return version
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersion(Double version) {
    this.version = version;
  }


  /**
   * Return true if this TickerSession object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TickerSession tickerSession = (TickerSession) o;
    return Objects.equals(this.date, tickerSession.date) &&
        Objects.equals(this.startTime, tickerSession.startTime) &&
        Objects.equals(this.stopTime, tickerSession.stopTime) &&
        Objects.equals(this.signalCount, tickerSession.signalCount) &&
        Objects.equals(this.version, tickerSession.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, startTime, stopTime, signalCount, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TickerSession {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    stopTime: ").append(toIndentedString(stopTime)).append("\n");
    sb.append("    signalCount: ").append(toIndentedString(signalCount)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `date` to the URL query string
    if (getDate() != null) {
      joiner.add(getDate().toUrlQueryString(prefix + "date" + suffix));
    }

    // add `startTime` to the URL query string
    if (getStartTime() != null) {
      joiner.add(getStartTime().toUrlQueryString(prefix + "startTime" + suffix));
    }

    // add `stopTime` to the URL query string
    if (getStopTime() != null) {
      joiner.add(getStopTime().toUrlQueryString(prefix + "stopTime" + suffix));
    }

    // add `signalCount` to the URL query string
    if (getSignalCount() != null) {
      joiner.add(String.format("%ssignalCount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSignalCount()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `version` to the URL query string
    if (getVersion() != null) {
      joiner.add(String.format("%sversion%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

