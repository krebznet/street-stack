####
# Profiles
######
spring.profiles.active=DunkNet,StreamCapture,StreamRunner,StreamController,TickService,StreamSessionWorker,Cluster,AutoSearch,AddStreamReqGen
#spring.profiles.active=StreamController,StreamCapture,Cluster,TickService,StreamStore,StreamSessionWorker
#spring.profiles.active=StreamSessionWorker,Cluster,TickService,StreamStore
# for deployed : LoggingConfig


#spring.profiles.active=StreamTest3
#management.endpoints.web.exposure.include=hawtio,jolokia,health,info,metrics
#hawtio.authenticationEnabled=false

server.tomcat.connection-timeout=100s


####mak
## Server Port!
#####
server.port=8086

#### Net CLuster ## 
net.cluster.server.grpc:localhost:9323
net.cluster.server.http:http://localhost:8086
net.cluster.server.brokers=localhost:29092
net.cluster.node.id=StreamService
net.cluster.node.type=Service
net.cluster.cluster.grpc:localhost:8059


#### Stream Session ##### 
session.node.ticker.limit=100
session.worker.nodes=WorkerService

######
# DB Connection Properties 
######

########
# grpc properties
########### 
grpc.server.port=9896



spring.datasource.url=jdbc:mysql://localhost:3306/dunkstreet?serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=3goldPigs1!
spring.datasource.driver-class-name=com.mysql.jdbc.Driver


spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
spring.jpa.properties.hibernate.jdbc.batch_size=10000
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true
#### System Configuration properties ### 
streams.schedule.enable=false

# Format JSON
spring.jackson.serialization.INDENT_OUTPUT=true
# System Metrics
management.endpoints.web.exposure.include=health,info,prometheus,metrics
# Detailed Statistics
management.endpoint.health.show-details=always

#########
# Tick Service Endpoint
##########
tick.service.endpoint=http://localhost:8987
#tick.service.endpoint=http://172.16.16.55:31890
#tick.service.endpoint=http://testrock1.dunkware.net:31890

####
# Executor Service
#####
exectuor.timeout.value=30
executor.timeout.unit=Second
executor.size.core=5
executor.size.max=15
executor.name=ServerPool


dunknet.node.id=streamserver
dunknet.node.profiles=time,feed
dunknet.brokers=localhost:29092
dunknet.cluster.id=dev

### Trace #### 


##### 
# Mongo DB
###### 

#mongo.url=mongodb://root:password@172.16.16.55:32700

### All local this emedded app properties in the repo should only be local
consumer.kafka.brokers=localhost:29092
kafka.brokers=localhost:29092
kafka.zookeepers=localhost:29092


### data service 

## Local Docker Mongo Database 
#spring.data.mongodb.database=dunkstreet
#spring.data.mongodb.username=root
#spring.data.mongodb.password=rootpassword
#spring.data.mongodb.authentication-database=admin
#spring.data.mongodb.host=localhost
#spring.data.mongodb.port=27017
#spring.data.mongodb=DEBUG
#spring.data.mongodb.auto-index-creation = true


## Data2 Mongo Database for localhost
 
#spring.data.mongodb.database=dunkstreet
#spring.data.mongodb.username=admin
#spring.data.mongodb.password=fuck
#spring.data.mongodb.authentication-database=admin
#spring.data.mongodb.host=192.168.23.110
#spring.data.mongodb.port=27017
#spring.data.mongodb=DEBUG

#spring.data.mongodb.database=dunkstreet
#spring.data.mongodb.username=root
#spring.data.mongodb.password=rootpassword
#spring.data.mongodb.authentication-database=admin
#spring.data.mongodb.host=localhost
#spring.data.mongodb.port=27017

# Global Properties 
spring.data.mongodb.auto-index-creation=true

## For Test Rock 
spring.data.mongodb.uri=mongodb://data2.dunkware.net:27017/dunkstreet


## Local Docker Mongo Database 
#spring.data.mongodb.database=street
#spring.data.mongodb.username=root
#spring.data.mongodb.password=password
#spring.data.mongodb.authentication-database=admin
#spring.data.mongodb.host=localhost
#spring.data.mongodb.port=27017
#spring.data.mongodb=DEBUG
#spring.data.mongodb.auto-index-creation = true

mongo.url=mongodb://data2.dunkware.net:27017
mongo.db=street


snapshot.writer.batchsize = 30
snapshot.writer.queuelimit = 5000
stream.container.worker.nodes=WorkerService

