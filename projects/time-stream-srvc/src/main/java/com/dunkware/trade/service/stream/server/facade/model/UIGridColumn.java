/*
 * Dunkware Street Model
 * Schema for Dunkware Street Model components.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dunkware.trade.service.stream.server.facade.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * UIGridColumn
 */
@JsonPropertyOrder({
  UIGridColumn.JSON_PROPERTY_FIELD,
  UIGridColumn.JSON_PROPERTY_HEADER_NAME,
  UIGridColumn.JSON_PROPERTY_WIDTH,
  UIGridColumn.JSON_PROPERTY_SORTABLE,
  UIGridColumn.JSON_PROPERTY_FILTER_TYPE,
  UIGridColumn.JSON_PROPERTY_EDITABLE,
  UIGridColumn.JSON_PROPERTY_TYPE,
  UIGridColumn.JSON_PROPERTY_ACTIONS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-09T00:50:10.403226-05:00[America/Chicago]", comments = "Generator version: 7.6.0")
public class UIGridColumn {
  public static final String JSON_PROPERTY_FIELD = "field";
  private String field;

  public static final String JSON_PROPERTY_HEADER_NAME = "headerName";
  private String headerName;

  public static final String JSON_PROPERTY_WIDTH = "width";
  private String width;

  public static final String JSON_PROPERTY_SORTABLE = "sortable";
  private Boolean sortable;

  public static final String JSON_PROPERTY_FILTER_TYPE = "filterType";
  private String filterType;

  public static final String JSON_PROPERTY_EDITABLE = "editable";
  private Boolean editable;

  public static final String JSON_PROPERTY_TYPE = "type";
  private UIGridColumnType type;

  public static final String JSON_PROPERTY_ACTIONS = "actions";
  private List<UIAction> actions = new ArrayList<>();

  public UIGridColumn() { 
  }

  public UIGridColumn field(String field) {
    this.field = field;
    return this;
  }

   /**
   * Field name corresponding to data keys.
   * @return field
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getField() {
    return field;
  }


  @JsonProperty(JSON_PROPERTY_FIELD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setField(String field) {
    this.field = field;
  }


  public UIGridColumn headerName(String headerName) {
    this.headerName = headerName;
    return this;
  }

   /**
   * Display name for the column in the grid.
   * @return headerName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEADER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHeaderName() {
    return headerName;
  }


  @JsonProperty(JSON_PROPERTY_HEADER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeaderName(String headerName) {
    this.headerName = headerName;
  }


  public UIGridColumn width(String width) {
    this.width = width;
    return this;
  }

   /**
   * Width of the column, can be defined in pixels or percentage.
   * @return width
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWidth() {
    return width;
  }


  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWidth(String width) {
    this.width = width;
  }


  public UIGridColumn sortable(Boolean sortable) {
    this.sortable = sortable;
    return this;
  }

   /**
   * Specifies if the column is sortable.
   * @return sortable
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SORTABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSortable() {
    return sortable;
  }


  @JsonProperty(JSON_PROPERTY_SORTABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSortable(Boolean sortable) {
    this.sortable = sortable;
  }


  public UIGridColumn filterType(String filterType) {
    this.filterType = filterType;
    return this;
  }

   /**
   * Specifies the type of filter (e.g., &#39;text&#39;, &#39;number&#39;, &#39;date&#39;, &#39;select&#39;).
   * @return filterType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILTER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFilterType() {
    return filterType;
  }


  @JsonProperty(JSON_PROPERTY_FILTER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilterType(String filterType) {
    this.filterType = filterType;
  }


  public UIGridColumn editable(Boolean editable) {
    this.editable = editable;
    return this;
  }

   /**
   * Specifies if the column can be edited.
   * @return editable
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EDITABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEditable() {
    return editable;
  }


  @JsonProperty(JSON_PROPERTY_EDITABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEditable(Boolean editable) {
    this.editable = editable;
  }


  public UIGridColumn type(UIGridColumnType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UIGridColumnType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(UIGridColumnType type) {
    this.type = type;
  }


  public UIGridColumn actions(List<UIAction> actions) {
    this.actions = actions;
    return this;
  }

  public UIGridColumn addActionsItem(UIAction actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

   /**
   * List of actions associated with this column, if applicable.
   * @return actions
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<UIAction> getActions() {
    return actions;
  }


  @JsonProperty(JSON_PROPERTY_ACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActions(List<UIAction> actions) {
    this.actions = actions;
  }


  /**
   * Return true if this UIGridColumn object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UIGridColumn uiGridColumn = (UIGridColumn) o;
    return Objects.equals(this.field, uiGridColumn.field) &&
        Objects.equals(this.headerName, uiGridColumn.headerName) &&
        Objects.equals(this.width, uiGridColumn.width) &&
        Objects.equals(this.sortable, uiGridColumn.sortable) &&
        Objects.equals(this.filterType, uiGridColumn.filterType) &&
        Objects.equals(this.editable, uiGridColumn.editable) &&
        Objects.equals(this.type, uiGridColumn.type) &&
        Objects.equals(this.actions, uiGridColumn.actions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(field, headerName, width, sortable, filterType, editable, type, actions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UIGridColumn {\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    headerName: ").append(toIndentedString(headerName)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    sortable: ").append(toIndentedString(sortable)).append("\n");
    sb.append("    filterType: ").append(toIndentedString(filterType)).append("\n");
    sb.append("    editable: ").append(toIndentedString(editable)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `field` to the URL query string
    if (getField() != null) {
      joiner.add(String.format("%sfield%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getField()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `headerName` to the URL query string
    if (getHeaderName() != null) {
      joiner.add(String.format("%sheaderName%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHeaderName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `width` to the URL query string
    if (getWidth() != null) {
      joiner.add(String.format("%swidth%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWidth()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `sortable` to the URL query string
    if (getSortable() != null) {
      joiner.add(String.format("%ssortable%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSortable()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `filterType` to the URL query string
    if (getFilterType() != null) {
      joiner.add(String.format("%sfilterType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFilterType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `editable` to the URL query string
    if (getEditable() != null) {
      joiner.add(String.format("%seditable%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEditable()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `actions` to the URL query string
    if (getActions() != null) {
      for (int i = 0; i < getActions().size(); i++) {
        if (getActions().get(i) != null) {
          joiner.add(getActions().get(i).toUrlQueryString(String.format("%sactions%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

