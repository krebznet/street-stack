/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.dunkware.street.server;

import com.dunkware.street.model.ExchangeRef;
import com.dunkware.street.model.ExchangeSession;
import com.dunkware.street.model.TickerRef;
import com.dunkware.street.model.TickerSession;
import com.dunkware.street.model.TickerStat;
import com.dunkware.street.model.TickerVariable;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-06-03T04:43:50.832023-05:00[America/Chicago]")
@Validated
@Controller
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/exchanges/{exchangeId}/sessions : Get all sessions for a specific exchange
     *
     * @param exchangeId Numeric identifier of the exchange (required)
     * @return A list of sessions for the exchange (status code 200)
     *         or Exchange not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/exchanges/{exchangeId}/sessions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ExchangeSession>> _apiExchangesExchangeIdSessionsGet(
         @PathVariable("exchangeId") Integer exchangeId
    ) {
        return apiExchangesExchangeIdSessionsGet(exchangeId);
    }

    // Override this method
    default  ResponseEntity<List<ExchangeSession>> apiExchangesExchangeIdSessionsGet(Integer exchangeId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"exchangeId\" : 6, \"date\" : { \"year\" : 2024, \"month\" : 5, \"dayOfMonth\" : 25 }, \"entityCount\" : 1, \"startTime\" : { \"hour\" : 14, \"minute\" : 30, \"second\" : 0, \"timeZone\" : \"UTC\" }, \"stopTime\" : { \"hour\" : 14, \"minute\" : 30, \"second\" : 0, \"timeZone\" : \"UTC\" }, \"id\" : 0, \"version\" : 5.962133916683182 }, { \"exchangeId\" : 6, \"date\" : { \"year\" : 2024, \"month\" : 5, \"dayOfMonth\" : 25 }, \"entityCount\" : 1, \"startTime\" : { \"hour\" : 14, \"minute\" : 30, \"second\" : 0, \"timeZone\" : \"UTC\" }, \"stopTime\" : { \"hour\" : 14, \"minute\" : 30, \"second\" : 0, \"timeZone\" : \"UTC\" }, \"id\" : 0, \"version\" : 5.962133916683182 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/exchanges/{exchangeId}/tickers : Get all tickers for a specific exchange
     *
     * @param exchangeId Numeric identifier of the exchange (required)
     * @return A list of tickers for the exchange (status code 200)
     *         or Exchange not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/exchanges/{exchangeId}/tickers",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TickerRef>> _apiExchangesExchangeIdTickersGet(
         @PathVariable("exchangeId") Integer exchangeId
    ) {
        return apiExchangesExchangeIdTickersGet(exchangeId);
    }

    // Override this method
    default  ResponseEntity<List<TickerRef>> apiExchangesExchangeIdTickersGet(Integer exchangeId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"identifier\" : \"identifier\", \"sessionCount\" : 1, \"baseVersion\" : 5.962133916683182, \"name\" : \"name\", \"exchange\" : 6, \"id\" : 0 }, { \"identifier\" : \"identifier\", \"sessionCount\" : 1, \"baseVersion\" : 5.962133916683182, \"name\" : \"name\", \"exchange\" : 6, \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/exchanges/{exchangeId}/tickers/{tickerId}/sessions : Get all sessions for a specific ticker
     *
     * @param exchangeId Numeric identifier of the exchange (required)
     * @param tickerId Numeric identifier of the ticker (required)
     * @return A list of sessions for the ticker (status code 200)
     *         or Ticker or Exchange not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/exchanges/{exchangeId}/tickers/{tickerId}/sessions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TickerSession>> _apiExchangesExchangeIdTickersTickerIdSessionsGet(
         @PathVariable("exchangeId") Integer exchangeId,
         @PathVariable("tickerId") Integer tickerId
    ) {
        return apiExchangesExchangeIdTickersTickerIdSessionsGet(exchangeId, tickerId);
    }

    // Override this method
    default  ResponseEntity<List<TickerSession>> apiExchangesExchangeIdTickersTickerIdSessionsGet(Integer exchangeId, Integer tickerId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"date\" : { \"year\" : 2024, \"month\" : 5, \"dayOfMonth\" : 25 }, \"signalCount\" : 0, \"startTime\" : { \"hour\" : 14, \"minute\" : 30, \"second\" : 0, \"timeZone\" : \"UTC\" }, \"stopTime\" : { \"hour\" : 14, \"minute\" : 30, \"second\" : 0, \"timeZone\" : \"UTC\" }, \"version\" : 6.027456183070403 }, { \"date\" : { \"year\" : 2024, \"month\" : 5, \"dayOfMonth\" : 25 }, \"signalCount\" : 0, \"startTime\" : { \"hour\" : 14, \"minute\" : 30, \"second\" : 0, \"timeZone\" : \"UTC\" }, \"stopTime\" : { \"hour\" : 14, \"minute\" : 30, \"second\" : 0, \"timeZone\" : \"UTC\" }, \"version\" : 6.027456183070403 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/exchanges/{exchangeId}/tickers/{tickerId}/sessions/{sessionId}/stats : Get all stats for a specific ticker session
     *
     * @param exchangeId Numeric identifier of the exchange (required)
     * @param tickerId Numeric identifier of the ticker (required)
     * @param sessionId Numeric identifier of the ticker session (required)
     * @return A list of stats for the ticker session (status code 200)
     *         or Ticker, Exchange, or Session not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/exchanges/{exchangeId}/tickers/{tickerId}/sessions/{sessionId}/stats",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TickerStat>> _apiExchangesExchangeIdTickersTickerIdSessionsSessionIdStatsGet(
         @PathVariable("exchangeId") Integer exchangeId,
         @PathVariable("tickerId") Integer tickerId,
         @PathVariable("sessionId") Integer sessionId
    ) {
        return apiExchangesExchangeIdTickersTickerIdSessionsSessionIdStatsGet(exchangeId, tickerId, sessionId);
    }

    // Override this method
    default  ResponseEntity<List<TickerStat>> apiExchangesExchangeIdTickersTickerIdSessionsSessionIdStatsGet(Integer exchangeId, Integer tickerId, Integer sessionId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"exchangeId\" : 1, \"elementId\" : 5, \"statId\" : 0, \"statValue\" : 5.637376656633329, \"statName\" : \"statName\", \"time\" : { \"hour\" : 14, \"minute\" : 30, \"second\" : 0, \"timeZone\" : \"UTC\" }, \"tickerId\" : 6 }, { \"exchangeId\" : 1, \"elementId\" : 5, \"statId\" : 0, \"statValue\" : 5.637376656633329, \"statName\" : \"statName\", \"time\" : { \"hour\" : 14, \"minute\" : 30, \"second\" : 0, \"timeZone\" : \"UTC\" }, \"tickerId\" : 6 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/exchanges/{exchangeId}/tickers/{tickerId}/stats/{statId} : Get a specific stat for a specific exchange ticker
     *
     * @param exchangeId Numeric identifier of the exchange (required)
     * @param tickerId Numeric identifier of the ticker (required)
     * @param statId Numeric identifier of the stat (required)
     * @return Details of the specific stat for the exchange ticker (status code 200)
     *         or Ticker, Exchange, or Stat not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/exchanges/{exchangeId}/tickers/{tickerId}/stats/{statId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TickerStat> _apiExchangesExchangeIdTickersTickerIdStatsStatIdGet(
         @PathVariable("exchangeId") Integer exchangeId,
         @PathVariable("tickerId") Integer tickerId,
         @PathVariable("statId") Integer statId
    ) {
        return apiExchangesExchangeIdTickersTickerIdStatsStatIdGet(exchangeId, tickerId, statId);
    }

    // Override this method
    default  ResponseEntity<TickerStat> apiExchangesExchangeIdTickersTickerIdStatsStatIdGet(Integer exchangeId, Integer tickerId, Integer statId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"exchangeId\" : 1, \"elementId\" : 5, \"statId\" : 0, \"statValue\" : 5.637376656633329, \"statName\" : \"statName\", \"time\" : { \"hour\" : 14, \"minute\" : 30, \"second\" : 0, \"timeZone\" : \"UTC\" }, \"tickerId\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/exchanges/{exchangeId}/tickers/{tickerId}/variables : Get all variables for a specific ticker
     *
     * @param exchangeId Numeric identifier of the exchange (required)
     * @param tickerId Numeric identifier of the ticker (required)
     * @return A list of variables for the ticker (status code 200)
     *         or Ticker or Exchange not found (status code 404)
     *         or Internal server error (status code 500)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/exchanges/{exchangeId}/tickers/{tickerId}/variables",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TickerVariable>> _apiExchangesExchangeIdTickersTickerIdVariablesGet(
         @PathVariable("exchangeId") Integer exchangeId,
         @PathVariable("tickerId") Integer tickerId
    ) {
        return apiExchangesExchangeIdTickersTickerIdVariablesGet(exchangeId, tickerId);
    }

    // Override this method
    default  ResponseEntity<List<TickerVariable>> apiExchangesExchangeIdTickersTickerIdVariablesGet(Integer exchangeId, Integer tickerId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"identifier\" : \"identifier\", \"baseVersion\" : 6.027456183070403, \"sessionCount\" : 1, \"dataFormat\" : { \"formatType\" : \"roundToDecimalPlaces\", \"precision\" : 2 }, \"dataType\" : \"Integer\", \"name\" : \"name\", \"id\" : 0, \"group\" : \"group\" }, { \"identifier\" : \"identifier\", \"baseVersion\" : 6.027456183070403, \"sessionCount\" : 1, \"dataFormat\" : { \"formatType\" : \"roundToDecimalPlaces\", \"precision\" : 2 }, \"dataType\" : \"Integer\", \"name\" : \"name\", \"id\" : 0, \"group\" : \"group\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/exchanges : Get a list of all exchanges
     *
     * @return A list of exchanges (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/exchanges",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ExchangeRef>> _apiExchangesGet(
        
    ) {
        return apiExchangesGet();
    }

    // Override this method
    default  ResponseEntity<List<ExchangeRef>> apiExchangesGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"identifier\" : \"identifier\", \"name\" : \"name\", \"id\" : 0, \"tickers\" : 6, \"status\" : \"Open\" }, { \"identifier\" : \"identifier\", \"name\" : \"name\", \"id\" : 0, \"tickers\" : 6, \"status\" : \"Open\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
