// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chart.proto

package com.dunkware.net.proto.chart;

public interface GridColumnOrBuilder extends
    // @@protoc_insertion_point(interface_extends:dunkware.chart.GridColumn)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * required field for column binding 
   * </pre>
   *
   * <code>string field = 1;</code>
   */
  java.lang.String getField();
  /**
   * <pre>
   * required field for column binding 
   * </pre>
   *
   * <code>string field = 1;</code>
   */
  com.google.protobuf.ByteString
      getFieldBytes();

  /**
   * <pre>
   * Specifies if column is sortable if not set on server default value is false 
   * </pre>
   *
   * <code>bool sortable = 2;</code>
   */
  boolean getSortable();

  /**
   * <pre>
   * Specifies is column is filterable if not set default value is false 
   * </pre>
   *
   * <code>bool filter = 3;</code>
   */
  boolean getFilter();

  /**
   * <pre>
   * Specifies if row drag is enabled default is false 
   * </pre>
   *
   * <code>bool rowDrag = 4;</code>
   */
  boolean getRowDrag();

  /**
   * <pre>
   * Optional headerName that if not null will set the name of column 
   * </pre>
   *
   * <code>string headerName = 5;</code>
   */
  java.lang.String getHeaderName();
  /**
   * <pre>
   * Optional headerName that if not null will set the name of column 
   * </pre>
   *
   * <code>string headerName = 5;</code>
   */
  com.google.protobuf.ByteString
      getHeaderNameBytes();

  /**
   * <pre>
   * Optional value parser that matches a function name from enum 
   * </pre>
   *
   * <code>.dunkware.chart.GridValueParser valueParser = 6;</code>
   */
  int getValueParserValue();
  /**
   * <pre>
   * Optional value parser that matches a function name from enum 
   * </pre>
   *
   * <code>.dunkware.chart.GridValueParser valueParser = 6;</code>
   */
  com.dunkware.net.proto.chart.GridValueParser getValueParser();

  /**
   * <pre>
   ** Optional list of cellClassRules of gets configured in the client like this...
   *cellClassRules: {
   *'rag-green': 'x &lt; 20',
   *'rag-amber': 'x &gt;= 20 &amp;&amp; x &lt; 25',
   *'rag-red': 'x &gt;= 25'
   *},
   * </pre>
   *
   * <code>repeated string cellClassRules = 7;</code>
   */
  java.util.List<java.lang.String>
      getCellClassRulesList();
  /**
   * <pre>
   ** Optional list of cellClassRules of gets configured in the client like this...
   *cellClassRules: {
   *'rag-green': 'x &lt; 20',
   *'rag-amber': 'x &gt;= 20 &amp;&amp; x &lt; 25',
   *'rag-red': 'x &gt;= 25'
   *},
   * </pre>
   *
   * <code>repeated string cellClassRules = 7;</code>
   */
  int getCellClassRulesCount();
  /**
   * <pre>
   ** Optional list of cellClassRules of gets configured in the client like this...
   *cellClassRules: {
   *'rag-green': 'x &lt; 20',
   *'rag-amber': 'x &gt;= 20 &amp;&amp; x &lt; 25',
   *'rag-red': 'x &gt;= 25'
   *},
   * </pre>
   *
   * <code>repeated string cellClassRules = 7;</code>
   */
  java.lang.String getCellClassRules(int index);
  /**
   * <pre>
   ** Optional list of cellClassRules of gets configured in the client like this...
   *cellClassRules: {
   *'rag-green': 'x &lt; 20',
   *'rag-amber': 'x &gt;= 20 &amp;&amp; x &lt; 25',
   *'rag-red': 'x &gt;= 25'
   *},
   * </pre>
   *
   * <code>repeated string cellClassRules = 7;</code>
   */
  com.google.protobuf.ByteString
      getCellClassRulesBytes(int index);

  /**
   * <pre>
   * optional cell class that must be a valid css class name 
   * </pre>
   *
   * <code>string cellClass = 8;</code>
   */
  java.lang.String getCellClass();
  /**
   * <pre>
   * optional cell class that must be a valid css class name 
   * </pre>
   *
   * <code>string cellClass = 8;</code>
   */
  com.google.protobuf.ByteString
      getCellClassBytes();
}
