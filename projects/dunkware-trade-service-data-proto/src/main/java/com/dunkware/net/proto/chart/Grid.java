// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chart.proto

package com.dunkware.net.proto.chart;

/**
 * Protobuf type {@code dunkware.chart.Grid}
 */
public  final class Grid extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:dunkware.chart.Grid)
    GridOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Grid.newBuilder() to construct.
  private Grid(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Grid() {
    gridId_ = 0;
    columns_ = java.util.Collections.emptyList();
    data_ = "";
    streaming_ = false;
    pivot_ = false;
    rowNodeId_ = "";
    pagination_ = false;
    paginationPageSize_ = 0;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Grid(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            gridId_ = input.readInt32();
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              columns_ = new java.util.ArrayList<com.dunkware.net.proto.chart.GridColumn>();
              mutable_bitField0_ |= 0x00000002;
            }
            columns_.add(
                input.readMessage(com.dunkware.net.proto.chart.GridColumn.parser(), extensionRegistry));
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            data_ = s;
            break;
          }
          case 32: {

            streaming_ = input.readBool();
            break;
          }
          case 40: {

            pivot_ = input.readBool();
            break;
          }
          case 50: {
            java.lang.String s = input.readStringRequireUtf8();

            rowNodeId_ = s;
            break;
          }
          case 56: {

            pagination_ = input.readBool();
            break;
          }
          case 64: {

            paginationPageSize_ = input.readInt32();
            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        columns_ = java.util.Collections.unmodifiableList(columns_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.dunkware.net.proto.chart.ChartProto.internal_static_dunkware_chart_Grid_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.dunkware.net.proto.chart.ChartProto.internal_static_dunkware_chart_Grid_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.dunkware.net.proto.chart.Grid.class, com.dunkware.net.proto.chart.Grid.Builder.class);
  }

  private int bitField0_;
  public static final int GRIDID_FIELD_NUMBER = 1;
  private int gridId_;
  /**
   * <pre>
   * numeric id of the grid 
   * </pre>
   *
   * <code>int32 gridId = 1;</code>
   */
  public int getGridId() {
    return gridId_;
  }

  public static final int COLUMNS_FIELD_NUMBER = 2;
  private java.util.List<com.dunkware.net.proto.chart.GridColumn> columns_;
  /**
   * <pre>
   ** required list of GridColumn that the client side will iterate
   *and create column in the columnDefs array *
   * </pre>
   *
   * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
   */
  public java.util.List<com.dunkware.net.proto.chart.GridColumn> getColumnsList() {
    return columns_;
  }
  /**
   * <pre>
   ** required list of GridColumn that the client side will iterate
   *and create column in the columnDefs array *
   * </pre>
   *
   * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
   */
  public java.util.List<? extends com.dunkware.net.proto.chart.GridColumnOrBuilder> 
      getColumnsOrBuilderList() {
    return columns_;
  }
  /**
   * <pre>
   ** required list of GridColumn that the client side will iterate
   *and create column in the columnDefs array *
   * </pre>
   *
   * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
   */
  public int getColumnsCount() {
    return columns_.size();
  }
  /**
   * <pre>
   ** required list of GridColumn that the client side will iterate
   *and create column in the columnDefs array *
   * </pre>
   *
   * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
   */
  public com.dunkware.net.proto.chart.GridColumn getColumns(int index) {
    return columns_.get(index);
  }
  /**
   * <pre>
   ** required list of GridColumn that the client side will iterate
   *and create column in the columnDefs array *
   * </pre>
   *
   * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
   */
  public com.dunkware.net.proto.chart.GridColumnOrBuilder getColumnsOrBuilder(
      int index) {
    return columns_.get(index);
  }

  public static final int DATA_FIELD_NUMBER = 3;
  private volatile java.lang.Object data_;
  /**
   * <pre>
   * Initial data set that will always be set regardless of static or streaming grid 
   * </pre>
   *
   * <code>string data = 3;</code>
   */
  public java.lang.String getData() {
    java.lang.Object ref = data_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      data_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Initial data set that will always be set regardless of static or streaming grid 
   * </pre>
   *
   * <code>string data = 3;</code>
   */
  public com.google.protobuf.ByteString
      getDataBytes() {
    java.lang.Object ref = data_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      data_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int STREAMING_FIELD_NUMBER = 4;
  private boolean streaming_;
  /**
   * <pre>
   ** Indicates if this is a streaming Grid, if true then a call is made
   *to get getGridDescription sending the id of the grid using GetGridSubscriptionRequest 
   * </pre>
   *
   * <code>bool streaming = 4;</code>
   */
  public boolean getStreaming() {
    return streaming_;
  }

  public static final int PIVOT_FIELD_NUMBER = 5;
  private boolean pivot_;
  /**
   * <pre>
   * Sets the pivot flag on the grid options to toggle visibility 
   * </pre>
   *
   * <code>bool pivot = 5;</code>
   */
  public boolean getPivot() {
    return pivot_;
  }

  public static final int ROWNODEID_FIELD_NUMBER = 6;
  private volatile java.lang.Object rowNodeId_;
  /**
   * <pre>
   * If streaming grid then we specify what attribute to sue as rowNodeId 
   * </pre>
   *
   * <code>string rowNodeId = 6;</code>
   */
  public java.lang.String getRowNodeId() {
    java.lang.Object ref = rowNodeId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      rowNodeId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * If streaming grid then we specify what attribute to sue as rowNodeId 
   * </pre>
   *
   * <code>string rowNodeId = 6;</code>
   */
  public com.google.protobuf.ByteString
      getRowNodeIdBytes() {
    java.lang.Object ref = rowNodeId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      rowNodeId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PAGINATION_FIELD_NUMBER = 7;
  private boolean pagination_;
  /**
   * <pre>
   * optional if set to tru pagination will be used 
   * </pre>
   *
   * <code>bool pagination = 7;</code>
   */
  public boolean getPagination() {
    return pagination_;
  }

  public static final int PAGINATIONPAGESIZE_FIELD_NUMBER = 8;
  private int paginationPageSize_;
  /**
   * <pre>
   * if pagination is set to true then we set the data size per row 
   * </pre>
   *
   * <code>int32 paginationPageSize = 8;</code>
   */
  public int getPaginationPageSize() {
    return paginationPageSize_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (gridId_ != 0) {
      output.writeInt32(1, gridId_);
    }
    for (int i = 0; i < columns_.size(); i++) {
      output.writeMessage(2, columns_.get(i));
    }
    if (!getDataBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, data_);
    }
    if (streaming_ != false) {
      output.writeBool(4, streaming_);
    }
    if (pivot_ != false) {
      output.writeBool(5, pivot_);
    }
    if (!getRowNodeIdBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, rowNodeId_);
    }
    if (pagination_ != false) {
      output.writeBool(7, pagination_);
    }
    if (paginationPageSize_ != 0) {
      output.writeInt32(8, paginationPageSize_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (gridId_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, gridId_);
    }
    for (int i = 0; i < columns_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, columns_.get(i));
    }
    if (!getDataBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, data_);
    }
    if (streaming_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, streaming_);
    }
    if (pivot_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, pivot_);
    }
    if (!getRowNodeIdBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, rowNodeId_);
    }
    if (pagination_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, pagination_);
    }
    if (paginationPageSize_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(8, paginationPageSize_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.dunkware.net.proto.chart.Grid)) {
      return super.equals(obj);
    }
    com.dunkware.net.proto.chart.Grid other = (com.dunkware.net.proto.chart.Grid) obj;

    boolean result = true;
    result = result && (getGridId()
        == other.getGridId());
    result = result && getColumnsList()
        .equals(other.getColumnsList());
    result = result && getData()
        .equals(other.getData());
    result = result && (getStreaming()
        == other.getStreaming());
    result = result && (getPivot()
        == other.getPivot());
    result = result && getRowNodeId()
        .equals(other.getRowNodeId());
    result = result && (getPagination()
        == other.getPagination());
    result = result && (getPaginationPageSize()
        == other.getPaginationPageSize());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + GRIDID_FIELD_NUMBER;
    hash = (53 * hash) + getGridId();
    if (getColumnsCount() > 0) {
      hash = (37 * hash) + COLUMNS_FIELD_NUMBER;
      hash = (53 * hash) + getColumnsList().hashCode();
    }
    hash = (37 * hash) + DATA_FIELD_NUMBER;
    hash = (53 * hash) + getData().hashCode();
    hash = (37 * hash) + STREAMING_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getStreaming());
    hash = (37 * hash) + PIVOT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getPivot());
    hash = (37 * hash) + ROWNODEID_FIELD_NUMBER;
    hash = (53 * hash) + getRowNodeId().hashCode();
    hash = (37 * hash) + PAGINATION_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getPagination());
    hash = (37 * hash) + PAGINATIONPAGESIZE_FIELD_NUMBER;
    hash = (53 * hash) + getPaginationPageSize();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.dunkware.net.proto.chart.Grid parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.dunkware.net.proto.chart.Grid parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.dunkware.net.proto.chart.Grid parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.dunkware.net.proto.chart.Grid parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.dunkware.net.proto.chart.Grid parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.dunkware.net.proto.chart.Grid parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.dunkware.net.proto.chart.Grid parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.dunkware.net.proto.chart.Grid parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.dunkware.net.proto.chart.Grid parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.dunkware.net.proto.chart.Grid parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.dunkware.net.proto.chart.Grid parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.dunkware.net.proto.chart.Grid parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.dunkware.net.proto.chart.Grid prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code dunkware.chart.Grid}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:dunkware.chart.Grid)
      com.dunkware.net.proto.chart.GridOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dunkware.net.proto.chart.ChartProto.internal_static_dunkware_chart_Grid_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dunkware.net.proto.chart.ChartProto.internal_static_dunkware_chart_Grid_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dunkware.net.proto.chart.Grid.class, com.dunkware.net.proto.chart.Grid.Builder.class);
    }

    // Construct using com.dunkware.net.proto.chart.Grid.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getColumnsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      gridId_ = 0;

      if (columnsBuilder_ == null) {
        columns_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        columnsBuilder_.clear();
      }
      data_ = "";

      streaming_ = false;

      pivot_ = false;

      rowNodeId_ = "";

      pagination_ = false;

      paginationPageSize_ = 0;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.dunkware.net.proto.chart.ChartProto.internal_static_dunkware_chart_Grid_descriptor;
    }

    @java.lang.Override
    public com.dunkware.net.proto.chart.Grid getDefaultInstanceForType() {
      return com.dunkware.net.proto.chart.Grid.getDefaultInstance();
    }

    @java.lang.Override
    public com.dunkware.net.proto.chart.Grid build() {
      com.dunkware.net.proto.chart.Grid result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.dunkware.net.proto.chart.Grid buildPartial() {
      com.dunkware.net.proto.chart.Grid result = new com.dunkware.net.proto.chart.Grid(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.gridId_ = gridId_;
      if (columnsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          columns_ = java.util.Collections.unmodifiableList(columns_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.columns_ = columns_;
      } else {
        result.columns_ = columnsBuilder_.build();
      }
      result.data_ = data_;
      result.streaming_ = streaming_;
      result.pivot_ = pivot_;
      result.rowNodeId_ = rowNodeId_;
      result.pagination_ = pagination_;
      result.paginationPageSize_ = paginationPageSize_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.dunkware.net.proto.chart.Grid) {
        return mergeFrom((com.dunkware.net.proto.chart.Grid)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.dunkware.net.proto.chart.Grid other) {
      if (other == com.dunkware.net.proto.chart.Grid.getDefaultInstance()) return this;
      if (other.getGridId() != 0) {
        setGridId(other.getGridId());
      }
      if (columnsBuilder_ == null) {
        if (!other.columns_.isEmpty()) {
          if (columns_.isEmpty()) {
            columns_ = other.columns_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureColumnsIsMutable();
            columns_.addAll(other.columns_);
          }
          onChanged();
        }
      } else {
        if (!other.columns_.isEmpty()) {
          if (columnsBuilder_.isEmpty()) {
            columnsBuilder_.dispose();
            columnsBuilder_ = null;
            columns_ = other.columns_;
            bitField0_ = (bitField0_ & ~0x00000002);
            columnsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getColumnsFieldBuilder() : null;
          } else {
            columnsBuilder_.addAllMessages(other.columns_);
          }
        }
      }
      if (!other.getData().isEmpty()) {
        data_ = other.data_;
        onChanged();
      }
      if (other.getStreaming() != false) {
        setStreaming(other.getStreaming());
      }
      if (other.getPivot() != false) {
        setPivot(other.getPivot());
      }
      if (!other.getRowNodeId().isEmpty()) {
        rowNodeId_ = other.rowNodeId_;
        onChanged();
      }
      if (other.getPagination() != false) {
        setPagination(other.getPagination());
      }
      if (other.getPaginationPageSize() != 0) {
        setPaginationPageSize(other.getPaginationPageSize());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.dunkware.net.proto.chart.Grid parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.dunkware.net.proto.chart.Grid) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int gridId_ ;
    /**
     * <pre>
     * numeric id of the grid 
     * </pre>
     *
     * <code>int32 gridId = 1;</code>
     */
    public int getGridId() {
      return gridId_;
    }
    /**
     * <pre>
     * numeric id of the grid 
     * </pre>
     *
     * <code>int32 gridId = 1;</code>
     */
    public Builder setGridId(int value) {
      
      gridId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * numeric id of the grid 
     * </pre>
     *
     * <code>int32 gridId = 1;</code>
     */
    public Builder clearGridId() {
      
      gridId_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<com.dunkware.net.proto.chart.GridColumn> columns_ =
      java.util.Collections.emptyList();
    private void ensureColumnsIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        columns_ = new java.util.ArrayList<com.dunkware.net.proto.chart.GridColumn>(columns_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.dunkware.net.proto.chart.GridColumn, com.dunkware.net.proto.chart.GridColumn.Builder, com.dunkware.net.proto.chart.GridColumnOrBuilder> columnsBuilder_;

    /**
     * <pre>
     ** required list of GridColumn that the client side will iterate
     *and create column in the columnDefs array *
     * </pre>
     *
     * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
     */
    public java.util.List<com.dunkware.net.proto.chart.GridColumn> getColumnsList() {
      if (columnsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(columns_);
      } else {
        return columnsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     ** required list of GridColumn that the client side will iterate
     *and create column in the columnDefs array *
     * </pre>
     *
     * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
     */
    public int getColumnsCount() {
      if (columnsBuilder_ == null) {
        return columns_.size();
      } else {
        return columnsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     ** required list of GridColumn that the client side will iterate
     *and create column in the columnDefs array *
     * </pre>
     *
     * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
     */
    public com.dunkware.net.proto.chart.GridColumn getColumns(int index) {
      if (columnsBuilder_ == null) {
        return columns_.get(index);
      } else {
        return columnsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     ** required list of GridColumn that the client side will iterate
     *and create column in the columnDefs array *
     * </pre>
     *
     * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
     */
    public Builder setColumns(
        int index, com.dunkware.net.proto.chart.GridColumn value) {
      if (columnsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureColumnsIsMutable();
        columns_.set(index, value);
        onChanged();
      } else {
        columnsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     ** required list of GridColumn that the client side will iterate
     *and create column in the columnDefs array *
     * </pre>
     *
     * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
     */
    public Builder setColumns(
        int index, com.dunkware.net.proto.chart.GridColumn.Builder builderForValue) {
      if (columnsBuilder_ == null) {
        ensureColumnsIsMutable();
        columns_.set(index, builderForValue.build());
        onChanged();
      } else {
        columnsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     ** required list of GridColumn that the client side will iterate
     *and create column in the columnDefs array *
     * </pre>
     *
     * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
     */
    public Builder addColumns(com.dunkware.net.proto.chart.GridColumn value) {
      if (columnsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureColumnsIsMutable();
        columns_.add(value);
        onChanged();
      } else {
        columnsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     ** required list of GridColumn that the client side will iterate
     *and create column in the columnDefs array *
     * </pre>
     *
     * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
     */
    public Builder addColumns(
        int index, com.dunkware.net.proto.chart.GridColumn value) {
      if (columnsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureColumnsIsMutable();
        columns_.add(index, value);
        onChanged();
      } else {
        columnsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     ** required list of GridColumn that the client side will iterate
     *and create column in the columnDefs array *
     * </pre>
     *
     * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
     */
    public Builder addColumns(
        com.dunkware.net.proto.chart.GridColumn.Builder builderForValue) {
      if (columnsBuilder_ == null) {
        ensureColumnsIsMutable();
        columns_.add(builderForValue.build());
        onChanged();
      } else {
        columnsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     ** required list of GridColumn that the client side will iterate
     *and create column in the columnDefs array *
     * </pre>
     *
     * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
     */
    public Builder addColumns(
        int index, com.dunkware.net.proto.chart.GridColumn.Builder builderForValue) {
      if (columnsBuilder_ == null) {
        ensureColumnsIsMutable();
        columns_.add(index, builderForValue.build());
        onChanged();
      } else {
        columnsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     ** required list of GridColumn that the client side will iterate
     *and create column in the columnDefs array *
     * </pre>
     *
     * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
     */
    public Builder addAllColumns(
        java.lang.Iterable<? extends com.dunkware.net.proto.chart.GridColumn> values) {
      if (columnsBuilder_ == null) {
        ensureColumnsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, columns_);
        onChanged();
      } else {
        columnsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     ** required list of GridColumn that the client side will iterate
     *and create column in the columnDefs array *
     * </pre>
     *
     * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
     */
    public Builder clearColumns() {
      if (columnsBuilder_ == null) {
        columns_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        columnsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     ** required list of GridColumn that the client side will iterate
     *and create column in the columnDefs array *
     * </pre>
     *
     * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
     */
    public Builder removeColumns(int index) {
      if (columnsBuilder_ == null) {
        ensureColumnsIsMutable();
        columns_.remove(index);
        onChanged();
      } else {
        columnsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     ** required list of GridColumn that the client side will iterate
     *and create column in the columnDefs array *
     * </pre>
     *
     * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
     */
    public com.dunkware.net.proto.chart.GridColumn.Builder getColumnsBuilder(
        int index) {
      return getColumnsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     ** required list of GridColumn that the client side will iterate
     *and create column in the columnDefs array *
     * </pre>
     *
     * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
     */
    public com.dunkware.net.proto.chart.GridColumnOrBuilder getColumnsOrBuilder(
        int index) {
      if (columnsBuilder_ == null) {
        return columns_.get(index);  } else {
        return columnsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     ** required list of GridColumn that the client side will iterate
     *and create column in the columnDefs array *
     * </pre>
     *
     * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
     */
    public java.util.List<? extends com.dunkware.net.proto.chart.GridColumnOrBuilder> 
         getColumnsOrBuilderList() {
      if (columnsBuilder_ != null) {
        return columnsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(columns_);
      }
    }
    /**
     * <pre>
     ** required list of GridColumn that the client side will iterate
     *and create column in the columnDefs array *
     * </pre>
     *
     * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
     */
    public com.dunkware.net.proto.chart.GridColumn.Builder addColumnsBuilder() {
      return getColumnsFieldBuilder().addBuilder(
          com.dunkware.net.proto.chart.GridColumn.getDefaultInstance());
    }
    /**
     * <pre>
     ** required list of GridColumn that the client side will iterate
     *and create column in the columnDefs array *
     * </pre>
     *
     * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
     */
    public com.dunkware.net.proto.chart.GridColumn.Builder addColumnsBuilder(
        int index) {
      return getColumnsFieldBuilder().addBuilder(
          index, com.dunkware.net.proto.chart.GridColumn.getDefaultInstance());
    }
    /**
     * <pre>
     ** required list of GridColumn that the client side will iterate
     *and create column in the columnDefs array *
     * </pre>
     *
     * <code>repeated .dunkware.chart.GridColumn columns = 2;</code>
     */
    public java.util.List<com.dunkware.net.proto.chart.GridColumn.Builder> 
         getColumnsBuilderList() {
      return getColumnsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.dunkware.net.proto.chart.GridColumn, com.dunkware.net.proto.chart.GridColumn.Builder, com.dunkware.net.proto.chart.GridColumnOrBuilder> 
        getColumnsFieldBuilder() {
      if (columnsBuilder_ == null) {
        columnsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.dunkware.net.proto.chart.GridColumn, com.dunkware.net.proto.chart.GridColumn.Builder, com.dunkware.net.proto.chart.GridColumnOrBuilder>(
                columns_,
                ((bitField0_ & 0x00000002) == 0x00000002),
                getParentForChildren(),
                isClean());
        columns_ = null;
      }
      return columnsBuilder_;
    }

    private java.lang.Object data_ = "";
    /**
     * <pre>
     * Initial data set that will always be set regardless of static or streaming grid 
     * </pre>
     *
     * <code>string data = 3;</code>
     */
    public java.lang.String getData() {
      java.lang.Object ref = data_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        data_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Initial data set that will always be set regardless of static or streaming grid 
     * </pre>
     *
     * <code>string data = 3;</code>
     */
    public com.google.protobuf.ByteString
        getDataBytes() {
      java.lang.Object ref = data_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        data_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Initial data set that will always be set regardless of static or streaming grid 
     * </pre>
     *
     * <code>string data = 3;</code>
     */
    public Builder setData(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      data_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Initial data set that will always be set regardless of static or streaming grid 
     * </pre>
     *
     * <code>string data = 3;</code>
     */
    public Builder clearData() {
      
      data_ = getDefaultInstance().getData();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Initial data set that will always be set regardless of static or streaming grid 
     * </pre>
     *
     * <code>string data = 3;</code>
     */
    public Builder setDataBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      data_ = value;
      onChanged();
      return this;
    }

    private boolean streaming_ ;
    /**
     * <pre>
     ** Indicates if this is a streaming Grid, if true then a call is made
     *to get getGridDescription sending the id of the grid using GetGridSubscriptionRequest 
     * </pre>
     *
     * <code>bool streaming = 4;</code>
     */
    public boolean getStreaming() {
      return streaming_;
    }
    /**
     * <pre>
     ** Indicates if this is a streaming Grid, if true then a call is made
     *to get getGridDescription sending the id of the grid using GetGridSubscriptionRequest 
     * </pre>
     *
     * <code>bool streaming = 4;</code>
     */
    public Builder setStreaming(boolean value) {
      
      streaming_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     ** Indicates if this is a streaming Grid, if true then a call is made
     *to get getGridDescription sending the id of the grid using GetGridSubscriptionRequest 
     * </pre>
     *
     * <code>bool streaming = 4;</code>
     */
    public Builder clearStreaming() {
      
      streaming_ = false;
      onChanged();
      return this;
    }

    private boolean pivot_ ;
    /**
     * <pre>
     * Sets the pivot flag on the grid options to toggle visibility 
     * </pre>
     *
     * <code>bool pivot = 5;</code>
     */
    public boolean getPivot() {
      return pivot_;
    }
    /**
     * <pre>
     * Sets the pivot flag on the grid options to toggle visibility 
     * </pre>
     *
     * <code>bool pivot = 5;</code>
     */
    public Builder setPivot(boolean value) {
      
      pivot_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Sets the pivot flag on the grid options to toggle visibility 
     * </pre>
     *
     * <code>bool pivot = 5;</code>
     */
    public Builder clearPivot() {
      
      pivot_ = false;
      onChanged();
      return this;
    }

    private java.lang.Object rowNodeId_ = "";
    /**
     * <pre>
     * If streaming grid then we specify what attribute to sue as rowNodeId 
     * </pre>
     *
     * <code>string rowNodeId = 6;</code>
     */
    public java.lang.String getRowNodeId() {
      java.lang.Object ref = rowNodeId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        rowNodeId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * If streaming grid then we specify what attribute to sue as rowNodeId 
     * </pre>
     *
     * <code>string rowNodeId = 6;</code>
     */
    public com.google.protobuf.ByteString
        getRowNodeIdBytes() {
      java.lang.Object ref = rowNodeId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        rowNodeId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * If streaming grid then we specify what attribute to sue as rowNodeId 
     * </pre>
     *
     * <code>string rowNodeId = 6;</code>
     */
    public Builder setRowNodeId(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      rowNodeId_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If streaming grid then we specify what attribute to sue as rowNodeId 
     * </pre>
     *
     * <code>string rowNodeId = 6;</code>
     */
    public Builder clearRowNodeId() {
      
      rowNodeId_ = getDefaultInstance().getRowNodeId();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * If streaming grid then we specify what attribute to sue as rowNodeId 
     * </pre>
     *
     * <code>string rowNodeId = 6;</code>
     */
    public Builder setRowNodeIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      rowNodeId_ = value;
      onChanged();
      return this;
    }

    private boolean pagination_ ;
    /**
     * <pre>
     * optional if set to tru pagination will be used 
     * </pre>
     *
     * <code>bool pagination = 7;</code>
     */
    public boolean getPagination() {
      return pagination_;
    }
    /**
     * <pre>
     * optional if set to tru pagination will be used 
     * </pre>
     *
     * <code>bool pagination = 7;</code>
     */
    public Builder setPagination(boolean value) {
      
      pagination_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * optional if set to tru pagination will be used 
     * </pre>
     *
     * <code>bool pagination = 7;</code>
     */
    public Builder clearPagination() {
      
      pagination_ = false;
      onChanged();
      return this;
    }

    private int paginationPageSize_ ;
    /**
     * <pre>
     * if pagination is set to true then we set the data size per row 
     * </pre>
     *
     * <code>int32 paginationPageSize = 8;</code>
     */
    public int getPaginationPageSize() {
      return paginationPageSize_;
    }
    /**
     * <pre>
     * if pagination is set to true then we set the data size per row 
     * </pre>
     *
     * <code>int32 paginationPageSize = 8;</code>
     */
    public Builder setPaginationPageSize(int value) {
      
      paginationPageSize_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * if pagination is set to true then we set the data size per row 
     * </pre>
     *
     * <code>int32 paginationPageSize = 8;</code>
     */
    public Builder clearPaginationPageSize() {
      
      paginationPageSize_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:dunkware.chart.Grid)
  }

  // @@protoc_insertion_point(class_scope:dunkware.chart.Grid)
  private static final com.dunkware.net.proto.chart.Grid DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.dunkware.net.proto.chart.Grid();
  }

  public static com.dunkware.net.proto.chart.Grid getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Grid>
      PARSER = new com.google.protobuf.AbstractParser<Grid>() {
    @java.lang.Override
    public Grid parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Grid(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Grid> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Grid> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.dunkware.net.proto.chart.Grid getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

