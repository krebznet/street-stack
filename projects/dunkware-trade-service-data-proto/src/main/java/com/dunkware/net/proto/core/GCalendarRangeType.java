// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto

package com.dunkware.net.proto.core;

/**
 * <pre>
 * Calendar Range Type Enum
 * </pre>
 *
 * Protobuf enum {@code dunkware.core.GCalendarRangeType}
 */
public enum GCalendarRangeType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>DATE_RANGE = 0;</code>
   */
  DATE_RANGE(0),
  /**
   * <code>DATE_TIME_RANGE = 2;</code>
   */
  DATE_TIME_RANGE(2),
  /**
   * <code>TIME_RANGE = 3;</code>
   */
  TIME_RANGE(3),
  /**
   * <code>TIME_DURATION = 4;</code>
   */
  TIME_DURATION(4),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>DATE_RANGE = 0;</code>
   */
  public static final int DATE_RANGE_VALUE = 0;
  /**
   * <code>DATE_TIME_RANGE = 2;</code>
   */
  public static final int DATE_TIME_RANGE_VALUE = 2;
  /**
   * <code>TIME_RANGE = 3;</code>
   */
  public static final int TIME_RANGE_VALUE = 3;
  /**
   * <code>TIME_DURATION = 4;</code>
   */
  public static final int TIME_DURATION_VALUE = 4;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static GCalendarRangeType valueOf(int value) {
    return forNumber(value);
  }

  public static GCalendarRangeType forNumber(int value) {
    switch (value) {
      case 0: return DATE_RANGE;
      case 2: return DATE_TIME_RANGE;
      case 3: return TIME_RANGE;
      case 4: return TIME_DURATION;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<GCalendarRangeType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      GCalendarRangeType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<GCalendarRangeType>() {
          public GCalendarRangeType findValueByNumber(int number) {
            return GCalendarRangeType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.dunkware.net.proto.core.GCoreProto.getDescriptor().getEnumTypes().get(3);
  }

  private static final GCalendarRangeType[] VALUES = values();

  public static GCalendarRangeType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private GCalendarRangeType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:dunkware.core.GCalendarRangeType)
}

