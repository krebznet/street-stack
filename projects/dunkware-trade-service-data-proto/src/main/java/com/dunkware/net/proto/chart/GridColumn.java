// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chart.proto

package com.dunkware.net.proto.chart;

/**
 * <pre>
 * Start Required Fields 
 * </pre>
 *
 * Protobuf type {@code dunkware.chart.GridColumn}
 */
public  final class GridColumn extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:dunkware.chart.GridColumn)
    GridColumnOrBuilder {
private static final long serialVersionUID = 0L;
  // Use GridColumn.newBuilder() to construct.
  private GridColumn(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private GridColumn() {
    field_ = "";
    sortable_ = false;
    filter_ = false;
    rowDrag_ = false;
    headerName_ = "";
    valueParser_ = 0;
    cellClassRules_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    cellClass_ = "";
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private GridColumn(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            field_ = s;
            break;
          }
          case 16: {

            sortable_ = input.readBool();
            break;
          }
          case 24: {

            filter_ = input.readBool();
            break;
          }
          case 32: {

            rowDrag_ = input.readBool();
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            headerName_ = s;
            break;
          }
          case 48: {
            int rawValue = input.readEnum();

            valueParser_ = rawValue;
            break;
          }
          case 58: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
              cellClassRules_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000040;
            }
            cellClassRules_.add(s);
            break;
          }
          case 66: {
            java.lang.String s = input.readStringRequireUtf8();

            cellClass_ = s;
            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
        cellClassRules_ = cellClassRules_.getUnmodifiableView();
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.dunkware.net.proto.chart.ChartProto.internal_static_dunkware_chart_GridColumn_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.dunkware.net.proto.chart.ChartProto.internal_static_dunkware_chart_GridColumn_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.dunkware.net.proto.chart.GridColumn.class, com.dunkware.net.proto.chart.GridColumn.Builder.class);
  }

  private int bitField0_;
  public static final int FIELD_FIELD_NUMBER = 1;
  private volatile java.lang.Object field_;
  /**
   * <pre>
   * required field for column binding 
   * </pre>
   *
   * <code>string field = 1;</code>
   */
  public java.lang.String getField() {
    java.lang.Object ref = field_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      field_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * required field for column binding 
   * </pre>
   *
   * <code>string field = 1;</code>
   */
  public com.google.protobuf.ByteString
      getFieldBytes() {
    java.lang.Object ref = field_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      field_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SORTABLE_FIELD_NUMBER = 2;
  private boolean sortable_;
  /**
   * <pre>
   * Specifies if column is sortable if not set on server default value is false 
   * </pre>
   *
   * <code>bool sortable = 2;</code>
   */
  public boolean getSortable() {
    return sortable_;
  }

  public static final int FILTER_FIELD_NUMBER = 3;
  private boolean filter_;
  /**
   * <pre>
   * Specifies is column is filterable if not set default value is false 
   * </pre>
   *
   * <code>bool filter = 3;</code>
   */
  public boolean getFilter() {
    return filter_;
  }

  public static final int ROWDRAG_FIELD_NUMBER = 4;
  private boolean rowDrag_;
  /**
   * <pre>
   * Specifies if row drag is enabled default is false 
   * </pre>
   *
   * <code>bool rowDrag = 4;</code>
   */
  public boolean getRowDrag() {
    return rowDrag_;
  }

  public static final int HEADERNAME_FIELD_NUMBER = 5;
  private volatile java.lang.Object headerName_;
  /**
   * <pre>
   * Optional headerName that if not null will set the name of column 
   * </pre>
   *
   * <code>string headerName = 5;</code>
   */
  public java.lang.String getHeaderName() {
    java.lang.Object ref = headerName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      headerName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Optional headerName that if not null will set the name of column 
   * </pre>
   *
   * <code>string headerName = 5;</code>
   */
  public com.google.protobuf.ByteString
      getHeaderNameBytes() {
    java.lang.Object ref = headerName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      headerName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int VALUEPARSER_FIELD_NUMBER = 6;
  private int valueParser_;
  /**
   * <pre>
   * Optional value parser that matches a function name from enum 
   * </pre>
   *
   * <code>.dunkware.chart.GridValueParser valueParser = 6;</code>
   */
  public int getValueParserValue() {
    return valueParser_;
  }
  /**
   * <pre>
   * Optional value parser that matches a function name from enum 
   * </pre>
   *
   * <code>.dunkware.chart.GridValueParser valueParser = 6;</code>
   */
  public com.dunkware.net.proto.chart.GridValueParser getValueParser() {
    @SuppressWarnings("deprecation")
    com.dunkware.net.proto.chart.GridValueParser result = com.dunkware.net.proto.chart.GridValueParser.valueOf(valueParser_);
    return result == null ? com.dunkware.net.proto.chart.GridValueParser.UNRECOGNIZED : result;
  }

  public static final int CELLCLASSRULES_FIELD_NUMBER = 7;
  private com.google.protobuf.LazyStringList cellClassRules_;
  /**
   * <pre>
   ** Optional list of cellClassRules of gets configured in the client like this...
   *cellClassRules: {
   *'rag-green': 'x &lt; 20',
   *'rag-amber': 'x &gt;= 20 &amp;&amp; x &lt; 25',
   *'rag-red': 'x &gt;= 25'
   *},
   * </pre>
   *
   * <code>repeated string cellClassRules = 7;</code>
   */
  public com.google.protobuf.ProtocolStringList
      getCellClassRulesList() {
    return cellClassRules_;
  }
  /**
   * <pre>
   ** Optional list of cellClassRules of gets configured in the client like this...
   *cellClassRules: {
   *'rag-green': 'x &lt; 20',
   *'rag-amber': 'x &gt;= 20 &amp;&amp; x &lt; 25',
   *'rag-red': 'x &gt;= 25'
   *},
   * </pre>
   *
   * <code>repeated string cellClassRules = 7;</code>
   */
  public int getCellClassRulesCount() {
    return cellClassRules_.size();
  }
  /**
   * <pre>
   ** Optional list of cellClassRules of gets configured in the client like this...
   *cellClassRules: {
   *'rag-green': 'x &lt; 20',
   *'rag-amber': 'x &gt;= 20 &amp;&amp; x &lt; 25',
   *'rag-red': 'x &gt;= 25'
   *},
   * </pre>
   *
   * <code>repeated string cellClassRules = 7;</code>
   */
  public java.lang.String getCellClassRules(int index) {
    return cellClassRules_.get(index);
  }
  /**
   * <pre>
   ** Optional list of cellClassRules of gets configured in the client like this...
   *cellClassRules: {
   *'rag-green': 'x &lt; 20',
   *'rag-amber': 'x &gt;= 20 &amp;&amp; x &lt; 25',
   *'rag-red': 'x &gt;= 25'
   *},
   * </pre>
   *
   * <code>repeated string cellClassRules = 7;</code>
   */
  public com.google.protobuf.ByteString
      getCellClassRulesBytes(int index) {
    return cellClassRules_.getByteString(index);
  }

  public static final int CELLCLASS_FIELD_NUMBER = 8;
  private volatile java.lang.Object cellClass_;
  /**
   * <pre>
   * optional cell class that must be a valid css class name 
   * </pre>
   *
   * <code>string cellClass = 8;</code>
   */
  public java.lang.String getCellClass() {
    java.lang.Object ref = cellClass_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      cellClass_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * optional cell class that must be a valid css class name 
   * </pre>
   *
   * <code>string cellClass = 8;</code>
   */
  public com.google.protobuf.ByteString
      getCellClassBytes() {
    java.lang.Object ref = cellClass_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      cellClass_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getFieldBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, field_);
    }
    if (sortable_ != false) {
      output.writeBool(2, sortable_);
    }
    if (filter_ != false) {
      output.writeBool(3, filter_);
    }
    if (rowDrag_ != false) {
      output.writeBool(4, rowDrag_);
    }
    if (!getHeaderNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, headerName_);
    }
    if (valueParser_ != com.dunkware.net.proto.chart.GridValueParser.numberParser.getNumber()) {
      output.writeEnum(6, valueParser_);
    }
    for (int i = 0; i < cellClassRules_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, cellClassRules_.getRaw(i));
    }
    if (!getCellClassBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 8, cellClass_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getFieldBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, field_);
    }
    if (sortable_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(2, sortable_);
    }
    if (filter_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(3, filter_);
    }
    if (rowDrag_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, rowDrag_);
    }
    if (!getHeaderNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, headerName_);
    }
    if (valueParser_ != com.dunkware.net.proto.chart.GridValueParser.numberParser.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(6, valueParser_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < cellClassRules_.size(); i++) {
        dataSize += computeStringSizeNoTag(cellClassRules_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getCellClassRulesList().size();
    }
    if (!getCellClassBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, cellClass_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.dunkware.net.proto.chart.GridColumn)) {
      return super.equals(obj);
    }
    com.dunkware.net.proto.chart.GridColumn other = (com.dunkware.net.proto.chart.GridColumn) obj;

    boolean result = true;
    result = result && getField()
        .equals(other.getField());
    result = result && (getSortable()
        == other.getSortable());
    result = result && (getFilter()
        == other.getFilter());
    result = result && (getRowDrag()
        == other.getRowDrag());
    result = result && getHeaderName()
        .equals(other.getHeaderName());
    result = result && valueParser_ == other.valueParser_;
    result = result && getCellClassRulesList()
        .equals(other.getCellClassRulesList());
    result = result && getCellClass()
        .equals(other.getCellClass());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + FIELD_FIELD_NUMBER;
    hash = (53 * hash) + getField().hashCode();
    hash = (37 * hash) + SORTABLE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getSortable());
    hash = (37 * hash) + FILTER_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getFilter());
    hash = (37 * hash) + ROWDRAG_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getRowDrag());
    hash = (37 * hash) + HEADERNAME_FIELD_NUMBER;
    hash = (53 * hash) + getHeaderName().hashCode();
    hash = (37 * hash) + VALUEPARSER_FIELD_NUMBER;
    hash = (53 * hash) + valueParser_;
    if (getCellClassRulesCount() > 0) {
      hash = (37 * hash) + CELLCLASSRULES_FIELD_NUMBER;
      hash = (53 * hash) + getCellClassRulesList().hashCode();
    }
    hash = (37 * hash) + CELLCLASS_FIELD_NUMBER;
    hash = (53 * hash) + getCellClass().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.dunkware.net.proto.chart.GridColumn parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.dunkware.net.proto.chart.GridColumn parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.dunkware.net.proto.chart.GridColumn parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.dunkware.net.proto.chart.GridColumn parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.dunkware.net.proto.chart.GridColumn parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.dunkware.net.proto.chart.GridColumn parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.dunkware.net.proto.chart.GridColumn parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.dunkware.net.proto.chart.GridColumn parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.dunkware.net.proto.chart.GridColumn parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.dunkware.net.proto.chart.GridColumn parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.dunkware.net.proto.chart.GridColumn parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.dunkware.net.proto.chart.GridColumn parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.dunkware.net.proto.chart.GridColumn prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Start Required Fields 
   * </pre>
   *
   * Protobuf type {@code dunkware.chart.GridColumn}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:dunkware.chart.GridColumn)
      com.dunkware.net.proto.chart.GridColumnOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dunkware.net.proto.chart.ChartProto.internal_static_dunkware_chart_GridColumn_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dunkware.net.proto.chart.ChartProto.internal_static_dunkware_chart_GridColumn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dunkware.net.proto.chart.GridColumn.class, com.dunkware.net.proto.chart.GridColumn.Builder.class);
    }

    // Construct using com.dunkware.net.proto.chart.GridColumn.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      field_ = "";

      sortable_ = false;

      filter_ = false;

      rowDrag_ = false;

      headerName_ = "";

      valueParser_ = 0;

      cellClassRules_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000040);
      cellClass_ = "";

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.dunkware.net.proto.chart.ChartProto.internal_static_dunkware_chart_GridColumn_descriptor;
    }

    @java.lang.Override
    public com.dunkware.net.proto.chart.GridColumn getDefaultInstanceForType() {
      return com.dunkware.net.proto.chart.GridColumn.getDefaultInstance();
    }

    @java.lang.Override
    public com.dunkware.net.proto.chart.GridColumn build() {
      com.dunkware.net.proto.chart.GridColumn result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.dunkware.net.proto.chart.GridColumn buildPartial() {
      com.dunkware.net.proto.chart.GridColumn result = new com.dunkware.net.proto.chart.GridColumn(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.field_ = field_;
      result.sortable_ = sortable_;
      result.filter_ = filter_;
      result.rowDrag_ = rowDrag_;
      result.headerName_ = headerName_;
      result.valueParser_ = valueParser_;
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        cellClassRules_ = cellClassRules_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000040);
      }
      result.cellClassRules_ = cellClassRules_;
      result.cellClass_ = cellClass_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.dunkware.net.proto.chart.GridColumn) {
        return mergeFrom((com.dunkware.net.proto.chart.GridColumn)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.dunkware.net.proto.chart.GridColumn other) {
      if (other == com.dunkware.net.proto.chart.GridColumn.getDefaultInstance()) return this;
      if (!other.getField().isEmpty()) {
        field_ = other.field_;
        onChanged();
      }
      if (other.getSortable() != false) {
        setSortable(other.getSortable());
      }
      if (other.getFilter() != false) {
        setFilter(other.getFilter());
      }
      if (other.getRowDrag() != false) {
        setRowDrag(other.getRowDrag());
      }
      if (!other.getHeaderName().isEmpty()) {
        headerName_ = other.headerName_;
        onChanged();
      }
      if (other.valueParser_ != 0) {
        setValueParserValue(other.getValueParserValue());
      }
      if (!other.cellClassRules_.isEmpty()) {
        if (cellClassRules_.isEmpty()) {
          cellClassRules_ = other.cellClassRules_;
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          ensureCellClassRulesIsMutable();
          cellClassRules_.addAll(other.cellClassRules_);
        }
        onChanged();
      }
      if (!other.getCellClass().isEmpty()) {
        cellClass_ = other.cellClass_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.dunkware.net.proto.chart.GridColumn parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.dunkware.net.proto.chart.GridColumn) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object field_ = "";
    /**
     * <pre>
     * required field for column binding 
     * </pre>
     *
     * <code>string field = 1;</code>
     */
    public java.lang.String getField() {
      java.lang.Object ref = field_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        field_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * required field for column binding 
     * </pre>
     *
     * <code>string field = 1;</code>
     */
    public com.google.protobuf.ByteString
        getFieldBytes() {
      java.lang.Object ref = field_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        field_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * required field for column binding 
     * </pre>
     *
     * <code>string field = 1;</code>
     */
    public Builder setField(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      field_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * required field for column binding 
     * </pre>
     *
     * <code>string field = 1;</code>
     */
    public Builder clearField() {
      
      field_ = getDefaultInstance().getField();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * required field for column binding 
     * </pre>
     *
     * <code>string field = 1;</code>
     */
    public Builder setFieldBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      field_ = value;
      onChanged();
      return this;
    }

    private boolean sortable_ ;
    /**
     * <pre>
     * Specifies if column is sortable if not set on server default value is false 
     * </pre>
     *
     * <code>bool sortable = 2;</code>
     */
    public boolean getSortable() {
      return sortable_;
    }
    /**
     * <pre>
     * Specifies if column is sortable if not set on server default value is false 
     * </pre>
     *
     * <code>bool sortable = 2;</code>
     */
    public Builder setSortable(boolean value) {
      
      sortable_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies if column is sortable if not set on server default value is false 
     * </pre>
     *
     * <code>bool sortable = 2;</code>
     */
    public Builder clearSortable() {
      
      sortable_ = false;
      onChanged();
      return this;
    }

    private boolean filter_ ;
    /**
     * <pre>
     * Specifies is column is filterable if not set default value is false 
     * </pre>
     *
     * <code>bool filter = 3;</code>
     */
    public boolean getFilter() {
      return filter_;
    }
    /**
     * <pre>
     * Specifies is column is filterable if not set default value is false 
     * </pre>
     *
     * <code>bool filter = 3;</code>
     */
    public Builder setFilter(boolean value) {
      
      filter_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies is column is filterable if not set default value is false 
     * </pre>
     *
     * <code>bool filter = 3;</code>
     */
    public Builder clearFilter() {
      
      filter_ = false;
      onChanged();
      return this;
    }

    private boolean rowDrag_ ;
    /**
     * <pre>
     * Specifies if row drag is enabled default is false 
     * </pre>
     *
     * <code>bool rowDrag = 4;</code>
     */
    public boolean getRowDrag() {
      return rowDrag_;
    }
    /**
     * <pre>
     * Specifies if row drag is enabled default is false 
     * </pre>
     *
     * <code>bool rowDrag = 4;</code>
     */
    public Builder setRowDrag(boolean value) {
      
      rowDrag_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies if row drag is enabled default is false 
     * </pre>
     *
     * <code>bool rowDrag = 4;</code>
     */
    public Builder clearRowDrag() {
      
      rowDrag_ = false;
      onChanged();
      return this;
    }

    private java.lang.Object headerName_ = "";
    /**
     * <pre>
     * Optional headerName that if not null will set the name of column 
     * </pre>
     *
     * <code>string headerName = 5;</code>
     */
    public java.lang.String getHeaderName() {
      java.lang.Object ref = headerName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        headerName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Optional headerName that if not null will set the name of column 
     * </pre>
     *
     * <code>string headerName = 5;</code>
     */
    public com.google.protobuf.ByteString
        getHeaderNameBytes() {
      java.lang.Object ref = headerName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        headerName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Optional headerName that if not null will set the name of column 
     * </pre>
     *
     * <code>string headerName = 5;</code>
     */
    public Builder setHeaderName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      headerName_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional headerName that if not null will set the name of column 
     * </pre>
     *
     * <code>string headerName = 5;</code>
     */
    public Builder clearHeaderName() {
      
      headerName_ = getDefaultInstance().getHeaderName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional headerName that if not null will set the name of column 
     * </pre>
     *
     * <code>string headerName = 5;</code>
     */
    public Builder setHeaderNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      headerName_ = value;
      onChanged();
      return this;
    }

    private int valueParser_ = 0;
    /**
     * <pre>
     * Optional value parser that matches a function name from enum 
     * </pre>
     *
     * <code>.dunkware.chart.GridValueParser valueParser = 6;</code>
     */
    public int getValueParserValue() {
      return valueParser_;
    }
    /**
     * <pre>
     * Optional value parser that matches a function name from enum 
     * </pre>
     *
     * <code>.dunkware.chart.GridValueParser valueParser = 6;</code>
     */
    public Builder setValueParserValue(int value) {
      valueParser_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional value parser that matches a function name from enum 
     * </pre>
     *
     * <code>.dunkware.chart.GridValueParser valueParser = 6;</code>
     */
    public com.dunkware.net.proto.chart.GridValueParser getValueParser() {
      @SuppressWarnings("deprecation")
      com.dunkware.net.proto.chart.GridValueParser result = com.dunkware.net.proto.chart.GridValueParser.valueOf(valueParser_);
      return result == null ? com.dunkware.net.proto.chart.GridValueParser.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Optional value parser that matches a function name from enum 
     * </pre>
     *
     * <code>.dunkware.chart.GridValueParser valueParser = 6;</code>
     */
    public Builder setValueParser(com.dunkware.net.proto.chart.GridValueParser value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      valueParser_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional value parser that matches a function name from enum 
     * </pre>
     *
     * <code>.dunkware.chart.GridValueParser valueParser = 6;</code>
     */
    public Builder clearValueParser() {
      
      valueParser_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList cellClassRules_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureCellClassRulesIsMutable() {
      if (!((bitField0_ & 0x00000040) == 0x00000040)) {
        cellClassRules_ = new com.google.protobuf.LazyStringArrayList(cellClassRules_);
        bitField0_ |= 0x00000040;
       }
    }
    /**
     * <pre>
     ** Optional list of cellClassRules of gets configured in the client like this...
     *cellClassRules: {
     *'rag-green': 'x &lt; 20',
     *'rag-amber': 'x &gt;= 20 &amp;&amp; x &lt; 25',
     *'rag-red': 'x &gt;= 25'
     *},
     * </pre>
     *
     * <code>repeated string cellClassRules = 7;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getCellClassRulesList() {
      return cellClassRules_.getUnmodifiableView();
    }
    /**
     * <pre>
     ** Optional list of cellClassRules of gets configured in the client like this...
     *cellClassRules: {
     *'rag-green': 'x &lt; 20',
     *'rag-amber': 'x &gt;= 20 &amp;&amp; x &lt; 25',
     *'rag-red': 'x &gt;= 25'
     *},
     * </pre>
     *
     * <code>repeated string cellClassRules = 7;</code>
     */
    public int getCellClassRulesCount() {
      return cellClassRules_.size();
    }
    /**
     * <pre>
     ** Optional list of cellClassRules of gets configured in the client like this...
     *cellClassRules: {
     *'rag-green': 'x &lt; 20',
     *'rag-amber': 'x &gt;= 20 &amp;&amp; x &lt; 25',
     *'rag-red': 'x &gt;= 25'
     *},
     * </pre>
     *
     * <code>repeated string cellClassRules = 7;</code>
     */
    public java.lang.String getCellClassRules(int index) {
      return cellClassRules_.get(index);
    }
    /**
     * <pre>
     ** Optional list of cellClassRules of gets configured in the client like this...
     *cellClassRules: {
     *'rag-green': 'x &lt; 20',
     *'rag-amber': 'x &gt;= 20 &amp;&amp; x &lt; 25',
     *'rag-red': 'x &gt;= 25'
     *},
     * </pre>
     *
     * <code>repeated string cellClassRules = 7;</code>
     */
    public com.google.protobuf.ByteString
        getCellClassRulesBytes(int index) {
      return cellClassRules_.getByteString(index);
    }
    /**
     * <pre>
     ** Optional list of cellClassRules of gets configured in the client like this...
     *cellClassRules: {
     *'rag-green': 'x &lt; 20',
     *'rag-amber': 'x &gt;= 20 &amp;&amp; x &lt; 25',
     *'rag-red': 'x &gt;= 25'
     *},
     * </pre>
     *
     * <code>repeated string cellClassRules = 7;</code>
     */
    public Builder setCellClassRules(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureCellClassRulesIsMutable();
      cellClassRules_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     ** Optional list of cellClassRules of gets configured in the client like this...
     *cellClassRules: {
     *'rag-green': 'x &lt; 20',
     *'rag-amber': 'x &gt;= 20 &amp;&amp; x &lt; 25',
     *'rag-red': 'x &gt;= 25'
     *},
     * </pre>
     *
     * <code>repeated string cellClassRules = 7;</code>
     */
    public Builder addCellClassRules(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureCellClassRulesIsMutable();
      cellClassRules_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     ** Optional list of cellClassRules of gets configured in the client like this...
     *cellClassRules: {
     *'rag-green': 'x &lt; 20',
     *'rag-amber': 'x &gt;= 20 &amp;&amp; x &lt; 25',
     *'rag-red': 'x &gt;= 25'
     *},
     * </pre>
     *
     * <code>repeated string cellClassRules = 7;</code>
     */
    public Builder addAllCellClassRules(
        java.lang.Iterable<java.lang.String> values) {
      ensureCellClassRulesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, cellClassRules_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     ** Optional list of cellClassRules of gets configured in the client like this...
     *cellClassRules: {
     *'rag-green': 'x &lt; 20',
     *'rag-amber': 'x &gt;= 20 &amp;&amp; x &lt; 25',
     *'rag-red': 'x &gt;= 25'
     *},
     * </pre>
     *
     * <code>repeated string cellClassRules = 7;</code>
     */
    public Builder clearCellClassRules() {
      cellClassRules_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000040);
      onChanged();
      return this;
    }
    /**
     * <pre>
     ** Optional list of cellClassRules of gets configured in the client like this...
     *cellClassRules: {
     *'rag-green': 'x &lt; 20',
     *'rag-amber': 'x &gt;= 20 &amp;&amp; x &lt; 25',
     *'rag-red': 'x &gt;= 25'
     *},
     * </pre>
     *
     * <code>repeated string cellClassRules = 7;</code>
     */
    public Builder addCellClassRulesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureCellClassRulesIsMutable();
      cellClassRules_.add(value);
      onChanged();
      return this;
    }

    private java.lang.Object cellClass_ = "";
    /**
     * <pre>
     * optional cell class that must be a valid css class name 
     * </pre>
     *
     * <code>string cellClass = 8;</code>
     */
    public java.lang.String getCellClass() {
      java.lang.Object ref = cellClass_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        cellClass_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * optional cell class that must be a valid css class name 
     * </pre>
     *
     * <code>string cellClass = 8;</code>
     */
    public com.google.protobuf.ByteString
        getCellClassBytes() {
      java.lang.Object ref = cellClass_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        cellClass_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * optional cell class that must be a valid css class name 
     * </pre>
     *
     * <code>string cellClass = 8;</code>
     */
    public Builder setCellClass(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      cellClass_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * optional cell class that must be a valid css class name 
     * </pre>
     *
     * <code>string cellClass = 8;</code>
     */
    public Builder clearCellClass() {
      
      cellClass_ = getDefaultInstance().getCellClass();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * optional cell class that must be a valid css class name 
     * </pre>
     *
     * <code>string cellClass = 8;</code>
     */
    public Builder setCellClassBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      cellClass_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:dunkware.chart.GridColumn)
  }

  // @@protoc_insertion_point(class_scope:dunkware.chart.GridColumn)
  private static final com.dunkware.net.proto.chart.GridColumn DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.dunkware.net.proto.chart.GridColumn();
  }

  public static com.dunkware.net.proto.chart.GridColumn getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<GridColumn>
      PARSER = new com.google.protobuf.AbstractParser<GridColumn>() {
    @java.lang.Override
    public GridColumn parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new GridColumn(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<GridColumn> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<GridColumn> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.dunkware.net.proto.chart.GridColumn getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

