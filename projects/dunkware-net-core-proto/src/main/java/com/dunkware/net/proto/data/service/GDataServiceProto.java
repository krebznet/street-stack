// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data-service.proto

package com.dunkware.net.proto.data.service;

public final class GDataServiceProto {
  private GDataServiceProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022data-service.proto\022\025dunkware.data.serv" +
      "ice\032\014stream.proto\032\ncore.proto2{\n\014GDataSe" +
      "rvice\022k\n\014signalSearch\022+.dunkware.stream." +
      "GEntitySignalSearchRequest\032,.dunkware.st" +
      "ream.GEntitySignalSearchResponse\"\000B:\n#co" +
      "m.dunkware.net.proto.data.serviceB\021GData" +
      "ServiceProtoP\001b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.dunkware.net.proto.stream.GStreamProto.getDescriptor(),
          com.dunkware.net.proto.core.GCoreProto.getDescriptor(),
        }, assigner);
    com.dunkware.net.proto.stream.GStreamProto.getDescriptor();
    com.dunkware.net.proto.core.GCoreProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
