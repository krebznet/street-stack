// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto

package com.dunkware.net.proto.core;

/**
 * Protobuf type {@code dunkware.core.GPipe}
 */
public  final class GPipe extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:dunkware.core.GPipe)
    GPipeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use GPipe.newBuilder() to construct.
  private GPipe(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private GPipe() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private GPipe(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 18: {
            com.dunkware.net.proto.core.GDatePipe.Builder subBuilder = null;
            if (pipeTypeCase_ == 2) {
              subBuilder = ((com.dunkware.net.proto.core.GDatePipe) pipeType_).toBuilder();
            }
            pipeType_ =
                input.readMessage(com.dunkware.net.proto.core.GDatePipe.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.dunkware.net.proto.core.GDatePipe) pipeType_);
              pipeType_ = subBuilder.buildPartial();
            }
            pipeTypeCase_ = 2;
            break;
          }
          case 26: {
            com.dunkware.net.proto.core.GPercentPipe.Builder subBuilder = null;
            if (pipeTypeCase_ == 3) {
              subBuilder = ((com.dunkware.net.proto.core.GPercentPipe) pipeType_).toBuilder();
            }
            pipeType_ =
                input.readMessage(com.dunkware.net.proto.core.GPercentPipe.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.dunkware.net.proto.core.GPercentPipe) pipeType_);
              pipeType_ = subBuilder.buildPartial();
            }
            pipeTypeCase_ = 3;
            break;
          }
          case 34: {
            com.dunkware.net.proto.core.GDecimalPipe.Builder subBuilder = null;
            if (pipeTypeCase_ == 4) {
              subBuilder = ((com.dunkware.net.proto.core.GDecimalPipe) pipeType_).toBuilder();
            }
            pipeType_ =
                input.readMessage(com.dunkware.net.proto.core.GDecimalPipe.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.dunkware.net.proto.core.GDecimalPipe) pipeType_);
              pipeType_ = subBuilder.buildPartial();
            }
            pipeTypeCase_ = 4;
            break;
          }
          case 42: {
            com.dunkware.net.proto.core.GCurrencyPipe.Builder subBuilder = null;
            if (pipeTypeCase_ == 5) {
              subBuilder = ((com.dunkware.net.proto.core.GCurrencyPipe) pipeType_).toBuilder();
            }
            pipeType_ =
                input.readMessage(com.dunkware.net.proto.core.GCurrencyPipe.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.dunkware.net.proto.core.GCurrencyPipe) pipeType_);
              pipeType_ = subBuilder.buildPartial();
            }
            pipeTypeCase_ = 5;
            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.dunkware.net.proto.core.GCoreProto.internal_static_dunkware_core_GPipe_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.dunkware.net.proto.core.GCoreProto.internal_static_dunkware_core_GPipe_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.dunkware.net.proto.core.GPipe.class, com.dunkware.net.proto.core.GPipe.Builder.class);
  }

  private int pipeTypeCase_ = 0;
  private java.lang.Object pipeType_;
  public enum PipeTypeCase
      implements com.google.protobuf.Internal.EnumLite {
    DATE(2),
    PERCENT(3),
    DECIMAL(4),
    CURRENCY(5),
    PIPETYPE_NOT_SET(0);
    private final int value;
    private PipeTypeCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PipeTypeCase valueOf(int value) {
      return forNumber(value);
    }

    public static PipeTypeCase forNumber(int value) {
      switch (value) {
        case 2: return DATE;
        case 3: return PERCENT;
        case 4: return DECIMAL;
        case 5: return CURRENCY;
        case 0: return PIPETYPE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public PipeTypeCase
  getPipeTypeCase() {
    return PipeTypeCase.forNumber(
        pipeTypeCase_);
  }

  public static final int DATE_FIELD_NUMBER = 2;
  /**
   * <code>.dunkware.core.GDatePipe date = 2;</code>
   */
  public boolean hasDate() {
    return pipeTypeCase_ == 2;
  }
  /**
   * <code>.dunkware.core.GDatePipe date = 2;</code>
   */
  public com.dunkware.net.proto.core.GDatePipe getDate() {
    if (pipeTypeCase_ == 2) {
       return (com.dunkware.net.proto.core.GDatePipe) pipeType_;
    }
    return com.dunkware.net.proto.core.GDatePipe.getDefaultInstance();
  }
  /**
   * <code>.dunkware.core.GDatePipe date = 2;</code>
   */
  public com.dunkware.net.proto.core.GDatePipeOrBuilder getDateOrBuilder() {
    if (pipeTypeCase_ == 2) {
       return (com.dunkware.net.proto.core.GDatePipe) pipeType_;
    }
    return com.dunkware.net.proto.core.GDatePipe.getDefaultInstance();
  }

  public static final int PERCENT_FIELD_NUMBER = 3;
  /**
   * <code>.dunkware.core.GPercentPipe percent = 3;</code>
   */
  public boolean hasPercent() {
    return pipeTypeCase_ == 3;
  }
  /**
   * <code>.dunkware.core.GPercentPipe percent = 3;</code>
   */
  public com.dunkware.net.proto.core.GPercentPipe getPercent() {
    if (pipeTypeCase_ == 3) {
       return (com.dunkware.net.proto.core.GPercentPipe) pipeType_;
    }
    return com.dunkware.net.proto.core.GPercentPipe.getDefaultInstance();
  }
  /**
   * <code>.dunkware.core.GPercentPipe percent = 3;</code>
   */
  public com.dunkware.net.proto.core.GPercentPipeOrBuilder getPercentOrBuilder() {
    if (pipeTypeCase_ == 3) {
       return (com.dunkware.net.proto.core.GPercentPipe) pipeType_;
    }
    return com.dunkware.net.proto.core.GPercentPipe.getDefaultInstance();
  }

  public static final int DECIMAL_FIELD_NUMBER = 4;
  /**
   * <code>.dunkware.core.GDecimalPipe decimal = 4;</code>
   */
  public boolean hasDecimal() {
    return pipeTypeCase_ == 4;
  }
  /**
   * <code>.dunkware.core.GDecimalPipe decimal = 4;</code>
   */
  public com.dunkware.net.proto.core.GDecimalPipe getDecimal() {
    if (pipeTypeCase_ == 4) {
       return (com.dunkware.net.proto.core.GDecimalPipe) pipeType_;
    }
    return com.dunkware.net.proto.core.GDecimalPipe.getDefaultInstance();
  }
  /**
   * <code>.dunkware.core.GDecimalPipe decimal = 4;</code>
   */
  public com.dunkware.net.proto.core.GDecimalPipeOrBuilder getDecimalOrBuilder() {
    if (pipeTypeCase_ == 4) {
       return (com.dunkware.net.proto.core.GDecimalPipe) pipeType_;
    }
    return com.dunkware.net.proto.core.GDecimalPipe.getDefaultInstance();
  }

  public static final int CURRENCY_FIELD_NUMBER = 5;
  /**
   * <code>.dunkware.core.GCurrencyPipe currency = 5;</code>
   */
  public boolean hasCurrency() {
    return pipeTypeCase_ == 5;
  }
  /**
   * <code>.dunkware.core.GCurrencyPipe currency = 5;</code>
   */
  public com.dunkware.net.proto.core.GCurrencyPipe getCurrency() {
    if (pipeTypeCase_ == 5) {
       return (com.dunkware.net.proto.core.GCurrencyPipe) pipeType_;
    }
    return com.dunkware.net.proto.core.GCurrencyPipe.getDefaultInstance();
  }
  /**
   * <code>.dunkware.core.GCurrencyPipe currency = 5;</code>
   */
  public com.dunkware.net.proto.core.GCurrencyPipeOrBuilder getCurrencyOrBuilder() {
    if (pipeTypeCase_ == 5) {
       return (com.dunkware.net.proto.core.GCurrencyPipe) pipeType_;
    }
    return com.dunkware.net.proto.core.GCurrencyPipe.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (pipeTypeCase_ == 2) {
      output.writeMessage(2, (com.dunkware.net.proto.core.GDatePipe) pipeType_);
    }
    if (pipeTypeCase_ == 3) {
      output.writeMessage(3, (com.dunkware.net.proto.core.GPercentPipe) pipeType_);
    }
    if (pipeTypeCase_ == 4) {
      output.writeMessage(4, (com.dunkware.net.proto.core.GDecimalPipe) pipeType_);
    }
    if (pipeTypeCase_ == 5) {
      output.writeMessage(5, (com.dunkware.net.proto.core.GCurrencyPipe) pipeType_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (pipeTypeCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.dunkware.net.proto.core.GDatePipe) pipeType_);
    }
    if (pipeTypeCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.dunkware.net.proto.core.GPercentPipe) pipeType_);
    }
    if (pipeTypeCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (com.dunkware.net.proto.core.GDecimalPipe) pipeType_);
    }
    if (pipeTypeCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (com.dunkware.net.proto.core.GCurrencyPipe) pipeType_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.dunkware.net.proto.core.GPipe)) {
      return super.equals(obj);
    }
    com.dunkware.net.proto.core.GPipe other = (com.dunkware.net.proto.core.GPipe) obj;

    boolean result = true;
    result = result && getPipeTypeCase().equals(
        other.getPipeTypeCase());
    if (!result) return false;
    switch (pipeTypeCase_) {
      case 2:
        result = result && getDate()
            .equals(other.getDate());
        break;
      case 3:
        result = result && getPercent()
            .equals(other.getPercent());
        break;
      case 4:
        result = result && getDecimal()
            .equals(other.getDecimal());
        break;
      case 5:
        result = result && getCurrency()
            .equals(other.getCurrency());
        break;
      case 0:
      default:
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (pipeTypeCase_) {
      case 2:
        hash = (37 * hash) + DATE_FIELD_NUMBER;
        hash = (53 * hash) + getDate().hashCode();
        break;
      case 3:
        hash = (37 * hash) + PERCENT_FIELD_NUMBER;
        hash = (53 * hash) + getPercent().hashCode();
        break;
      case 4:
        hash = (37 * hash) + DECIMAL_FIELD_NUMBER;
        hash = (53 * hash) + getDecimal().hashCode();
        break;
      case 5:
        hash = (37 * hash) + CURRENCY_FIELD_NUMBER;
        hash = (53 * hash) + getCurrency().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.dunkware.net.proto.core.GPipe parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.dunkware.net.proto.core.GPipe parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.dunkware.net.proto.core.GPipe parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.dunkware.net.proto.core.GPipe parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.dunkware.net.proto.core.GPipe parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.dunkware.net.proto.core.GPipe parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.dunkware.net.proto.core.GPipe parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.dunkware.net.proto.core.GPipe parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.dunkware.net.proto.core.GPipe parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.dunkware.net.proto.core.GPipe parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.dunkware.net.proto.core.GPipe parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.dunkware.net.proto.core.GPipe parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.dunkware.net.proto.core.GPipe prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code dunkware.core.GPipe}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:dunkware.core.GPipe)
      com.dunkware.net.proto.core.GPipeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.dunkware.net.proto.core.GCoreProto.internal_static_dunkware_core_GPipe_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.dunkware.net.proto.core.GCoreProto.internal_static_dunkware_core_GPipe_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.dunkware.net.proto.core.GPipe.class, com.dunkware.net.proto.core.GPipe.Builder.class);
    }

    // Construct using com.dunkware.net.proto.core.GPipe.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      pipeTypeCase_ = 0;
      pipeType_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.dunkware.net.proto.core.GCoreProto.internal_static_dunkware_core_GPipe_descriptor;
    }

    @java.lang.Override
    public com.dunkware.net.proto.core.GPipe getDefaultInstanceForType() {
      return com.dunkware.net.proto.core.GPipe.getDefaultInstance();
    }

    @java.lang.Override
    public com.dunkware.net.proto.core.GPipe build() {
      com.dunkware.net.proto.core.GPipe result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.dunkware.net.proto.core.GPipe buildPartial() {
      com.dunkware.net.proto.core.GPipe result = new com.dunkware.net.proto.core.GPipe(this);
      if (pipeTypeCase_ == 2) {
        if (dateBuilder_ == null) {
          result.pipeType_ = pipeType_;
        } else {
          result.pipeType_ = dateBuilder_.build();
        }
      }
      if (pipeTypeCase_ == 3) {
        if (percentBuilder_ == null) {
          result.pipeType_ = pipeType_;
        } else {
          result.pipeType_ = percentBuilder_.build();
        }
      }
      if (pipeTypeCase_ == 4) {
        if (decimalBuilder_ == null) {
          result.pipeType_ = pipeType_;
        } else {
          result.pipeType_ = decimalBuilder_.build();
        }
      }
      if (pipeTypeCase_ == 5) {
        if (currencyBuilder_ == null) {
          result.pipeType_ = pipeType_;
        } else {
          result.pipeType_ = currencyBuilder_.build();
        }
      }
      result.pipeTypeCase_ = pipeTypeCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.dunkware.net.proto.core.GPipe) {
        return mergeFrom((com.dunkware.net.proto.core.GPipe)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.dunkware.net.proto.core.GPipe other) {
      if (other == com.dunkware.net.proto.core.GPipe.getDefaultInstance()) return this;
      switch (other.getPipeTypeCase()) {
        case DATE: {
          mergeDate(other.getDate());
          break;
        }
        case PERCENT: {
          mergePercent(other.getPercent());
          break;
        }
        case DECIMAL: {
          mergeDecimal(other.getDecimal());
          break;
        }
        case CURRENCY: {
          mergeCurrency(other.getCurrency());
          break;
        }
        case PIPETYPE_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.dunkware.net.proto.core.GPipe parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.dunkware.net.proto.core.GPipe) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int pipeTypeCase_ = 0;
    private java.lang.Object pipeType_;
    public PipeTypeCase
        getPipeTypeCase() {
      return PipeTypeCase.forNumber(
          pipeTypeCase_);
    }

    public Builder clearPipeType() {
      pipeTypeCase_ = 0;
      pipeType_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        com.dunkware.net.proto.core.GDatePipe, com.dunkware.net.proto.core.GDatePipe.Builder, com.dunkware.net.proto.core.GDatePipeOrBuilder> dateBuilder_;
    /**
     * <code>.dunkware.core.GDatePipe date = 2;</code>
     */
    public boolean hasDate() {
      return pipeTypeCase_ == 2;
    }
    /**
     * <code>.dunkware.core.GDatePipe date = 2;</code>
     */
    public com.dunkware.net.proto.core.GDatePipe getDate() {
      if (dateBuilder_ == null) {
        if (pipeTypeCase_ == 2) {
          return (com.dunkware.net.proto.core.GDatePipe) pipeType_;
        }
        return com.dunkware.net.proto.core.GDatePipe.getDefaultInstance();
      } else {
        if (pipeTypeCase_ == 2) {
          return dateBuilder_.getMessage();
        }
        return com.dunkware.net.proto.core.GDatePipe.getDefaultInstance();
      }
    }
    /**
     * <code>.dunkware.core.GDatePipe date = 2;</code>
     */
    public Builder setDate(com.dunkware.net.proto.core.GDatePipe value) {
      if (dateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        pipeType_ = value;
        onChanged();
      } else {
        dateBuilder_.setMessage(value);
      }
      pipeTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.dunkware.core.GDatePipe date = 2;</code>
     */
    public Builder setDate(
        com.dunkware.net.proto.core.GDatePipe.Builder builderForValue) {
      if (dateBuilder_ == null) {
        pipeType_ = builderForValue.build();
        onChanged();
      } else {
        dateBuilder_.setMessage(builderForValue.build());
      }
      pipeTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.dunkware.core.GDatePipe date = 2;</code>
     */
    public Builder mergeDate(com.dunkware.net.proto.core.GDatePipe value) {
      if (dateBuilder_ == null) {
        if (pipeTypeCase_ == 2 &&
            pipeType_ != com.dunkware.net.proto.core.GDatePipe.getDefaultInstance()) {
          pipeType_ = com.dunkware.net.proto.core.GDatePipe.newBuilder((com.dunkware.net.proto.core.GDatePipe) pipeType_)
              .mergeFrom(value).buildPartial();
        } else {
          pipeType_ = value;
        }
        onChanged();
      } else {
        if (pipeTypeCase_ == 2) {
          dateBuilder_.mergeFrom(value);
        }
        dateBuilder_.setMessage(value);
      }
      pipeTypeCase_ = 2;
      return this;
    }
    /**
     * <code>.dunkware.core.GDatePipe date = 2;</code>
     */
    public Builder clearDate() {
      if (dateBuilder_ == null) {
        if (pipeTypeCase_ == 2) {
          pipeTypeCase_ = 0;
          pipeType_ = null;
          onChanged();
        }
      } else {
        if (pipeTypeCase_ == 2) {
          pipeTypeCase_ = 0;
          pipeType_ = null;
        }
        dateBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.dunkware.core.GDatePipe date = 2;</code>
     */
    public com.dunkware.net.proto.core.GDatePipe.Builder getDateBuilder() {
      return getDateFieldBuilder().getBuilder();
    }
    /**
     * <code>.dunkware.core.GDatePipe date = 2;</code>
     */
    public com.dunkware.net.proto.core.GDatePipeOrBuilder getDateOrBuilder() {
      if ((pipeTypeCase_ == 2) && (dateBuilder_ != null)) {
        return dateBuilder_.getMessageOrBuilder();
      } else {
        if (pipeTypeCase_ == 2) {
          return (com.dunkware.net.proto.core.GDatePipe) pipeType_;
        }
        return com.dunkware.net.proto.core.GDatePipe.getDefaultInstance();
      }
    }
    /**
     * <code>.dunkware.core.GDatePipe date = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.dunkware.net.proto.core.GDatePipe, com.dunkware.net.proto.core.GDatePipe.Builder, com.dunkware.net.proto.core.GDatePipeOrBuilder> 
        getDateFieldBuilder() {
      if (dateBuilder_ == null) {
        if (!(pipeTypeCase_ == 2)) {
          pipeType_ = com.dunkware.net.proto.core.GDatePipe.getDefaultInstance();
        }
        dateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.dunkware.net.proto.core.GDatePipe, com.dunkware.net.proto.core.GDatePipe.Builder, com.dunkware.net.proto.core.GDatePipeOrBuilder>(
                (com.dunkware.net.proto.core.GDatePipe) pipeType_,
                getParentForChildren(),
                isClean());
        pipeType_ = null;
      }
      pipeTypeCase_ = 2;
      onChanged();;
      return dateBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.dunkware.net.proto.core.GPercentPipe, com.dunkware.net.proto.core.GPercentPipe.Builder, com.dunkware.net.proto.core.GPercentPipeOrBuilder> percentBuilder_;
    /**
     * <code>.dunkware.core.GPercentPipe percent = 3;</code>
     */
    public boolean hasPercent() {
      return pipeTypeCase_ == 3;
    }
    /**
     * <code>.dunkware.core.GPercentPipe percent = 3;</code>
     */
    public com.dunkware.net.proto.core.GPercentPipe getPercent() {
      if (percentBuilder_ == null) {
        if (pipeTypeCase_ == 3) {
          return (com.dunkware.net.proto.core.GPercentPipe) pipeType_;
        }
        return com.dunkware.net.proto.core.GPercentPipe.getDefaultInstance();
      } else {
        if (pipeTypeCase_ == 3) {
          return percentBuilder_.getMessage();
        }
        return com.dunkware.net.proto.core.GPercentPipe.getDefaultInstance();
      }
    }
    /**
     * <code>.dunkware.core.GPercentPipe percent = 3;</code>
     */
    public Builder setPercent(com.dunkware.net.proto.core.GPercentPipe value) {
      if (percentBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        pipeType_ = value;
        onChanged();
      } else {
        percentBuilder_.setMessage(value);
      }
      pipeTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.dunkware.core.GPercentPipe percent = 3;</code>
     */
    public Builder setPercent(
        com.dunkware.net.proto.core.GPercentPipe.Builder builderForValue) {
      if (percentBuilder_ == null) {
        pipeType_ = builderForValue.build();
        onChanged();
      } else {
        percentBuilder_.setMessage(builderForValue.build());
      }
      pipeTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.dunkware.core.GPercentPipe percent = 3;</code>
     */
    public Builder mergePercent(com.dunkware.net.proto.core.GPercentPipe value) {
      if (percentBuilder_ == null) {
        if (pipeTypeCase_ == 3 &&
            pipeType_ != com.dunkware.net.proto.core.GPercentPipe.getDefaultInstance()) {
          pipeType_ = com.dunkware.net.proto.core.GPercentPipe.newBuilder((com.dunkware.net.proto.core.GPercentPipe) pipeType_)
              .mergeFrom(value).buildPartial();
        } else {
          pipeType_ = value;
        }
        onChanged();
      } else {
        if (pipeTypeCase_ == 3) {
          percentBuilder_.mergeFrom(value);
        }
        percentBuilder_.setMessage(value);
      }
      pipeTypeCase_ = 3;
      return this;
    }
    /**
     * <code>.dunkware.core.GPercentPipe percent = 3;</code>
     */
    public Builder clearPercent() {
      if (percentBuilder_ == null) {
        if (pipeTypeCase_ == 3) {
          pipeTypeCase_ = 0;
          pipeType_ = null;
          onChanged();
        }
      } else {
        if (pipeTypeCase_ == 3) {
          pipeTypeCase_ = 0;
          pipeType_ = null;
        }
        percentBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.dunkware.core.GPercentPipe percent = 3;</code>
     */
    public com.dunkware.net.proto.core.GPercentPipe.Builder getPercentBuilder() {
      return getPercentFieldBuilder().getBuilder();
    }
    /**
     * <code>.dunkware.core.GPercentPipe percent = 3;</code>
     */
    public com.dunkware.net.proto.core.GPercentPipeOrBuilder getPercentOrBuilder() {
      if ((pipeTypeCase_ == 3) && (percentBuilder_ != null)) {
        return percentBuilder_.getMessageOrBuilder();
      } else {
        if (pipeTypeCase_ == 3) {
          return (com.dunkware.net.proto.core.GPercentPipe) pipeType_;
        }
        return com.dunkware.net.proto.core.GPercentPipe.getDefaultInstance();
      }
    }
    /**
     * <code>.dunkware.core.GPercentPipe percent = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.dunkware.net.proto.core.GPercentPipe, com.dunkware.net.proto.core.GPercentPipe.Builder, com.dunkware.net.proto.core.GPercentPipeOrBuilder> 
        getPercentFieldBuilder() {
      if (percentBuilder_ == null) {
        if (!(pipeTypeCase_ == 3)) {
          pipeType_ = com.dunkware.net.proto.core.GPercentPipe.getDefaultInstance();
        }
        percentBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.dunkware.net.proto.core.GPercentPipe, com.dunkware.net.proto.core.GPercentPipe.Builder, com.dunkware.net.proto.core.GPercentPipeOrBuilder>(
                (com.dunkware.net.proto.core.GPercentPipe) pipeType_,
                getParentForChildren(),
                isClean());
        pipeType_ = null;
      }
      pipeTypeCase_ = 3;
      onChanged();;
      return percentBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.dunkware.net.proto.core.GDecimalPipe, com.dunkware.net.proto.core.GDecimalPipe.Builder, com.dunkware.net.proto.core.GDecimalPipeOrBuilder> decimalBuilder_;
    /**
     * <code>.dunkware.core.GDecimalPipe decimal = 4;</code>
     */
    public boolean hasDecimal() {
      return pipeTypeCase_ == 4;
    }
    /**
     * <code>.dunkware.core.GDecimalPipe decimal = 4;</code>
     */
    public com.dunkware.net.proto.core.GDecimalPipe getDecimal() {
      if (decimalBuilder_ == null) {
        if (pipeTypeCase_ == 4) {
          return (com.dunkware.net.proto.core.GDecimalPipe) pipeType_;
        }
        return com.dunkware.net.proto.core.GDecimalPipe.getDefaultInstance();
      } else {
        if (pipeTypeCase_ == 4) {
          return decimalBuilder_.getMessage();
        }
        return com.dunkware.net.proto.core.GDecimalPipe.getDefaultInstance();
      }
    }
    /**
     * <code>.dunkware.core.GDecimalPipe decimal = 4;</code>
     */
    public Builder setDecimal(com.dunkware.net.proto.core.GDecimalPipe value) {
      if (decimalBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        pipeType_ = value;
        onChanged();
      } else {
        decimalBuilder_.setMessage(value);
      }
      pipeTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.dunkware.core.GDecimalPipe decimal = 4;</code>
     */
    public Builder setDecimal(
        com.dunkware.net.proto.core.GDecimalPipe.Builder builderForValue) {
      if (decimalBuilder_ == null) {
        pipeType_ = builderForValue.build();
        onChanged();
      } else {
        decimalBuilder_.setMessage(builderForValue.build());
      }
      pipeTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.dunkware.core.GDecimalPipe decimal = 4;</code>
     */
    public Builder mergeDecimal(com.dunkware.net.proto.core.GDecimalPipe value) {
      if (decimalBuilder_ == null) {
        if (pipeTypeCase_ == 4 &&
            pipeType_ != com.dunkware.net.proto.core.GDecimalPipe.getDefaultInstance()) {
          pipeType_ = com.dunkware.net.proto.core.GDecimalPipe.newBuilder((com.dunkware.net.proto.core.GDecimalPipe) pipeType_)
              .mergeFrom(value).buildPartial();
        } else {
          pipeType_ = value;
        }
        onChanged();
      } else {
        if (pipeTypeCase_ == 4) {
          decimalBuilder_.mergeFrom(value);
        }
        decimalBuilder_.setMessage(value);
      }
      pipeTypeCase_ = 4;
      return this;
    }
    /**
     * <code>.dunkware.core.GDecimalPipe decimal = 4;</code>
     */
    public Builder clearDecimal() {
      if (decimalBuilder_ == null) {
        if (pipeTypeCase_ == 4) {
          pipeTypeCase_ = 0;
          pipeType_ = null;
          onChanged();
        }
      } else {
        if (pipeTypeCase_ == 4) {
          pipeTypeCase_ = 0;
          pipeType_ = null;
        }
        decimalBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.dunkware.core.GDecimalPipe decimal = 4;</code>
     */
    public com.dunkware.net.proto.core.GDecimalPipe.Builder getDecimalBuilder() {
      return getDecimalFieldBuilder().getBuilder();
    }
    /**
     * <code>.dunkware.core.GDecimalPipe decimal = 4;</code>
     */
    public com.dunkware.net.proto.core.GDecimalPipeOrBuilder getDecimalOrBuilder() {
      if ((pipeTypeCase_ == 4) && (decimalBuilder_ != null)) {
        return decimalBuilder_.getMessageOrBuilder();
      } else {
        if (pipeTypeCase_ == 4) {
          return (com.dunkware.net.proto.core.GDecimalPipe) pipeType_;
        }
        return com.dunkware.net.proto.core.GDecimalPipe.getDefaultInstance();
      }
    }
    /**
     * <code>.dunkware.core.GDecimalPipe decimal = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.dunkware.net.proto.core.GDecimalPipe, com.dunkware.net.proto.core.GDecimalPipe.Builder, com.dunkware.net.proto.core.GDecimalPipeOrBuilder> 
        getDecimalFieldBuilder() {
      if (decimalBuilder_ == null) {
        if (!(pipeTypeCase_ == 4)) {
          pipeType_ = com.dunkware.net.proto.core.GDecimalPipe.getDefaultInstance();
        }
        decimalBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.dunkware.net.proto.core.GDecimalPipe, com.dunkware.net.proto.core.GDecimalPipe.Builder, com.dunkware.net.proto.core.GDecimalPipeOrBuilder>(
                (com.dunkware.net.proto.core.GDecimalPipe) pipeType_,
                getParentForChildren(),
                isClean());
        pipeType_ = null;
      }
      pipeTypeCase_ = 4;
      onChanged();;
      return decimalBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.dunkware.net.proto.core.GCurrencyPipe, com.dunkware.net.proto.core.GCurrencyPipe.Builder, com.dunkware.net.proto.core.GCurrencyPipeOrBuilder> currencyBuilder_;
    /**
     * <code>.dunkware.core.GCurrencyPipe currency = 5;</code>
     */
    public boolean hasCurrency() {
      return pipeTypeCase_ == 5;
    }
    /**
     * <code>.dunkware.core.GCurrencyPipe currency = 5;</code>
     */
    public com.dunkware.net.proto.core.GCurrencyPipe getCurrency() {
      if (currencyBuilder_ == null) {
        if (pipeTypeCase_ == 5) {
          return (com.dunkware.net.proto.core.GCurrencyPipe) pipeType_;
        }
        return com.dunkware.net.proto.core.GCurrencyPipe.getDefaultInstance();
      } else {
        if (pipeTypeCase_ == 5) {
          return currencyBuilder_.getMessage();
        }
        return com.dunkware.net.proto.core.GCurrencyPipe.getDefaultInstance();
      }
    }
    /**
     * <code>.dunkware.core.GCurrencyPipe currency = 5;</code>
     */
    public Builder setCurrency(com.dunkware.net.proto.core.GCurrencyPipe value) {
      if (currencyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        pipeType_ = value;
        onChanged();
      } else {
        currencyBuilder_.setMessage(value);
      }
      pipeTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.dunkware.core.GCurrencyPipe currency = 5;</code>
     */
    public Builder setCurrency(
        com.dunkware.net.proto.core.GCurrencyPipe.Builder builderForValue) {
      if (currencyBuilder_ == null) {
        pipeType_ = builderForValue.build();
        onChanged();
      } else {
        currencyBuilder_.setMessage(builderForValue.build());
      }
      pipeTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.dunkware.core.GCurrencyPipe currency = 5;</code>
     */
    public Builder mergeCurrency(com.dunkware.net.proto.core.GCurrencyPipe value) {
      if (currencyBuilder_ == null) {
        if (pipeTypeCase_ == 5 &&
            pipeType_ != com.dunkware.net.proto.core.GCurrencyPipe.getDefaultInstance()) {
          pipeType_ = com.dunkware.net.proto.core.GCurrencyPipe.newBuilder((com.dunkware.net.proto.core.GCurrencyPipe) pipeType_)
              .mergeFrom(value).buildPartial();
        } else {
          pipeType_ = value;
        }
        onChanged();
      } else {
        if (pipeTypeCase_ == 5) {
          currencyBuilder_.mergeFrom(value);
        }
        currencyBuilder_.setMessage(value);
      }
      pipeTypeCase_ = 5;
      return this;
    }
    /**
     * <code>.dunkware.core.GCurrencyPipe currency = 5;</code>
     */
    public Builder clearCurrency() {
      if (currencyBuilder_ == null) {
        if (pipeTypeCase_ == 5) {
          pipeTypeCase_ = 0;
          pipeType_ = null;
          onChanged();
        }
      } else {
        if (pipeTypeCase_ == 5) {
          pipeTypeCase_ = 0;
          pipeType_ = null;
        }
        currencyBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.dunkware.core.GCurrencyPipe currency = 5;</code>
     */
    public com.dunkware.net.proto.core.GCurrencyPipe.Builder getCurrencyBuilder() {
      return getCurrencyFieldBuilder().getBuilder();
    }
    /**
     * <code>.dunkware.core.GCurrencyPipe currency = 5;</code>
     */
    public com.dunkware.net.proto.core.GCurrencyPipeOrBuilder getCurrencyOrBuilder() {
      if ((pipeTypeCase_ == 5) && (currencyBuilder_ != null)) {
        return currencyBuilder_.getMessageOrBuilder();
      } else {
        if (pipeTypeCase_ == 5) {
          return (com.dunkware.net.proto.core.GCurrencyPipe) pipeType_;
        }
        return com.dunkware.net.proto.core.GCurrencyPipe.getDefaultInstance();
      }
    }
    /**
     * <code>.dunkware.core.GCurrencyPipe currency = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.dunkware.net.proto.core.GCurrencyPipe, com.dunkware.net.proto.core.GCurrencyPipe.Builder, com.dunkware.net.proto.core.GCurrencyPipeOrBuilder> 
        getCurrencyFieldBuilder() {
      if (currencyBuilder_ == null) {
        if (!(pipeTypeCase_ == 5)) {
          pipeType_ = com.dunkware.net.proto.core.GCurrencyPipe.getDefaultInstance();
        }
        currencyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.dunkware.net.proto.core.GCurrencyPipe, com.dunkware.net.proto.core.GCurrencyPipe.Builder, com.dunkware.net.proto.core.GCurrencyPipeOrBuilder>(
                (com.dunkware.net.proto.core.GCurrencyPipe) pipeType_,
                getParentForChildren(),
                isClean());
        pipeType_ = null;
      }
      pipeTypeCase_ = 5;
      onChanged();;
      return currencyBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:dunkware.core.GPipe)
  }

  // @@protoc_insertion_point(class_scope:dunkware.core.GPipe)
  private static final com.dunkware.net.proto.core.GPipe DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.dunkware.net.proto.core.GPipe();
  }

  public static com.dunkware.net.proto.core.GPipe getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<GPipe>
      PARSER = new com.google.protobuf.AbstractParser<GPipe>() {
    @java.lang.Override
    public GPipe parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new GPipe(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<GPipe> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<GPipe> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.dunkware.net.proto.core.GPipe getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

