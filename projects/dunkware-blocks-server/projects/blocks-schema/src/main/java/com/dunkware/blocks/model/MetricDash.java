/*
 * Dunkware Blocks
 * Reusable Building Blocks For Client & Server Development
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dunkware.blocks.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.dunkware.blocks.model.MetricSet;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * MetricDash
 */
@JsonPropertyOrder({
  MetricDash.JSON_PROPERTY_NAME,
  MetricDash.JSON_PROPERTY_COLUMNS,
  MetricDash.JSON_PROPERTY_SETS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-15T02:03:08.283972-05:00[America/Chicago]", comments = "Generator version: 7.6.0")
public class MetricDash {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_COLUMNS = "columns";
  private Integer columns;

  public static final String JSON_PROPERTY_SETS = "sets";
  private List<MetricSet> sets = new ArrayList<>();

  public MetricDash() { 
  }

  public MetricDash name(String name) {
    this.name = name;
    return this;
  }

   /**
   * This will be the header title of the metric dash for example \&quot;Microsoft Corporation (MSFT)\&quot;
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public MetricDash columns(Integer columns) {
    this.columns = columns;
    return this;
  }

   /**
   * Define how many columns for rendering the metric cards
   * @return columns
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COLUMNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getColumns() {
    return columns;
  }


  @JsonProperty(JSON_PROPERTY_COLUMNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColumns(Integer columns) {
    this.columns = columns;
  }


  public MetricDash sets(List<MetricSet> sets) {
    this.sets = sets;
    return this;
  }

  public MetricDash addSetsItem(MetricSet setsItem) {
    if (this.sets == null) {
      this.sets = new ArrayList<>();
    }
    this.sets.add(setsItem);
    return this;
  }

   /**
   * Get sets
   * @return sets
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MetricSet> getSets() {
    return sets;
  }


  @JsonProperty(JSON_PROPERTY_SETS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSets(List<MetricSet> sets) {
    this.sets = sets;
  }


  /**
   * Return true if this MetricDash object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricDash metricDash = (MetricDash) o;
    return Objects.equals(this.name, metricDash.name) &&
        Objects.equals(this.columns, metricDash.columns) &&
        Objects.equals(this.sets, metricDash.sets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, columns, sets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricDash {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    columns: ").append(toIndentedString(columns)).append("\n");
    sb.append("    sets: ").append(toIndentedString(sets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `columns` to the URL query string
    if (getColumns() != null) {
      joiner.add(String.format("%scolumns%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getColumns()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `sets` to the URL query string
    if (getSets() != null) {
      for (int i = 0; i < getSets().size(); i++) {
        if (getSets().get(i) != null) {
          joiner.add(getSets().get(i).toUrlQueryString(String.format("%ssets%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

